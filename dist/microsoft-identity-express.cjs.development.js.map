{"version":3,"file":"microsoft-identity-express.cjs.development.js","sources":["../src/utils/Constants.ts","../src/config/AppSettings.ts","../src/config/ConfigHelper.ts","../src/client/BaseAuthClientBuilder.ts","../src/packageMetadata.ts","../src/utils/CryptoUtils.ts","../src/client/BaseAuthClient.ts","../src/network/FetchManager.ts","../src/utils/UrlUtils.ts","../src/client/webapp/MsalWebAppAuthClient.ts","../src/client/webapp/AppServiceWebAppAuthClient.ts","../src/network/KeyVaultManager.ts","../src/config/MsalConfiguration.ts","../src/utils/EnvironmentUtils.ts","../src/client/webapp/WebAppAuthClientBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LoggerOptions, LogLevel } from '@azure/msal-common';\n\n/**\n * Basic authentication stages used to determine\n * appropriate action after redirect occurs\n */\nexport enum AppStages {\n  SIGN_IN = 'sign_in',\n  SIGN_OUT = 'sign_out',\n  ACQUIRE_TOKEN = 'acquire_token',\n}\n\n/**\n * String constants related to AAD Authority\n */\nexport const AADAuthorityConstants = {\n  COMMON: 'common',\n  ORGANIZATIONS: 'organizations',\n  CONSUMERS: 'consumers',\n};\n\n/**\n * String constants related credential type\n */\nexport enum KeyVaultCredentialTypes {\n  SECRET = 'clientSecret',\n  CERTIFICATE = 'clientCertificate',\n}\n\nexport const OIDC_SCOPES = ['openid', 'profile', 'email', 'offline_access'];\n\n/**\n * Request headers used by App Service authentication\n */\nexport const AppServiceAuthenticationHeaders = {\n  APP_SERVICE_AUTHENTICATION_HEADER: 'X-MSAL-APP-SERVICE-AUTHENTICATION',\n  APP_SERVICE_ACCESS_TOKEN_HEADER: 'X-MS-TOKEN-AAD-ACCESS-TOKEN',\n  APP_SERVICE_ID_TOKEN_HEADER: 'X-MS-TOKEN-AAD-ID-TOKEN',\n  APP_SERVICE_REFRESH_TOKEN_HEADER: 'X-MS-TOKEN-AAD-REFRESH-TOKEN',\n  APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER: 'X-MS-TOKEN-AAD-EXPIRES-ON',\n  APP_SERVICE_USER_OID_HEADER: 'X-MS-CLIENT-PRINCIPAL-ID',\n  APP_SERVICE_USER_UPN_HEADER: 'X-MS-CLIENT-PRINCIPAL-NAME',\n  APP_SERVICE_IDP_X_HEADER: 'X-MS-CLIENT-PRINCIPAL-IDP',\n};\n\n/**\n * Endpoints used by App Service authentication\n */\nexport const AppServiceAuthenticationEndpoints = {\n  ID_TOKEN_ENDPOINT: '/.auth/me',\n  POST_LOGOUT_DEFAULT_ENDPOINT: '/.auth/logout/done',\n  POST_LOGIN_DEFAULT_ENDPOINT: '/.auth/login/done',\n  AAD_SIGN_IN_ENDPOINT: '/.auth/login/aad',\n  AAD_SIGN_OUT_ENDPOINT: '/.auth/logout',\n  TOKEN_REFRESH_ENDPOINT: '/.auth/refresh',\n  AAD_REDIRECT_ENDPOINT: '/.auth/login/aad/callback',\n};\n\n/**\n * Query parameters used by App Service authentication endpoints\n */\nexport const AppServiceAuthenticationQueryParameters = {\n  POST_LOGIN_REDIRECT_QUERY_PARAM: '?post_login_redirect_url=',\n  POST_LOGOUT_REDIRECT_QUERY_PARAM: '?post_logout_redirect_uri=',\n};\n\n/**\n * Environment variables used by App Service authentication\n */\nexport const AppServiceEnvironmentVariables = {\n  WEBSITE_AUTH_ENABLED: 'WEBSITE_AUTH_ENABLED',\n  WEBSITE_AUTH_ALLOWED_AUDIENCES: 'WEBSITE_AUTH_ALLOWED_AUDIENCES',\n  WEBSITE_AUTH_DEFAULT_PROVIDER: 'WEBSITE_AUTH_DEFAULT_PROVIDER',\n  WEBSITE_AUTH_TOKEN_STORE: 'WEBSITE_AUTH_TOKEN_STORE',\n  WEBSITE_AUTH_LOGIN_PARAMS: 'WEBSITE_AUTH_LOGIN_PARAMS',\n  WEBSITE_AUTH_PRESERVE_URL_FRAGMENT: 'WEBSITE_AUTH_PRESERVE_URL_FRAGMENT',\n  WEBSITE_AUTH_OPENID_ISSUER: 'WEBSITE_AUTH_OPENID_ISSUER',\n  WEBSITE_AUTH_CLIENT_ID: 'WEBSITE_AUTH_CLIENT_ID',\n  WEBSITE_HOSTNAME: 'WEBSITE_HOSTNAME',\n  WEBSITE_SITE_NAME: 'WEBSITE_SITE_NAME',\n  WEBSITE_AUTH_REQUIRE_HTTPS: 'WEBSITE_AUTH_REQUIRE_HTTPS',\n  WEBSITE_AUTH_UNAUTHENTICATED_ACTION: 'WEBSITE_AUTH_UNAUTHENTICATED_ACTION',\n  WEBSITE_AUTH_API_PREFIX: 'WEBSITE_AUTH_API_PREFIX',\n  MICROSOFT_PROVIDER_AUTHENTICATION_SECRET:\n    'MICROSOFT_PROVIDER_AUTHENTICATION_SECRET',\n};\n\n/**\n * Constants used in access control scenarios\n */\nexport const AccessControlConstants = {\n  GROUPS: 'groups',\n  ROLES: 'roles',\n  CLAIM_NAMES: '_claim_name',\n  CLAIM_SOURCES: '_claim_sources',\n  PAGINATION_LINK: '@odata.nextLink',\n  GRAPH_MEMBERS_ENDPOINT: 'https://graph.microsoft.com/v1.0/me/memberOf',\n  GRAPH_MEMBER_SCOPES: 'User.Read GroupMember.Read.All',\n};\n\n/**\n * Various information constants\n */\nexport const InfoMessages = {\n  APP_SERVICE_AUTH_DETECTED: 'App Service Authentication detected',\n  REQUEST_FOR_RESOURCE: 'Request made to web API',\n  OVERAGE_OCCURRED: 'User has too many groups. Groups overage claim occurred',\n};\n\n/**\n * Various error constants\n */\nexport const ErrorMessages = {\n  NOT_PERMITTED: 'Not permitted',\n  INVALID_TOKEN: 'Invalid token',\n  CANNOT_DETERMINE_APP_STAGE: 'Cannot determine application stage',\n  CANNOT_VALIDATE_TOKEN: 'Cannot validate token',\n  CSRF_TOKEN_MISMATCH:\n    'CSRF token in response does not match to original request',\n  INTERACTION_REQUIRED: 'interaction_required',\n  TOKEN_ACQUISITION_FAILED: 'Token acquisition failed',\n  TOKEN_RESPONSE_NULL: 'Token response is null',\n  AUTH_CODE_URL_NOT_OBTAINED: 'Authorization code url cannot be obtained',\n  TOKEN_NOT_FOUND: 'No token found',\n  TOKEN_NOT_DECODED: 'Token cannot be decoded',\n  TOKEN_NOT_VERIFIED: 'Token cannot be verified',\n  KEYS_NOT_OBTAINED: 'Signing keys cannot be obtained',\n  STATE_NOT_FOUND: 'State not found',\n  USER_HAS_NO_ROLE: 'User does not have any roles',\n  USER_NOT_IN_ROLE: 'User does not have this role',\n  USER_HAS_NO_GROUP: 'User does not have any groups',\n  USER_NOT_IN_GROUP: 'User does not have this group',\n  METHOD_NOT_ALLOWED: 'Method not allowed for this route',\n  RULE_NOT_FOUND: 'No rule found for this route',\n  SESSION_NOT_FOUND: 'No session found for this request',\n  KEY_VAULT_CONFIG_NOT_FOUND: 'No coordinates found for Key Vault',\n  CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT:\n    'Cannot obtain credentials from Key Vault',\n  SESSION_KEY_NOT_FOUND:\n    'No session key found in session. Cannot encrypt state data',\n  AUTH_CODE_REQUEST_OBJECT_NOT_FOUND:\n    'No auth code request object found in session',\n  ID_TOKEN_CLAIMS_NOT_FOUND: 'No id token claims found in session',\n};\n\n/**\n * Various configuration error constants\n */\nexport const ConfigurationErrorMessages = {\n  AUTH_ROUTES_NOT_CONFIGURED:\n    'Authentication routes are not defined. Ensure that the application settings are configured properly.',\n  NO_PROTECTED_RESOURCE_CONFIGURED:\n    'No protected resource is configured to acquire a token for. Ensure that the application settings are configured properly.',\n  NO_ACCESS_MATRIX_CONFIGURED:\n    'No access matrix is configured to control access for. Ensure that the application settings are configured properly.',\n  NO_CLIENT_ID: 'No clientId provided!',\n  INVALID_CLIENT_ID: 'Invalid clientId!',\n  NO_TENANT_INFO: 'No tenant info provided!',\n  INVALID_TENANT_INFO: 'Invalid tenant info!',\n  NO_CLIENT_CREDENTIAL: 'No client credential provided!',\n  NO_REDIRECT_URI: 'No redirect URI provided!',\n  NO_UNAUTHORIZED_ROUTE: 'No unauthorized route provided!',\n};\n\n/**\n * For more information, visit: https://login.microsoftonline.com/error\n */\nexport const ErrorCodes = {\n  65001: 'AADSTS65001', // consent required\n  50076: 'AADSTS50076', // mfa required\n  50079: 'AADSTS50079', // mfa enrollment required\n  50001: 'AADSTS50001', // invalid resource uri\n  65004: 'AADSTS65004', // user declined consent\n  70011: 'AADSTS70011', // invalid scope\n  700022: 'AADSTS700022', // multiple resources\n  700020: 'AADSTS700020', // interaction required\n  90118: 'AADB2C90118', // password forgotten (B2C)\n};\n\nexport const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n  loggerCallback: (logLevel, message, containsPii) => {\n    if (containsPii) {\n      return;\n    }\n    console.info(message);\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LoggerOptions } from '@azure/msal-common';\n\nexport type AppSettings = {\n    appCredentials: AppCredentials;\n    authRoutes?: AuthRoutes;\n    loggerOptions?: LoggerOptions;\n    b2cPolicies?: {\n        [policy: string]: Policy;\n    };\n    accessMatrix?: {\n        [accessRule: string]: AccessRule;\n    };\n    protectedResources?: {\n        [resource: string]: Resource;\n    };\n    ownedResources?: {\n        [resource: string]: Resource;\n    };\n};\n\nexport type AppCredentials = {\n    instance?: string;\n    clientId: string;\n    tenantId: string;\n    clientSecret?: string;\n    clientCertificate?: ClientCertificate;\n};\n\nexport type ClientCertificate = {\n    thumbprint: string;\n    privateKey: string;\n    x5c?: string;\n};\n\nexport type KeyVaultCredential = {\n    credentialType: string;\n    credentialName: string;\n    keyVaultUrl: string;\n};\n\nexport type AuthRoutes = {\n    redirect: string;\n    unauthorized: string;\n    frontChannelLogout?: string;\n};\n\nexport type Policy = {\n    authority: string;\n};\n\nexport type Resource = {\n    endpoint: string;\n    scopes: string[];\n    accessToken?: string;\n};\n\nexport type AccessRule = {\n    path: string;\n    methods: string[];\n    roles?: string[];\n    groups?: string[];\n};\n\nexport enum AppType {\n    WebApp,\n    WebApi,\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from '@azure/msal-common';\n\nimport {\n    AADAuthorityConstants,\n    ConfigurationErrorMessages,\n    OIDC_SCOPES,\n} from '../utils/Constants';\nimport { AppSettings, AppType, Resource } from './AppSettings';\n\nexport class ConfigHelper {\n    /**\n     * Validates the fields in the configuration file\n     * @param {AppSettings} appSettings: configuration object\n     * @returns {void}\n     */\n    static validateAppSettings(appSettings: AppSettings, appType: AppType): void {\n        if (StringUtils.isEmpty(appSettings.appCredentials.clientId)) {\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_ID);\n        } else if (!ConfigHelper.isGuid(appSettings.appCredentials.clientId)) {\n            throw new Error(ConfigurationErrorMessages.INVALID_CLIENT_ID);\n        }\n\n        if (StringUtils.isEmpty(appSettings.appCredentials.tenantId)) {\n            throw new Error(ConfigurationErrorMessages.NO_TENANT_INFO);\n        } else if (\n            !ConfigHelper.isGuid(appSettings.appCredentials.tenantId) &&\n            !Object.values(AADAuthorityConstants).includes(\n                appSettings.appCredentials.tenantId\n            )\n        ) {\n            throw new Error(ConfigurationErrorMessages.INVALID_TENANT_INFO);\n        }\n\n        switch (appType) {\n            case AppType.WebApp:\n                if (StringUtils.isEmpty(appSettings.authRoutes?.redirect)) {\n                    throw new Error(ConfigurationErrorMessages.NO_REDIRECT_URI);\n                }\n\n                if (StringUtils.isEmpty(appSettings.authRoutes?.unauthorized)) {\n                    throw new Error(ConfigurationErrorMessages.NO_UNAUTHORIZED_ROUTE);\n                }\n\n                break;\n            case AppType.WebApi:\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Verifies if a string is GUID\n     * @param {string} guid\n     * @returns {boolean}\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid =\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n\n    /**\n     * Util method to get the resource name for a given scope(s)\n     * @param {Array} scopes: an array of scopes that the resource is associated with\n     * @param {AppSettings} appSettings: application authentication parameters\n     * @returns {string}\n     */\n    static getResourceNameFromScopes(\n        scopes: string[],\n        appSettings: AppSettings\n    ): string {\n        const index = Object.values({\n            ...appSettings.protectedResources,\n            ...appSettings.ownedResources,\n        }).findIndex(\n            (resource: Resource) =>\n                JSON.stringify(resource.scopes) === JSON.stringify(scopes)\n        );\n\n        const resourceName = Object.keys({\n            ...appSettings.protectedResources,\n            ...appSettings.ownedResources,\n        })[index];\n\n        return resourceName;\n    }\n\n    /**\n     * Util method to get the scopes for a given resource name\n     * @param {string} resourceEndpoint: the resource name\n     * @param {AppSettings} appSettings: application authentication parameters\n     * @returns {string}\n     */\n    static getScopesFromResourceEndpoint(\n        resourceEndpoint: string,\n        appSettings: AppSettings\n    ): string[] {\n        const scopes = Object.values({\n            ...appSettings.protectedResources,\n            ...appSettings.ownedResources,\n        }).find(\n            (resource: Resource) => resource.endpoint === resourceEndpoint\n        )?.scopes;\n\n        return scopes ? scopes : [];\n    }\n\n    /**\n     * Util method to strip the default OIDC scopes from the scopes array\n     * @param {Array} scopesList full list of scopes for this resource\n     * @returns\n     */\n    static getEffectiveScopes(scopesList: string[]): string[] {\n        const effectiveScopesList = scopesList.filter(\n            (scope) => !OIDC_SCOPES.includes(scope)\n        );\n        return effectiveScopesList;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICachePlugin } from '@azure/msal-node';\n\nimport { ConfigHelper } from '../config/ConfigHelper';\nimport {\n    AppSettings,\n    AppType,\n    KeyVaultCredential,\n} from '../config/AppSettings';\n\nexport abstract class BaseAuthClientBuilder {\n    appSettings: AppSettings;\n    protected keyVaultCredential: KeyVaultCredential | undefined;\n    protected customCachePlugin: ICachePlugin | undefined;\n\n    protected constructor(appSettings: AppSettings, appType: AppType) {\n        ConfigHelper.validateAppSettings(appSettings, appType);\n        this.appSettings = appSettings;\n    }\n\n    withKeyVaultCredentials(\n        keyVaultCredential: KeyVaultCredential\n    ): BaseAuthClientBuilder {\n        this.keyVaultCredential = keyVaultCredential;\n        return this;\n    }\n\n    withCustomCachePlugin(cachePlugin: ICachePlugin): BaseAuthClientBuilder {\n        this.customCachePlugin = cachePlugin;\n        return this;\n    }\n\n    abstract build(): any;\n\n    abstract buildAsync(): Promise<any>;\n}\n","export const packageName = '@azure-samples/microsoft-identity-express';\nexport const packageVersion = 'beta';\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as crypto from 'crypto';\n\nexport class CryptoUtils {\n  private algorithm: string;\n\n  constructor(algorithm: string = 'aes-192-cbc') {\n    this.algorithm = algorithm;\n  }\n\n  generateSalt(): string {\n    return crypto.randomBytes(20).toString('hex');\n  }\n\n  createKey(password: string, salt: string): Buffer {\n    return crypto.scryptSync(password, salt, 24);\n  }\n\n  encryptData(stringifiedData: string, key: Buffer): string {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv(this.algorithm, key, iv);\n    const encryptedData = cipher.update(stringifiedData, 'utf8', 'hex');\n\n    return [iv.toString('hex'), encryptedData + cipher.final('hex')].join('.');\n  }\n\n  decryptData(encryptedData: string, key: Buffer): string {\n    const [iv, encrypted] = encryptedData.split('.');\n    const decipher = crypto.createDecipheriv(\n      this.algorithm,\n      key,\n      Buffer.from(iv, 'hex')\n    );\n    return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from '@azure/msal-common';\n\nimport {\n    ConfidentialClientApplication,\n    Configuration,\n    CryptoProvider,\n} from '@azure/msal-node';\n\nimport { AppSettings } from '../config/AppSettings';\n\nimport { packageName, packageVersion } from '../packageMetadata';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nexport abstract class BaseAuthClient {\n    appSettings: AppSettings;\n\n    protected msalConfig: Configuration;\n    protected msalClient: ConfidentialClientApplication;\n    protected cryptoProvider: CryptoProvider;\n    protected cryptoUtils: CryptoUtils;\n    protected logger: Logger;\n\n    protected constructor(appSettings: AppSettings, msalConfig: Configuration) {\n        this.appSettings = appSettings;\n        this.msalConfig = msalConfig;\n        this.cryptoProvider = new CryptoProvider();\n        this.cryptoUtils = new CryptoUtils();\n\n        this.logger = new Logger(\n            this.msalConfig.system?.loggerOptions!,\n            packageName,\n            packageVersion\n        );\n\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\n    }\n\n    getMsalClient(): ConfidentialClientApplication {\n        return this.msalClient;\n    }\n\n    getMsalConfig(): Configuration {\n        return this.msalConfig;\n    }\n\n    getLogger(): Logger {\n        return this.logger;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport axios, { AxiosResponse, AxiosRequestConfig } from 'axios';\nimport { StringUtils } from '@azure/msal-common';\n\nimport { AccessControlConstants, ErrorMessages } from '../utils/Constants';\n\nexport class FetchManager {\n    /**\n     * Calls a resource endpoint\n     * @param {string} endpoint\n     * @returns {Promise}\n     */\n    static callApiEndpoint = async (endpoint: string): Promise<AxiosResponse> => {\n        try {\n            const response: AxiosResponse = await axios.get(endpoint);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    /**\n     * Calls a resource endpoint with a raw access token\n     * using the authorization bearer token scheme\n     * @param {string} endpoint\n     * @param {string} accessToken\n     * @returns {Promise}\n     */\n    static callApiEndpointWithToken = async (\n        endpoint: string,\n        accessToken: string\n    ): Promise<AxiosResponse<any>> => {\n        if (StringUtils.isEmpty(accessToken)) {\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND);\n        }\n\n        const options: AxiosRequestConfig = {\n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n            },\n        };\n\n        try {\n            const response: AxiosResponse = await axios.get(endpoint, options);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    /**\n     * Handles queries against Microsoft Graph that return multiple pages of data\n     * @param {string} accessToken: access token required by endpoint\n     * @param {string} nextPage: next page link\n     * @param {Array} data: stores data from each page\n     * @returns {Promise}\n     */\n    static handlePagination = async (\n        accessToken: string,\n        nextPage: string,\n        data: string[] = []\n    ): Promise<string[]> => {\n        try {\n            const graphResponse = await (\n                await FetchManager.callApiEndpointWithToken(nextPage, accessToken)\n            ).data;\n            graphResponse['value'].map((v: any) => data.push(v.id));\n\n            if (graphResponse[AccessControlConstants.PAGINATION_LINK]) {\n                return await FetchManager.handlePagination(\n                    accessToken,\n                    graphResponse[AccessControlConstants.PAGINATION_LINK],\n                    data\n                );\n            } else {\n                return data;\n            }\n        } catch (error) {\n            throw error;\n        }\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Request } from 'express';\nimport { IUri, UrlString } from '@azure/msal-common';\n\nexport class UrlUtils {\n  /**\n   * Gets the absolute URL from a given request and path string\n   * @param {Request} req: express request object\n   * @param {string} url: a given URL\n   * @returns {string}\n   */\n  static ensureAbsoluteUrl = (req: Request, url: string): string => {\n    const urlComponents: IUri = new UrlString(url).getUrlComponents();\n\n    if (!urlComponents.Protocol) {\n      if (!urlComponents.HostNameAndPort && !url.startsWith('www')) {\n        if (!url.startsWith('/')) {\n          return req.protocol + '://' + req.get('host') + '/' + url;\n        }\n        return req.protocol + '://' + req.get('host') + url;\n      }\n      return req.protocol + '://' + url;\n    } else {\n      return url;\n    }\n  };\n\n  /**\n   * Gets the path segment from a given URL\n   * @param {string} url: a given URL\n   * @returns {string}\n   */\n  static getPathFromUrl = (url: string): string => {\n    const urlComponents: IUri = new UrlString(url).getUrlComponents();\n    return `/${urlComponents.PathSegments.join('/')}`;\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport express, {\n  RequestHandler,\n  Request,\n  Response,\n  NextFunction,\n  Router,\n} from 'express';\n\nimport {\n  OIDC_DEFAULT_SCOPES,\n  InteractionRequiredAuthError,\n  StringUtils,\n  ResponseMode,\n} from '@azure/msal-common';\n\nimport {\n  AuthorizationCodeRequest,\n  AuthorizationUrlRequest,\n  Configuration,\n  SilentFlowRequest,\n} from '@azure/msal-node';\n\nimport { BaseAuthClient } from '../BaseAuthClient';\nimport { ConfigHelper } from '../../config/ConfigHelper';\nimport { FetchManager } from '../../network/FetchManager';\nimport { UrlUtils } from '../../utils/UrlUtils';\n\nimport { Resource, AppSettings, AccessRule } from '../../config/AppSettings';\n\nimport {\n  TokenRequestOptions,\n  GuardOptions,\n  SignInOptions,\n  SignOutOptions,\n} from '../MiddlewareOptions';\n\nimport {\n  AppStages,\n  ErrorMessages,\n  AccessControlConstants,\n  ConfigurationErrorMessages,\n} from '../../utils/Constants';\n\nimport { AppState } from '../../utils/Types';\n\n/**\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\n * It offers a collection of middleware and utility methods that automate\n * basic authentication and authorization tasks in Express web apps\n */\nexport class MsalWebAppAuthClient extends BaseAuthClient {\n  /**\n   * @param {AppSettings} appSettings\n   * @param {Configuration} msalConfig\n   * @constructor\n   */\n  constructor(appSettings: AppSettings, msalConfig: Configuration) {\n    super(appSettings, msalConfig);\n  }\n\n  /**\n   * Initialize AuthProvider and set default routes and handlers\n   * @returns {Router}\n   */\n  initialize(): Router {\n    if (!this.appSettings.authRoutes) {\n      this.logger.error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n    }\n\n    const appRouter = express.Router();\n\n    appRouter.use((req: Request, res: Response, next: NextFunction) => {\n      if (!req.session) {\n        this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\n        throw new Error(ErrorMessages.SESSION_NOT_FOUND);\n      }\n\n      next();\n    });\n\n    appRouter.post(\n      UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect),\n      this.handleRedirect()\n    );\n\n    if (this.appSettings.authRoutes?.frontChannelLogout) {\n      /**\n       * Expose front-channel logout route. For more information, visit:\n       * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\n       */\n      appRouter.get(\n        this.appSettings.authRoutes.frontChannelLogout,\n        (req: Request, res: Response) => {\n          req.session.destroy(() => {\n            res.sendStatus(200);\n          });\n        }\n      );\n    }\n\n    return appRouter;\n  }\n\n  /**\n   * Initiates sign in flow\n   * @param {SignInOptions} options: options to modify login request\n   * @returns {RequestHandler}\n   */\n  signIn(\n    options: SignInOptions = {\n      postLoginRedirect: '/',\n      failureRedirect: '/',\n    }\n  ): RequestHandler {\n    return (req: Request, res: Response, next: NextFunction): Promise<void> => {\n      const customState = {\n        appStage: AppStages.SIGN_IN,\n        redirectTo: options.postLoginRedirect,\n        csrfToken: req.session.csrfToken,\n      } as AppState;\n\n      const authUrlParams = {\n        scopes: OIDC_DEFAULT_SCOPES,\n      } as AuthorizationUrlRequest;\n\n      const authCodeParams = {\n        scopes: OIDC_DEFAULT_SCOPES,\n      } as AuthorizationCodeRequest;\n\n      // get url to sign user in\n      return this.redirectToAuthCodeUrl(\n        req,\n        res,\n        next,\n        authUrlParams,\n        authCodeParams,\n        customState\n      );\n    };\n  }\n\n  /**\n   * Initiate sign out and destroy the session\n   * @param {SignOutOptions} options: options to modify logout request\n   * @returns {RequestHandler}\n   */\n  signOut(\n    options: SignOutOptions = {\n      postLogoutRedirect: '/',\n    }\n  ): RequestHandler {\n    return (req: Request, res: Response): void => {\n      const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(\n        req,\n        options.postLogoutRedirect\n      );\n\n      /**\n       * Construct a logout URI and redirect the user to end the\n       * session with Azure AD/B2C. For more information, visit:\n       * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\n       * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\n       */\n      const logoutUri = `${this.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\n\n      req.session.destroy(() => {\n        res.redirect(logoutUri);\n      });\n    };\n  }\n\n  /**\n   * Middleware that handles redirect depending on request state\n   * There are basically 2 stages: sign-in and acquire token\n   * @returns {RequestHandler}\n   */\n  private handleRedirect(): RequestHandler {\n    return async (\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> => {\n      if (!req.session.key) {\n        this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\n        throw new Error(ErrorMessages.SESSION_NOT_FOUND);\n      }\n\n      if (!req.session.authorizationCodeRequest) {\n        this.logger.error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND);\n        throw new Error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND);\n      }\n\n      if (!this.appSettings.authRoutes) {\n        this.logger.error(\n          ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED\n        );\n        throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      }\n\n      if (req.body.state) {\n        const state: AppState = JSON.parse(\n          this.cryptoUtils.decryptData(\n            this.cryptoProvider.base64Decode(req.body.state as string),\n            Buffer.from(req.session.key, 'hex')\n          )\n        );\n\n        // check if csrfToken matches\n        if (state.csrfToken === req.session.csrfToken) {\n          switch (state.appStage) {\n            case AppStages.SIGN_IN: {\n              // token request should have auth code\n              req.session.authorizationCodeRequest.code = req.body\n                .code as string;\n\n              try {\n                // exchange auth code for tokens\n                const tokenResponse = await this.msalClient.acquireTokenByCode(\n                  req.session.authorizationCodeRequest\n                );\n\n                if (!tokenResponse)\n                  throw new Error(ErrorMessages.TOKEN_RESPONSE_NULL);\n\n                req.session.isAuthenticated = true;\n                req.session.account = tokenResponse.account!; // this won't be null in any web app scenario\n                res.redirect(state.redirectTo);\n              } catch (error) {\n                next(error);\n              }\n              break;\n            }\n\n            case AppStages.ACQUIRE_TOKEN: {\n              // get the name of the resource associated with scope\n              const resourceName = ConfigHelper.getResourceNameFromScopes(\n                req.session.authorizationCodeRequest.scopes,\n                this.appSettings\n              );\n\n              req.session.authorizationCodeRequest.code = req.body\n                .code as string;\n\n              try {\n                const tokenResponse = await this.msalClient.acquireTokenByCode(\n                  req.session.authorizationCodeRequest\n                );\n\n                if (!tokenResponse)\n                  throw new Error(ErrorMessages.TOKEN_RESPONSE_NULL);\n\n                req.session.protectedResources = {\n                  [resourceName]: {\n                    accessToken: tokenResponse.accessToken,\n                  } as Resource,\n                };\n\n                res.redirect(state.redirectTo);\n              } catch (error) {\n                next(error);\n              }\n              break;\n            }\n\n            default:\n              next(new Error(ErrorMessages.CANNOT_DETERMINE_APP_STAGE));\n              break;\n          }\n        } else {\n          res.redirect(this.appSettings.authRoutes.unauthorized);\n        }\n      } else {\n        res.redirect(this.appSettings.authRoutes.unauthorized);\n      }\n    };\n  }\n\n  /**\n   * Middleware that gets tokens via acquireToken*\n   * @param {TokenRequestOptions} options: options to modify this middleware\n   * @returns {RequestHandler}\n   */\n  getToken(options: TokenRequestOptions): RequestHandler {\n    return async (\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> => {\n      if (!this.appSettings.protectedResources) {\n        this.logger.error(\n          ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED\n        );\n        throw new Error(\n          ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED\n        );\n      }\n\n      // get scopes for token request\n      const scopes = options.resource.scopes;\n      const resourceName = ConfigHelper.getResourceNameFromScopes(\n        scopes,\n        this.appSettings\n      );\n\n      req.session.protectedResources = {\n        [resourceName]: {\n          ...this.appSettings.protectedResources[resourceName],\n          accessToken: undefined,\n        } as Resource,\n      };\n\n      try {\n        const silentRequest = {\n          account: req.session.account,\n          scopes: scopes,\n        } as SilentFlowRequest;\n\n        // acquire token silently to be used in resource call\n        const tokenResponse = await this.msalClient.acquireTokenSilent(\n          silentRequest\n        );\n\n        if (!tokenResponse || StringUtils.isEmpty(tokenResponse.accessToken)) {\n          // In B2C scenarios, sometimes an access token is returned empty.\n          // In that case, we will acquire token interactively instead.\n\n          throw new InteractionRequiredAuthError(\n            ErrorMessages.INTERACTION_REQUIRED\n          );\n        }\n\n        req.session.protectedResources[resourceName].accessToken =\n          tokenResponse.accessToken;\n        next();\n      } catch (error) {\n        // in case there are no cached tokens, initiate an interactive call\n        if (error instanceof InteractionRequiredAuthError) {\n          const customState = {\n            appStage: AppStages.ACQUIRE_TOKEN,\n            redirectTo: req.originalUrl,\n          } as AppState;\n\n          const authUrlParams = {\n            scopes: scopes,\n          } as AuthorizationUrlRequest;\n\n          const authCodeParams = {\n            scopes: scopes,\n          } as AuthorizationCodeRequest;\n\n          // initiate the first leg of auth code grant to get token\n          return this.redirectToAuthCodeUrl(\n            req,\n            res,\n            next,\n            authUrlParams,\n            authCodeParams,\n            customState\n          );\n        } else {\n          next(error);\n        }\n      }\n    };\n  }\n\n  /**\n   * Check if authenticated in session\n   * @returns {RequestHandler}\n   */\n  isAuthenticated(): RequestHandler {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      if (!this.appSettings.authRoutes) {\n        this.logger.error(\n          ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED\n        );\n        throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      }\n\n      if (!req.session.isAuthenticated) {\n        return res.redirect(this.appSettings.authRoutes.unauthorized);\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Checks if the user has access for this route, defined in access matrix\n   * @param {GuardOptions} options: options to modify this middleware\n   * @returns {RequestHandler}\n   */\n  hasAccess(options: GuardOptions): RequestHandler {\n    return async (\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> => {\n      if (!this.appSettings.authRoutes) {\n        this.logger.error(\n          ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED\n        );\n        throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      }\n\n      if (!this.appSettings.accessMatrix) {\n        this.logger.error(\n          ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED\n        );\n        throw new Error(ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED);\n      }\n\n      if (!req.session.account?.idTokenClaims) {\n        this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\n        throw new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\n      }\n\n      const checkFor = options.accessRule.hasOwnProperty(\n        AccessControlConstants.GROUPS\n      )\n        ? AccessControlConstants.GROUPS\n        : AccessControlConstants.ROLES;\n\n      switch (checkFor) {\n        case AccessControlConstants.GROUPS:\n          if (\n            !req.session.account.idTokenClaims[AccessControlConstants.GROUPS]\n          ) {\n            if (\n              req.session.account.idTokenClaims[\n                AccessControlConstants.CLAIM_NAMES\n              ] ||\n              req.session.account.idTokenClaims[\n                AccessControlConstants.CLAIM_SOURCES\n              ]\n            ) {\n              return await this.handleOverage(\n                req,\n                res,\n                next,\n                options.accessRule\n              );\n            } else {\n              return res.redirect(this.appSettings.authRoutes.unauthorized);\n            }\n          } else {\n            const groups = req.session.account.idTokenClaims[\n              AccessControlConstants.GROUPS\n            ] as string[];\n\n            if (\n              !this.checkAccessRule(\n                req.method,\n                options.accessRule,\n                groups,\n                AccessControlConstants.GROUPS\n              )\n            ) {\n              return res.redirect(this.appSettings.authRoutes.unauthorized);\n            }\n          }\n\n          next();\n          break;\n\n        case AccessControlConstants.ROLES:\n          if (\n            !req.session.account.idTokenClaims[AccessControlConstants.ROLES]\n          ) {\n            return res.redirect(this.appSettings.authRoutes.unauthorized);\n          } else {\n            const roles = req.session.account.idTokenClaims[\n              AccessControlConstants.ROLES\n            ] as string[];\n\n            if (\n              !this.checkAccessRule(\n                req.method,\n                options.accessRule,\n                roles,\n                AccessControlConstants.ROLES\n              )\n            ) {\n              return res.redirect(this.appSettings.authRoutes.unauthorized);\n            }\n          }\n\n          next();\n          break;\n\n        default:\n          break;\n      }\n    };\n  }\n\n  // ============== UTILS ===============\n\n  /**\n   * This method is used to generate an auth code url request\n   * @param {Request} req: express request object\n   * @param {Response} res: express response object\n   * @param {NextFunction} next: express next function\n   * @param {AuthCodeParams} params: modifies auth code url request\n   * @returns {Promise}\n   */\n  private async redirectToAuthCodeUrl(\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    authUrlParams: AuthorizationUrlRequest,\n    authCodeParams: AuthorizationCodeRequest,\n    customState: AppState\n  ): Promise<void> {\n    if (!this.appSettings.authRoutes) {\n      this.logger.error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n    }\n\n    // add session csrfToken for crsf\n    req.session.csrfToken = this.cryptoProvider.createNewGuid();\n\n    const key = this.cryptoUtils.createKey(\n      req.session.csrfToken,\n      this.cryptoUtils.generateSalt()\n    );\n    req.session.key = key.toString('hex');\n\n    const state = JSON.stringify({\n      ...customState,\n      csrfToken: req.session.csrfToken,\n    });\n\n    // prepare the request\n    req.session.authorizationUrlRequest = {\n      ...authUrlParams,\n      state: this.cryptoProvider.base64Encode(\n        this.cryptoUtils.encryptData(state, key)\n      ),\n      redirectUri: UrlUtils.ensureAbsoluteUrl(\n        req,\n        this.appSettings.authRoutes.redirect\n      ),\n      responseMode: ResponseMode.FORM_POST,\n    };\n\n    req.session.authorizationCodeRequest = {\n      ...authCodeParams,\n      redirectUri: UrlUtils.ensureAbsoluteUrl(\n        req,\n        this.appSettings.authRoutes.redirect\n      ),\n      code: '',\n    };\n\n    // request an authorization code to exchange for tokens\n    try {\n      const response = await this.msalClient.getAuthCodeUrl(\n        req.session.authorizationUrlRequest\n      );\n      res.redirect(response);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /**\n   * Handles group overage claims by querying MS Graph /memberOf endpoint\n   * @param {Request} req: express request object\n   * @param {Response} res: express response object\n   * @param {NextFunction} next: express next function\n   * @param {AccessRule} rule: a given access rule\n   * @returns {Promise}\n   */\n  private async handleOverage(\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    rule: AccessRule\n  ): Promise<void> {\n    if (!this.appSettings.authRoutes) {\n      this.logger.error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n    }\n\n    if (!req.session.account?.idTokenClaims) {\n      this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\n      throw new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\n    }\n\n    const { _claim_names, _claim_sources, ...newIdTokenClaims } =\n      req.session.account.idTokenClaims;\n\n    const silentRequest: SilentFlowRequest = {\n      account: req.session.account,\n      scopes: AccessControlConstants.GRAPH_MEMBER_SCOPES.split(' '),\n    };\n\n    try {\n      // acquire token silently to be used in resource call\n      const tokenResponse = await this.msalClient.acquireTokenSilent(\n        silentRequest\n      );\n\n      if (!tokenResponse) throw new Error(ErrorMessages.TOKEN_RESPONSE_NULL);\n\n      try {\n        const graphResponse = await FetchManager.callApiEndpointWithToken(\n          AccessControlConstants.GRAPH_MEMBERS_ENDPOINT,\n          tokenResponse.accessToken\n        );\n\n        /**\n         * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging\n         * or due to the use of the $top query parameter to specifically limit the page size in a request.\n         * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in\n         * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\n         */\n        if (graphResponse.data[AccessControlConstants.PAGINATION_LINK]) {\n          try {\n            const userGroups = await FetchManager.handlePagination(\n              tokenResponse.accessToken,\n              graphResponse.data[AccessControlConstants.PAGINATION_LINK]\n            );\n\n            req.session.account.idTokenClaims = {\n              ...newIdTokenClaims,\n              groups: userGroups,\n            };\n\n            if (\n              !this.checkAccessRule(\n                req.method,\n                rule,\n                req.session.account.idTokenClaims[\n                  AccessControlConstants.GROUPS\n                ] as string[],\n                AccessControlConstants.GROUPS\n              )\n            ) {\n              return res.redirect(this.appSettings.authRoutes.unauthorized);\n            } else {\n              return next();\n            }\n          } catch (error) {\n            next(error);\n          }\n        } else {\n          req.session.account.idTokenClaims = {\n            ...newIdTokenClaims,\n            groups: graphResponse.data['value'].map((v: any) => v.id),\n          };\n\n          if (\n            !this.checkAccessRule(\n              req.method,\n              rule,\n              req.session.account.idTokenClaims[\n                AccessControlConstants.GROUPS\n              ] as string[],\n              AccessControlConstants.GROUPS\n            )\n          ) {\n            return res.redirect(this.appSettings.authRoutes.unauthorized);\n          } else {\n            return next();\n          }\n        }\n      } catch (error) {\n        next(error);\n      }\n    } catch (error) {\n      // TODO: handle silent token acquisition error\n      next(error);\n    }\n  }\n\n  /**\n   * Checks if the request passes a given access rule\n   * @param {string} method: HTTP method for this route\n   * @param {AccessRule} rule: access rule for this route\n   * @param {Array} creds: user's credentials i.e. roles or groups\n   * @param {string} credType: roles or groups\n   * @returns {boolean}\n   */\n  private checkAccessRule(\n    method: string,\n    rule: AccessRule,\n    creds: string[],\n    credType: string\n  ): boolean {\n    if (rule.methods.includes(method)) {\n      switch (credType) {\n        case AccessControlConstants.GROUPS:\n          if (rule.groups!.filter((elem) => creds.includes(elem)).length < 1) {\n            return false;\n          }\n          break;\n\n        case AccessControlConstants.ROLES:\n          if (rule.roles!.filter((elem) => creds.includes(elem)).length < 1) {\n            return false;\n          }\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport express, {\n  Router,\n  RequestHandler,\n  Request,\n  Response,\n  NextFunction,\n} from 'express';\n\nimport { AccountInfo, AuthToken } from '@azure/msal-common';\n\nimport { BaseAuthClient } from '../BaseAuthClient';\nimport { Configuration } from '@azure/msal-node';\n\nimport { AccessTokenClaims, IdTokenClaims } from '../../utils/Types';\nimport { AppSettings, Resource } from '../../config/AppSettings';\nimport { ConfigHelper } from '../../config/ConfigHelper';\nimport { UrlUtils } from '../../utils/UrlUtils';\n\nimport {\n  SignInOptions,\n  SignOutOptions,\n  TokenRequestOptions,\n} from '../MiddlewareOptions';\n\nimport {\n  AppServiceAuthenticationHeaders,\n  AppServiceEnvironmentVariables,\n  AppServiceAuthenticationEndpoints,\n  AppServiceAuthenticationQueryParameters,\n  ErrorMessages,\n  ConfigurationErrorMessages,\n} from '../../utils/Constants';\n\nexport class AppServiceWebAppAuthClient extends BaseAuthClient {\n  /**\n   * @param {AppSettings} appSettings\n   * @param {Configuration} msalConfig\n   * @constructor\n   */\n  constructor(appSettings: AppSettings, msalConfig: Configuration) {\n    super(appSettings, msalConfig);\n  }\n\n  /**\n   * Initialize AuthProvider and set default routes and handlers\n   * @param {InitializationOptions} options\n   * @returns {Router}\n   */\n  initialize(): Router {\n    if (!this.appSettings.authRoutes) {\n      this.logger.error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n      throw new Error(ConfigurationErrorMessages.AUTH_ROUTES_NOT_CONFIGURED);\n    }\n\n    const appRouter = express.Router();\n\n    // handle redirect\n    appRouter.get(\n      UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect),\n      this.handleRedirect()\n    );\n    appRouter.post(\n      UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect),\n      this.handleRedirect()\n    );\n\n    appRouter.use((req: Request, res: Response, next: NextFunction): void => {\n      if (!req.session) {\n        this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\n        throw new Error(ErrorMessages.SESSION_NOT_FOUND);\n      }\n\n      if (!req.session.isAuthenticated) {\n        // check headers for id token\n        const rawIdToken = req.headers[\n          AppServiceAuthenticationHeaders.APP_SERVICE_ID_TOKEN_HEADER.toLowerCase()\n        ] as string;\n\n        if (rawIdToken) {\n          // parse the id token\n          const idTokenClaims: IdTokenClaims = AuthToken.extractTokenClaims(\n            rawIdToken,\n            this.cryptoProvider\n          );\n\n          req.session.isAuthenticated = true;\n\n          req.session.account = {\n            tenantId: idTokenClaims.tid,\n            homeAccountId: idTokenClaims.oid + '.' + idTokenClaims.tid,\n            localAccountId: idTokenClaims.oid,\n            environment: idTokenClaims.iss?.split('://')[1].split('/')[0],\n            username: idTokenClaims.preferred_username,\n            name: idTokenClaims.name,\n            idTokenClaims: idTokenClaims,\n          } as AccountInfo;\n        }\n      }\n\n      next();\n    });\n\n    return appRouter;\n  }\n\n  /**\n   * Initiates sign in flow\n   * @param {SignInOptions} options: options to modify login request\n   * @returns {RequestHandler}\n   */\n  signIn(\n    options: SignInOptions = {\n      postLoginRedirect: '/',\n      failureRedirect: '/',\n    }\n  ): RequestHandler {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      let loginUri;\n      const postLoginRedirectUri = UrlUtils.ensureAbsoluteUrl(\n        req,\n        options.postLoginRedirect\n      );\n      loginUri =\n        'https://' +\n        process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\n        AppServiceAuthenticationEndpoints.AAD_SIGN_IN_ENDPOINT +\n        AppServiceAuthenticationQueryParameters.POST_LOGIN_REDIRECT_QUERY_PARAM +\n        postLoginRedirectUri;\n      res.redirect(loginUri);\n    };\n  }\n\n  /**\n   * Initiate sign out and destroy the session\n   * @param {SignOutOptions} options: options to modify logout request\n   * @returns {RequestHandler}\n   */\n  signOut(\n    options: SignOutOptions = {\n      postLogoutRedirect: '/',\n    }\n  ): RequestHandler {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(\n        req,\n        options.postLogoutRedirect\n      );\n      const logoutUri =\n        'https://' +\n        process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\n        AppServiceAuthenticationEndpoints.AAD_SIGN_OUT_ENDPOINT +\n        AppServiceAuthenticationQueryParameters.POST_LOGOUT_REDIRECT_QUERY_PARAM +\n        postLogoutRedirectUri;\n\n      req.session.destroy(() => {\n        res.redirect(logoutUri);\n      });\n    };\n  }\n\n  /**\n   * Middleware that handles redirect depending on request state\n   * There are basically 2 stages: sign-in and acquire token\n   * @returns {RequestHandler}\n   */\n  private handleRedirect(): RequestHandler {\n    return async (\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> => {\n      next();\n    };\n  }\n\n  /**\n   * Middleware that gets tokens\n   * @param {TokenRequestOptions} options: options to modify this middleware\n   * @returns {RequestHandler}\n   */\n  getToken(options: TokenRequestOptions): RequestHandler {\n    return async (\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> => {\n      // get scopes for token request\n      const resourceName = ConfigHelper.getResourceNameFromScopes(\n        options.resource.scopes,\n        this.appSettings\n      );\n\n      if (!req.session.protectedResources) {\n        req.session.protectedResources = {};\n      }\n\n      req.session.protectedResources = {\n        [resourceName]: {\n          ...this.appSettings.protectedResources![resourceName],\n          accessToken: undefined,\n        } as Resource,\n      };\n\n      const rawAccessToken = req.headers[\n        AppServiceAuthenticationHeaders.APP_SERVICE_ACCESS_TOKEN_HEADER.toLowerCase()\n      ] as string;\n\n      if (rawAccessToken) {\n        const accessTokenClaims = AuthToken.extractTokenClaims(\n          rawAccessToken,\n          this.cryptoProvider\n        ) as AccessTokenClaims;\n\n        // get the name of the resource associated with scope\n        const scopes = accessTokenClaims?.scp.split(' ');\n        const effectiveScopes = ConfigHelper.getEffectiveScopes(scopes);\n\n        if (\n          options.resource.scopes.every((elem) =>\n            effectiveScopes.includes(elem)\n          )\n        ) {\n          req.session.protectedResources[resourceName].accessToken =\n            rawAccessToken;\n          return next();\n        } else {\n          return next(new Error('No tokens found for given scopes'));\n        }\n      }\n    };\n  }\n\n  /**\n   * Check if authenticated in session\n   * @returns {RequestHandler}\n   */\n  isAuthenticated(): RequestHandler {\n    return (req: Request, res: Response, next: NextFunction): void => {\n      if (!req.session.isAuthenticated) {\n        return res.redirect(this.appSettings.authRoutes!.unauthorized);\n      }\n\n      next();\n    };\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DefaultAzureCredential } from '@azure/identity';\nimport {\n    CertificateClient,\n    KeyVaultCertificate,\n} from '@azure/keyvault-certificates';\nimport { KeyVaultSecret, SecretClient } from '@azure/keyvault-secrets';\n\nimport { KeyVaultCredential, ClientCertificate } from '../config/AppSettings';\nimport { KeyVaultCredentialTypes } from '../utils/Constants';\n\nexport type KeyVaultCredentialResponse = {\n    type: KeyVaultCredentialTypes.SECRET | KeyVaultCredentialTypes.CERTIFICATE;\n    value: string & ClientCertificate;\n};\n\nexport class KeyVaultManager {\n    /**\n     * Fetches credentials from Key Vault and updates appSettings\n     * @param {AppSettings} appSettings\n     * @returns {Promise}\n     */\n    async getCredentialFromKeyVault(\n        keyVaultCredential: KeyVaultCredential\n    ): Promise<KeyVaultCredentialResponse> {\n        const credential = new DefaultAzureCredential();\n        let response: KeyVaultCredentialResponse = {} as KeyVaultCredentialResponse;\n\n        switch (keyVaultCredential.credentialType) {\n            case KeyVaultCredentialTypes.SECRET: {\n                try {\n                    const secretResponse = await this.getSecretCredential(\n                        keyVaultCredential,\n                        credential\n                    );\n\n                    response = {\n                        type: KeyVaultCredentialTypes.SECRET,\n                        value: secretResponse.value,\n                    } as KeyVaultCredentialResponse;\n                } catch (error) {\n                    throw error;\n                }\n                break;\n            }\n\n            case KeyVaultCredentialTypes.CERTIFICATE: {\n                try {\n                    const certificateResponse = await this.getCertificateCredential(\n                        keyVaultCredential,\n                        credential\n                    );\n                    const secretResponse = await this.getSecretCredential(\n                        keyVaultCredential,\n                        credential\n                    );\n\n                    response = {\n                        type: KeyVaultCredentialTypes.CERTIFICATE,\n                        value: {\n                            thumbprint:\n                                certificateResponse?.properties?.x509Thumbprint?.toString(),\n                            privateKey: secretResponse?.value?.split(\n                                '-----BEGIN CERTIFICATE-----\\n'\n                            )[0],\n                        },\n                    } as KeyVaultCredentialResponse;\n                } catch (error) {\n                    throw error;\n                }\n                break;\n            }\n\n            default:\n                break;\n        }\n\n        return response;\n    }\n\n    /**\n     * Gets a certificate credential from Key Vault\n     * @param {AppSettings} config\n     * @param {DefaultAzureCredential} credential\n     * @returns {Promise}\n     */\n    async getCertificateCredential(\n        keyVaultCredential: KeyVaultCredential,\n        credential: DefaultAzureCredential\n    ): Promise<KeyVaultCertificate> {\n        // Initialize secretClient with credentials\n        const secretClient = new CertificateClient(\n            keyVaultCredential.keyVaultUrl,\n            credential\n        );\n\n        try {\n            const keyVaultCertificate = await secretClient.getCertificate(\n                keyVaultCredential.credentialName\n            );\n            return keyVaultCertificate;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Gets a secret credential from Key Vault\n     * @param {AppSettings} config\n     * @param {DefaultAzureCredential} credential\n     * @returns {Promise}\n     */\n    async getSecretCredential(\n        keyVaultCredential: KeyVaultCredential,\n        credential: DefaultAzureCredential\n    ): Promise<KeyVaultSecret> {\n        // Initialize secretClient with credentials\n        const secretClient = new SecretClient(\n            keyVaultCredential.keyVaultUrl,\n            credential\n        );\n\n        try {\n            const keyVaultSecret = await secretClient.getSecret(\n                keyVaultCredential.credentialName\n            );\n            return keyVaultSecret;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, Constants } from '@azure/msal-common';\n\nimport { Configuration } from '@azure/msal-node';\n\nimport { DEFAULT_LOGGER_OPTIONS } from '../utils/Constants';\n\nimport { AppSettings } from './AppSettings';\n\nexport class MsalConfiguration {\n    /**\n     * Maps the custom configuration object to configuration\n     * object expected by MSAL Node ConfidentialClientApplication class\n     * @param {AppSettings} appSettings: configuration object\n     * @param {ICachePlugin} cachePlugin: custom cache plugin\n     * @param {IDistributedPersistence} distributedPersistence: distributed persistence client\n     * @returns {Configuration}\n     */\n    static getMsalConfiguration(appSettings: AppSettings): Configuration {\n        return {\n            auth: {\n                clientId: appSettings.appCredentials.clientId,\n                authority: appSettings.b2cPolicies\n                    ? Object.entries(appSettings.b2cPolicies)[0][1]['authority'] // the first policy/user-flow is the default authority\n                    : appSettings.appCredentials.instance\n                        ? `https://${appSettings.appCredentials.instance}/${appSettings.appCredentials.tenantId}`\n                        : `https://${Constants.DEFAULT_AUTHORITY_HOST}/${appSettings.appCredentials.tenantId}`,\n                ...(appSettings.appCredentials.hasOwnProperty('clientSecret') && {\n                    clientSecret: appSettings.appCredentials.clientSecret,\n                }),\n                ...(appSettings.appCredentials.hasOwnProperty('clientCertificate') && {\n                    clientCertificate: appSettings.appCredentials.clientCertificate,\n                }),\n                knownAuthorities: appSettings.b2cPolicies\n                    ? [\n                        UrlString.getDomainFromUrl(\n                            Object.entries(appSettings.b2cPolicies)[0][1]['authority']\n                        ),\n                    ] // in B2C scenarios\n                    : [],\n            },\n            system: {\n                loggerOptions: appSettings.loggerOptions\n                    ? appSettings.loggerOptions\n                    : DEFAULT_LOGGER_OPTIONS,\n            },\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AppServiceEnvironmentVariables } from './Constants';\n\nexport class EnvironmentUtils {\n  static isProduction(): boolean {\n    return process.env.NODE_ENV === 'production';\n  }\n\n  static isDevelopment(): boolean {\n    return process.env.NODE_ENV === 'development';\n  }\n\n  static isAppServiceAuthEnabled(): boolean {\n    return (\n      process.env[AppServiceEnvironmentVariables.WEBSITE_AUTH_ENABLED] ===\n      'True'\n    );\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Configuration } from '@azure/msal-node';\n\nimport { BaseAuthClientBuilder } from '../BaseAuthClientBuilder';\nimport { MsalWebAppAuthClient } from './MsalWebAppAuthClient';\nimport { AppServiceWebAppAuthClient } from './AppServiceWebAppAuthClient';\nimport { KeyVaultManager } from '../../network/KeyVaultManager';\nimport { MsalConfiguration } from '../../config/MsalConfiguration';\nimport { AppSettings, AppType } from '../../config/AppSettings';\nimport { EnvironmentUtils } from '../../utils/EnvironmentUtils';\nimport { ErrorMessages } from '../../utils/Constants';\n\nexport class WebAppAuthClientBuilder extends BaseAuthClientBuilder {\n  appSettings!: AppSettings;\n  private msalConfig!: Configuration;\n\n  constructor(appSettings: AppSettings) {\n    super(appSettings, AppType.WebApp);\n  }\n\n  build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient {\n    // TODO: throw error if key vault credential is being built\n\n    this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\n\n    if (EnvironmentUtils.isAppServiceAuthEnabled()) {\n      return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\n    } else {\n      return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\n    }\n  }\n\n  async buildAsync(): Promise<\n    MsalWebAppAuthClient | AppServiceWebAppAuthClient\n  > {\n    try {\n      if (this.keyVaultCredential) {\n        const keyVaultManager = new KeyVaultManager();\n        const credential = await keyVaultManager.getCredentialFromKeyVault(\n          this.keyVaultCredential\n        );\n        this.appSettings.appCredentials[credential.type] = credential.value;\n      }\n\n      this.msalConfig = MsalConfiguration.getMsalConfiguration(\n        this.appSettings\n      );\n\n      if (EnvironmentUtils.isAppServiceAuthEnabled()) {\n        return new AppServiceWebAppAuthClient(\n          this.appSettings,\n          this.msalConfig\n        );\n      } else {\n        return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\n      }\n    } catch (error) {\n      throw new Error(ErrorMessages.CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT);\n    }\n  }\n}\n"],"names":["AppStages","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","KeyVaultCredentialTypes","OIDC_SCOPES","AppServiceAuthenticationHeaders","APP_SERVICE_AUTHENTICATION_HEADER","APP_SERVICE_ACCESS_TOKEN_HEADER","APP_SERVICE_ID_TOKEN_HEADER","APP_SERVICE_REFRESH_TOKEN_HEADER","APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER","APP_SERVICE_USER_OID_HEADER","APP_SERVICE_USER_UPN_HEADER","APP_SERVICE_IDP_X_HEADER","AppServiceAuthenticationEndpoints","ID_TOKEN_ENDPOINT","POST_LOGOUT_DEFAULT_ENDPOINT","POST_LOGIN_DEFAULT_ENDPOINT","AAD_SIGN_IN_ENDPOINT","AAD_SIGN_OUT_ENDPOINT","TOKEN_REFRESH_ENDPOINT","AAD_REDIRECT_ENDPOINT","AppServiceAuthenticationQueryParameters","POST_LOGIN_REDIRECT_QUERY_PARAM","POST_LOGOUT_REDIRECT_QUERY_PARAM","AppServiceEnvironmentVariables","WEBSITE_AUTH_ENABLED","WEBSITE_AUTH_ALLOWED_AUDIENCES","WEBSITE_AUTH_DEFAULT_PROVIDER","WEBSITE_AUTH_TOKEN_STORE","WEBSITE_AUTH_LOGIN_PARAMS","WEBSITE_AUTH_PRESERVE_URL_FRAGMENT","WEBSITE_AUTH_OPENID_ISSUER","WEBSITE_AUTH_CLIENT_ID","WEBSITE_HOSTNAME","WEBSITE_SITE_NAME","WEBSITE_AUTH_REQUIRE_HTTPS","WEBSITE_AUTH_UNAUTHENTICATED_ACTION","WEBSITE_AUTH_API_PREFIX","MICROSOFT_PROVIDER_AUTHENTICATION_SECRET","AccessControlConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","ErrorMessages","NOT_PERMITTED","INVALID_TOKEN","CANNOT_DETERMINE_APP_STAGE","CANNOT_VALIDATE_TOKEN","CSRF_TOKEN_MISMATCH","INTERACTION_REQUIRED","TOKEN_ACQUISITION_FAILED","TOKEN_RESPONSE_NULL","AUTH_CODE_URL_NOT_OBTAINED","TOKEN_NOT_FOUND","TOKEN_NOT_DECODED","TOKEN_NOT_VERIFIED","KEYS_NOT_OBTAINED","STATE_NOT_FOUND","USER_HAS_NO_ROLE","USER_NOT_IN_ROLE","USER_HAS_NO_GROUP","USER_NOT_IN_GROUP","METHOD_NOT_ALLOWED","RULE_NOT_FOUND","SESSION_NOT_FOUND","KEY_VAULT_CONFIG_NOT_FOUND","CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT","SESSION_KEY_NOT_FOUND","AUTH_CODE_REQUEST_OBJECT_NOT_FOUND","ID_TOKEN_CLAIMS_NOT_FOUND","ConfigurationErrorMessages","AUTH_ROUTES_NOT_CONFIGURED","NO_PROTECTED_RESOURCE_CONFIGURED","NO_ACCESS_MATRIX_CONFIGURED","NO_CLIENT_ID","INVALID_CLIENT_ID","NO_TENANT_INFO","INVALID_TENANT_INFO","NO_CLIENT_CREDENTIAL","NO_REDIRECT_URI","NO_UNAUTHORIZED_ROUTE","DEFAULT_LOGGER_OPTIONS","loggerCallback","logLevel","message","containsPii","console","info","piiLoggingEnabled","LogLevel","Info","AppType","ConfigHelper","validateAppSettings","appSettings","appType","StringUtils","isEmpty","appCredentials","clientId","Error","isGuid","tenantId","Object","values","includes","WebApp","authRoutes","redirect","unauthorized","guid","regexGuid","test","getResourceNameFromScopes","scopes","index","protectedResources","ownedResources","findIndex","resource","JSON","stringify","resourceName","keys","getScopesFromResourceEndpoint","resourceEndpoint","find","endpoint","getEffectiveScopes","scopesList","effectiveScopesList","filter","scope","BaseAuthClientBuilder","withKeyVaultCredentials","keyVaultCredential","withCustomCachePlugin","cachePlugin","customCachePlugin","packageName","packageVersion","CryptoUtils","algorithm","generateSalt","crypto","toString","createKey","password","salt","encryptData","stringifiedData","key","iv","cipher","encryptedData","update","join","decryptData","split","encrypted","decipher","Buffer","from","BaseAuthClient","msalConfig","cryptoProvider","CryptoProvider","cryptoUtils","logger","Logger","system","loggerOptions","msalClient","ConfidentialClientApplication","getMsalClient","getMsalConfig","getLogger","FetchManager","axios","get","response","data","accessToken","options","headers","Authorization","nextPage","callApiEndpointWithToken","graphResponse","map","v","push","id","handlePagination","UrlUtils","req","url","urlComponents","UrlString","getUrlComponents","Protocol","HostNameAndPort","startsWith","protocol","PathSegments","MsalWebAppAuthClient","initialize","error","appRouter","express","Router","use","res","next","session","post","getPathFromUrl","handleRedirect","frontChannelLogout","destroy","sendStatus","signIn","postLoginRedirect","failureRedirect","customState","appStage","SIGN_IN","redirectTo","csrfToken","authUrlParams","OIDC_DEFAULT_SCOPES","authCodeParams","redirectToAuthCodeUrl","signOut","postLogoutRedirect","postLogoutRedirectUri","ensureAbsoluteUrl","logoutUri","auth","authority","authorizationCodeRequest","body","state","parse","base64Decode","ACQUIRE_TOKEN","code","acquireTokenByCode","tokenResponse","isAuthenticated","account","getToken","undefined","silentRequest","acquireTokenSilent","InteractionRequiredAuthError","originalUrl","hasAccess","accessMatrix","idTokenClaims","checkFor","accessRule","hasOwnProperty","handleOverage","groups","checkAccessRule","method","roles","createNewGuid","authorizationUrlRequest","base64Encode","redirectUri","responseMode","ResponseMode","FORM_POST","getAuthCodeUrl","rule","_claim_names","newIdTokenClaims","userGroups","creds","credType","methods","elem","length","AppServiceWebAppAuthClient","rawIdToken","toLowerCase","AuthToken","extractTokenClaims","tid","homeAccountId","oid","localAccountId","environment","iss","username","preferred_username","name","loginUri","postLoginRedirectUri","process","env","rawAccessToken","accessTokenClaims","scp","effectiveScopes","every","KeyVaultManager","getCredentialFromKeyVault","credential","DefaultAzureCredential","credentialType","SECRET","CERTIFICATE","getSecretCredential","secretResponse","type","value","getCertificateCredential","certificateResponse","thumbprint","properties","x509Thumbprint","privateKey","secretClient","CertificateClient","keyVaultUrl","getCertificate","credentialName","keyVaultCertificate","SecretClient","getSecret","keyVaultSecret","MsalConfiguration","getMsalConfiguration","b2cPolicies","entries","instance","Constants","DEFAULT_AUTHORITY_HOST","clientSecret","clientCertificate","knownAuthorities","getDomainFromUrl","EnvironmentUtils","isProduction","isDevelopment","isAppServiceAuthEnabled","WebAppAuthClientBuilder","build","buildAsync","keyVaultManager"],"mappings":"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"}