{"version":3,"file":"microsoft-identity-express.cjs.development.js","sources":["../src/utils/Constants.ts","../src/config/AppSettings.ts","../src/config/ConfigHelper.ts","../src/client/BaseAuthClientBuilder.ts","../src/utils/CryptoUtils.ts","../src/packageMetadata.ts","../src/client/BaseAuthClient.ts","../src/network/FetchManager.ts","../src/utils/UrlUtils.ts","../src/utils/Helpers.ts","../src/client/webapp/MsalWebAppAuthClient.ts","../src/client/webapp/AppServiceWebAppAuthClient.ts","../src/network/KeyVaultManager.ts","../src/config/MsalConfiguration.ts","../src/utils/EnvironmentUtils.ts","../src/client/webapp/WebAppAuthClientBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LoggerOptions, LogLevel } from \"@azure/msal-common\";\r\n\r\n/**\r\n * Basic authentication stages used to determine\r\n * appropriate action after redirect occurs\r\n */\r\nexport enum AppStages {\r\n    SIGN_IN = \"sign_in\",\r\n    SIGN_OUT = \"sign_out\",\r\n    ACQUIRE_TOKEN = \"acquire_token\",\r\n}\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n\r\n/**\r\n * String constants related credential type\r\n */\r\nexport enum KeyVaultCredentialTypes {\r\n    SECRET = \"clientSecret\",\r\n    CERTIFICATE = \"clientCertificate\",\r\n}\r\n\r\nexport const OIDC_SCOPES = [\"openid\", \"profile\", \"email\", \"offline_access\"];\r\n\r\n/**\r\n * Request headers used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationHeaders = {\r\n    APP_SERVICE_AUTHENTICATION_HEADER: \"X-MSAL-APP-SERVICE-AUTHENTICATION\",\r\n    APP_SERVICE_ACCESS_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ACCESS-TOKEN\",\r\n    APP_SERVICE_ID_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ID-TOKEN\",\r\n    APP_SERVICE_REFRESH_TOKEN_HEADER: \"X-MS-TOKEN-AAD-REFRESH-TOKEN\",\r\n    APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER: \"X-MS-TOKEN-AAD-EXPIRES-ON\",\r\n    APP_SERVICE_USER_OID_HEADER: \"X-MS-CLIENT-PRINCIPAL-ID\",\r\n    APP_SERVICE_USER_UPN_HEADER: \"X-MS-CLIENT-PRINCIPAL-NAME\",\r\n    APP_SERVICE_IDP_X_HEADER: \"X-MS-CLIENT-PRINCIPAL-IDP\",\r\n};\r\n\r\n/**\r\n * Endpoints used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationEndpoints = {\r\n    ID_TOKEN_ENDPOINT: \"/.auth/me\",\r\n    POST_LOGOUT_DEFAULT_ENDPOINT: \"/.auth/logout/done\",\r\n    POST_LOGIN_DEFAULT_ENDPOINT: \"/.auth/login/done\",\r\n    AAD_SIGN_IN_ENDPOINT: \"/.auth/login/aad\",\r\n    AAD_SIGN_OUT_ENDPOINT: \"/.auth/logout\",\r\n    TOKEN_REFRESH_ENDPOINT: \"/.auth/refresh\",\r\n    AAD_REDIRECT_ENDPOINT: \"/.auth/login/aad/callback\",\r\n};\r\n\r\n/**\r\n * Query parameters used by App Service authentication endpoints\r\n */\r\nexport const AppServiceAuthenticationQueryParameters = {\r\n    POST_LOGIN_REDIRECT_QUERY_PARAM: \"?post_login_redirect_url=\",\r\n    POST_LOGOUT_REDIRECT_QUERY_PARAM: \"?post_logout_redirect_uri=\",\r\n};\r\n\r\n/**\r\n * Environment variables used by App Service authentication\r\n */\r\nexport const AppServiceEnvironmentVariables = {\r\n    WEBSITE_AUTH_ENABLED: \"WEBSITE_AUTH_ENABLED\",\r\n    WEBSITE_AUTH_ALLOWED_AUDIENCES: \"WEBSITE_AUTH_ALLOWED_AUDIENCES\",\r\n    WEBSITE_AUTH_DEFAULT_PROVIDER: \"WEBSITE_AUTH_DEFAULT_PROVIDER\",\r\n    WEBSITE_AUTH_TOKEN_STORE: \"WEBSITE_AUTH_TOKEN_STORE\",\r\n    WEBSITE_AUTH_LOGIN_PARAMS: \"WEBSITE_AUTH_LOGIN_PARAMS\",\r\n    WEBSITE_AUTH_PRESERVE_URL_FRAGMENT: \"WEBSITE_AUTH_PRESERVE_URL_FRAGMENT\",\r\n    WEBSITE_AUTH_OPENID_ISSUER: \"WEBSITE_AUTH_OPENID_ISSUER\",\r\n    WEBSITE_AUTH_CLIENT_ID: \"WEBSITE_AUTH_CLIENT_ID\",\r\n    WEBSITE_HOSTNAME: \"WEBSITE_HOSTNAME\",\r\n    WEBSITE_SITE_NAME: \"WEBSITE_SITE_NAME\",\r\n    WEBSITE_AUTH_REQUIRE_HTTPS: \"WEBSITE_AUTH_REQUIRE_HTTPS\",\r\n    WEBSITE_AUTH_UNAUTHENTICATED_ACTION: \"WEBSITE_AUTH_UNAUTHENTICATED_ACTION\",\r\n    WEBSITE_AUTH_API_PREFIX: \"WEBSITE_AUTH_API_PREFIX\",\r\n    MICROSOFT_PROVIDER_AUTHENTICATION_SECRET: \"MICROSOFT_PROVIDER_AUTHENTICATION_SECRET\",\r\n};\r\n\r\n/**\r\n * Constants used in access control scenarios\r\n */\r\nexport const AccessControlConstants = {\r\n    GROUPS: \"groups\",\r\n    ROLES: \"roles\",\r\n    CLAIM_NAMES: \"_claim_name\",\r\n    CLAIM_SOURCES: \"_claim_sources\",\r\n    PAGINATION_LINK: \"@odata.nextLink\",\r\n    GRAPH_MEMBERS_ENDPOINT: \"https://graph.microsoft.com/v1.0/me/memberOf\",\r\n    GRAPH_MEMBER_SCOPES: \"User.Read GroupMember.Read.All\",\r\n};\r\n\r\n/**\r\n * Various information constants\r\n */\r\nexport const InfoMessages = {\r\n    APP_SERVICE_AUTH_DETECTED: \"App Service Authentication detected\",\r\n    REQUEST_FOR_RESOURCE: \"Request made to web API\",\r\n    OVERAGE_OCCURRED: \"User has too many groups. Groups overage claim occurred\",\r\n};\r\n\r\n/**\r\n * Various error constants\r\n */\r\nexport const ErrorMessages = {\r\n    NOT_PERMITTED: \"Not permitted\",\r\n    INVALID_TOKEN: \"Invalid token\",\r\n    CANNOT_DETERMINE_APP_STAGE: \"Cannot determine application stage\",\r\n    CANNOT_VALIDATE_TOKEN: \"Cannot validate token\",\r\n    CSRF_TOKEN_MISMATCH: \"CSRF token in response does not match to original request\",\r\n    INTERACTION_REQUIRED: \"interaction_required\",\r\n    TOKEN_ACQUISITION_FAILED: \"Token acquisition failed\",\r\n    TOKEN_RESPONSE_NULL: \"Token response is null\",\r\n    AUTH_CODE_URL_NOT_OBTAINED: \"Authorization code url cannot be obtained\",\r\n    TOKEN_NOT_FOUND: \"No token found\",\r\n    TOKEN_NOT_DECODED: \"Token cannot be decoded\",\r\n    TOKEN_NOT_VERIFIED: \"Token cannot be verified\",\r\n    KEYS_NOT_OBTAINED: \"Signing keys cannot be obtained\",\r\n    STATE_NOT_FOUND: \"State not found\",\r\n    USER_HAS_NO_ROLE: \"User does not have any roles\",\r\n    USER_NOT_IN_ROLE: \"User does not have this role\",\r\n    USER_HAS_NO_GROUP: \"User does not have any groups\",\r\n    USER_NOT_IN_GROUP: \"User does not have this group\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed for this route\",\r\n    RULE_NOT_FOUND: \"No rule found for this route\",\r\n    SESSION_NOT_FOUND: \"No session found for this request\",\r\n    KEY_VAULT_CONFIG_NOT_FOUND: \"No coordinates found for Key Vault\",\r\n    CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT: \"Cannot obtain credentials from Key Vault\",\r\n    SESSION_KEY_NOT_FOUND: \"No session key found in session. Cannot encrypt state data\",\r\n    AUTH_CODE_REQUEST_OBJECT_NOT_FOUND: \"No auth code request object found in session\",\r\n    ID_TOKEN_CLAIMS_NOT_FOUND: \"No id token claims found in session\",\r\n};\r\n\r\n/**\r\n * Various configuration error constants\r\n */\r\nexport const ConfigurationErrorMessages = {\r\n    AUTH_ROUTES_NOT_CONFIGURED:\r\n        \"Authentication routes are not defined. Ensure that the application settings are configured properly.\",\r\n    NO_PROTECTED_RESOURCE_CONFIGURED:\r\n        \"No protected resource is configured to acquire a token for. Ensure that the application settings are configured properly.\",\r\n    NO_ACCESS_MATRIX_CONFIGURED:\r\n        \"No access matrix is configured to control access for. Ensure that the application settings are configured properly.\",\r\n    NO_CLIENT_ID: \"No clientId provided!\",\r\n    INVALID_CLIENT_ID: \"Invalid clientId!\",\r\n    NO_TENANT_INFO: \"No tenant info provided!\",\r\n    INVALID_TENANT_INFO: \"Invalid tenant info!\",\r\n    NO_CLIENT_CREDENTIAL: \"No client credential provided!\",\r\n    NO_REDIRECT_URI: \"No redirect URI provided!\",\r\n    NO_UNAUTHORIZED_ROUTE: \"No unauthorized route provided!\",\r\n};\r\n\r\n/**\r\n * For more information, visit: https://login.microsoftonline.com/error\r\n */\r\nexport const ErrorCodes = {\r\n    65001: \"AADSTS65001\", // consent required\r\n    50076: \"AADSTS50076\", // mfa required\r\n    50079: \"AADSTS50079\", // mfa enrollment required\r\n    50001: \"AADSTS50001\", // invalid resource uri\r\n    65004: \"AADSTS65004\", // user declined consent\r\n    70011: \"AADSTS70011\", // invalid scope\r\n    700022: \"AADSTS700022\", // multiple resources\r\n    700020: \"AADSTS700020\", // interaction required\r\n    90118: \"AADB2C90118\", // password forgotten (B2C)\r\n};\r\n\r\nexport const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (logLevel, message, containsPii) => {\r\n        if (containsPii) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(message);\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LoggerOptions } from \"@azure/msal-common\";\r\n\r\nexport type AppSettings = {\r\n    appCredentials: AppCredentials;\r\n    loggerOptions?: LoggerOptions;\r\n    b2cPolicies?: Record<string, Policy>;\r\n    accessMatrix?: Record<string, AccessRule>;\r\n};\r\n\r\nexport type WebAppSettings = AppSettings & {\r\n    authRoutes: AuthRoutes;\r\n    protectedResources?: Record<string, Resource>\r\n};\r\n\r\nexport type AppCredentials = {\r\n    instance?: string;\r\n    clientId: string;\r\n    tenantId: string;\r\n    clientSecret?: string;\r\n    clientCertificate?: ClientCertificate;\r\n};\r\n\r\nexport type ClientCertificate = {\r\n    thumbprint: string;\r\n    privateKey: string;\r\n    x5c?: string;\r\n};\r\n\r\nexport type KeyVaultCredential = {\r\n    credentialType: string;\r\n    credentialName: string;\r\n    keyVaultUrl: string;\r\n};\r\n\r\nexport type AuthRoutes = {\r\n    redirect: string;\r\n    unauthorized: string;\r\n    frontChannelLogout?: string;\r\n};\r\n\r\nexport type Policy = {\r\n    authority: string;\r\n};\r\n\r\nexport type Resource = {\r\n    endpoint: string;\r\n    scopes: string[];\r\n    accessToken?: string;\r\n};\r\n\r\nexport type AccessRule = {\r\n    path: string;\r\n    methods: string[];\r\n    roles?: string[];\r\n    groups?: string[];\r\n};\r\n\r\nexport enum AppType {\r\n    WebApp\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport { AADAuthorityConstants, ConfigurationErrorMessages, OIDC_SCOPES } from \"../utils/Constants\";\r\nimport { AppSettings, AppType, Resource, WebAppSettings } from \"./AppSettings\";\r\n\r\nexport class ConfigHelper {\r\n    /**\r\n     * Validates the fields in the configuration file\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @returns {void}\r\n     */\r\n    static validateAppSettings(appSettings: AppSettings, appType: AppType): void {\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_ID);\r\n        } else if (!ConfigHelper.isGuid(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_CLIENT_ID);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.tenantId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_TENANT_INFO);\r\n        } else if (\r\n            !ConfigHelper.isGuid(appSettings.appCredentials.tenantId) &&\r\n            !Object.values(AADAuthorityConstants).includes(appSettings.appCredentials.tenantId)\r\n        ) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_TENANT_INFO);\r\n        }\r\n\r\n        switch (appType) {\r\n            case AppType.WebApp:\r\n                if (StringUtils.isEmpty((<WebAppSettings>appSettings).authRoutes?.redirect)) {\r\n                    throw new Error(ConfigurationErrorMessages.NO_REDIRECT_URI);\r\n                }\r\n\r\n                if (StringUtils.isEmpty((<WebAppSettings>appSettings).authRoutes?.unauthorized)) {\r\n                    throw new Error(ConfigurationErrorMessages.NO_UNAUTHORIZED_ROUTE);\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if a string is GUID\r\n     * @param {string} guid\r\n     * @returns {boolean}\r\n     */\r\n    static isGuid(guid: string): boolean {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n\r\n    /**\r\n     * Util method to get the resource name for a given scope(s)\r\n     * @param {Array} scopes: an array of scopes that the resource is associated with\r\n     * @param {webAppSettings} webAppSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getResourceNameFromScopes(scopes: string[], webAppSettings: WebAppSettings): string {\r\n        const index = Object.values({\r\n            ...webAppSettings.protectedResources,\r\n        }).findIndex((resource: Resource) =>\r\n            JSON.stringify(resource.scopes.sort()) === JSON.stringify(scopes.sort())\r\n        );\r\n\r\n        const resourceName = Object.keys({\r\n            ...webAppSettings.protectedResources,\r\n        })[index];\r\n\r\n        return resourceName;\r\n    }\r\n\r\n    /**\r\n     * Util method to get the scopes for a given resource name\r\n     * @param {string} resourceEndpoint: the resource name\r\n     * @param {webAppSettings} webAppSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getScopesFromResourceEndpoint(resourceEndpoint: string, webAppSettings: WebAppSettings): string[] {\r\n        const scopes = Object.values({\r\n            ...webAppSettings.protectedResources,\r\n        }).find((resource: Resource) => resource.endpoint === resourceEndpoint)?.scopes;\r\n\r\n        return scopes ? scopes : [];\r\n    }\r\n\r\n    /**\r\n     * Util method to strip the default OIDC scopes from the scopes array\r\n     * @param {Array} scopesList full list of scopes for this resource\r\n     * @returns\r\n     */\r\n    static getEffectiveScopes(scopesList: string[]): string[] {\r\n        const effectiveScopesList = scopesList.filter(scope => !OIDC_SCOPES.includes(scope));\r\n        return effectiveScopesList;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICachePlugin } from \"@azure/msal-node\";\r\n\r\nimport { ConfigHelper } from \"../config/ConfigHelper\";\r\nimport { AppSettings, AppType, KeyVaultCredential } from \"../config/AppSettings\";\r\nimport { MsalWebAppAuthClient } from \"./webapp/MsalWebAppAuthClient\";\r\nimport { AppServiceWebAppAuthClient } from \"./webapp/AppServiceWebAppAuthClient\";\r\n\r\nexport abstract class BaseAuthClientBuilder {\r\n    appSettings: AppSettings;\r\n    protected keyVaultCredential: KeyVaultCredential | undefined;\r\n    protected customCachePlugin: ICachePlugin | undefined;\r\n\r\n    protected constructor(appSettings: AppSettings, appType: AppType) {\r\n        ConfigHelper.validateAppSettings(appSettings, appType);\r\n        this.appSettings = appSettings;\r\n    }\r\n\r\n    withKeyVaultCredentials(keyVaultCredential: KeyVaultCredential): BaseAuthClientBuilder {\r\n        this.keyVaultCredential = keyVaultCredential;\r\n        return this;\r\n    }\r\n\r\n    withCustomCachePlugin(cachePlugin: ICachePlugin): BaseAuthClientBuilder {\r\n        this.customCachePlugin = cachePlugin;\r\n        return this;\r\n    }\r\n\r\n    abstract build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient;\r\n\r\n    abstract buildAsync(): Promise<MsalWebAppAuthClient | AppServiceWebAppAuthClient>;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport * as crypto from \"crypto\";\r\n\r\nexport class CryptoUtils {\r\n    private algorithm: string;\r\n\r\n    constructor(algorithm: string = \"aes-192-cbc\") {\r\n        this.algorithm = algorithm;\r\n    }\r\n\r\n    generateSalt(): string {\r\n        return crypto.randomBytes(20).toString(\"hex\");\r\n    }\r\n\r\n    createKey(password: string, salt: string): Buffer {\r\n        return crypto.scryptSync(password, salt, 24);\r\n    }\r\n\r\n    encryptData(stringifiedData: string, key: Buffer): string {\r\n        const iv = crypto.randomBytes(16);\r\n        const cipher = crypto.createCipheriv(this.algorithm, key, iv);\r\n        const encryptedData = cipher.update(stringifiedData, \"utf8\", \"hex\");\r\n\r\n        return [iv.toString(\"hex\"), encryptedData + cipher.final(\"hex\")].join(\".\");\r\n    }\r\n\r\n    decryptData(encryptedData: string, key: Buffer): string {\r\n        const [iv, encrypted] = encryptedData.split(\".\");\r\n        const decipher = crypto.createDecipheriv(this.algorithm, key, Buffer.from(iv, \"hex\"));\r\n        return decipher.update(encrypted, \"hex\", \"utf8\") + decipher.final(\"utf8\");\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const packageName = \"@azure-samples/microsoft-identity-express\";\r\nexport const packageVersion = \"beta\";\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger, LoggerOptions, LogLevel } from \"@azure/msal-common\";\r\nimport { ConfidentialClientApplication, Configuration, CryptoProvider } from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"../config/AppSettings\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { packageName, packageVersion } from \"../packageMetadata\";\r\n\r\nexport abstract class BaseAuthClient {\r\n    appSettings: AppSettings;\r\n\r\n    protected msalConfig: Configuration;\r\n    protected msalClient: ConfidentialClientApplication;\r\n    protected cryptoProvider: CryptoProvider;\r\n    protected cryptoUtils: CryptoUtils;\r\n    protected logger: Logger;\r\n    protected loggerOptions: LoggerOptions;\r\n\r\n    protected constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        this.appSettings = appSettings;\r\n        this.msalConfig = msalConfig;\r\n        this.cryptoProvider = new CryptoProvider();\r\n        this.cryptoUtils = new CryptoUtils();\r\n        this.loggerOptions =\r\n            this.msalConfig.system && this.msalConfig.system.loggerOptions\r\n                ? this.msalConfig.system.loggerOptions\r\n                : {\r\n                    loggerCallback: () => {\r\n                        // allow users to not set loggerCallback\r\n                    },\r\n                    piiLoggingEnabled: false,\r\n                    logLevel: LogLevel.Info,\r\n                };\r\n\r\n        this.logger = new Logger(this.loggerOptions, packageName, packageVersion);\r\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\r\n    }\r\n\r\n    getMsalClient(): ConfidentialClientApplication {\r\n        return this.msalClient;\r\n    }\r\n\r\n    getMsalConfig(): Configuration {\r\n        return this.msalConfig;\r\n    }\r\n\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport { AccessControlConstants, ErrorMessages } from \"../utils/Constants\";\r\n\r\nexport class FetchManager {\r\n    /**\r\n     * Calls a resource endpoint\r\n     * @param {string} endpoint\r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpoint = async (endpoint: string): Promise<AxiosResponse> => {\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calls a resource endpoint with a raw access token\r\n     * using the authorization bearer token scheme\r\n     * @param {string} endpoint\r\n     * @param {string} accessToken\r\n     * @returns {Promise}\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    static callApiEndpointWithToken = async (endpoint: string, accessToken: string): Promise<AxiosResponse<any>> => {\r\n        if (StringUtils.isEmpty(accessToken)) {\r\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND);\r\n        }\r\n\r\n        const options: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n            },\r\n        };\r\n\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint, options);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles queries against Microsoft Graph that return multiple pages of data\r\n     * @param {string} accessToken: access token required by endpoint\r\n     * @param {string} nextPage: next page link\r\n     * @param {Array} data: stores data from each page\r\n     * @returns {Promise}\r\n     */\r\n    static handlePagination = async (accessToken: string, nextPage: string, data: string[] = []): Promise<string[]> => {\r\n        try {\r\n            const graphResponse = await (await FetchManager.callApiEndpointWithToken(nextPage, accessToken)).data;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n            graphResponse[\"value\"].map((v: any) => data.push(v.id));\r\n\r\n            if (graphResponse[AccessControlConstants.PAGINATION_LINK]) {\r\n                return await FetchManager.handlePagination(\r\n                    accessToken,\r\n                    graphResponse[AccessControlConstants.PAGINATION_LINK],\r\n                    data\r\n                );\r\n            } else {\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Request } from \"express\";\r\nimport { IUri, UrlString } from \"@azure/msal-common\";\r\n\r\nexport class UrlUtils {\r\n    /**\r\n     * Gets the absolute URL from a given request and path string\r\n     * @param {Request} req: express request object\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static ensureAbsoluteUrl = (req: Request, url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n\r\n        if (!urlComponents.Protocol) {\r\n            if (!urlComponents.HostNameAndPort && !url.startsWith(\"www\")) {\r\n                if (!url.startsWith(\"/\")) {\r\n                    return req.protocol + \"://\" + req.get(\"host\") + \"/\" + url;\r\n                }\r\n                return req.protocol + \"://\" + req.get(\"host\") + url;\r\n            }\r\n            return req.protocol + \"://\" + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the path segment from a given URL\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static getPathFromUrl = (url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n        return `/${urlComponents.PathSegments.join(\"/\")}`;\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InteractionRequiredAuthError } from \"@azure/msal-common\";\r\n\r\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param error\r\n */\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\r\nexport function IsAnInteractionRequiredAuthError(error: any): boolean {\r\n    return InteractionRequiredAuthError.isInteractionRequiredError(\r\n        error?.errorCode,\r\n        error?.errorMessage,\r\n        error?.subError\r\n    );\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, { RequestHandler, Request, Response, NextFunction, Router } from \"express\";\r\nimport { OIDC_DEFAULT_SCOPES, InteractionRequiredAuthError, StringUtils, ResponseMode } from \"@azure/msal-common\";\r\nimport { AuthorizationCodeRequest, AuthorizationUrlRequest, Configuration, SilentFlowRequest } from \"@azure/msal-node\";\r\nimport { Resource, AppSettings, AccessRule, WebAppSettings } from \"../../config/AppSettings\";\r\nimport { TokenRequestOptions, GuardOptions, SignInOptions, SignOutOptions } from \"../MiddlewareOptions\";\r\nimport { AppStages, ErrorMessages, AccessControlConstants, ConfigurationErrorMessages } from \"../../utils/Constants\";\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { FetchManager } from \"../../network/FetchManager\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { AppState } from \"../../utils/Types\";\r\nimport { IsAnInteractionRequiredAuthError } from \"../../utils/Helpers\";\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in Express web apps\r\n */\r\nexport class MsalWebAppAuthClient extends BaseAuthClient {\r\n\r\n    webAppSettings: WebAppSettings;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n        this.webAppSettings = appSettings as WebAppSettings;\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @returns {Router}\r\n     */\r\n    initialize(): Router {\r\n        const appRouter = express.Router();\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction) => {\r\n            if (!req.session) {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                throw new Error(ErrorMessages.SESSION_NOT_FOUND);\r\n            }\r\n\r\n            next();\r\n        });\r\n\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        if (this.webAppSettings.authRoutes.frontChannelLogout) {\r\n            /**\r\n             * Expose front-channel logout route. For more information, visit:\r\n             * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\r\n             */\r\n            appRouter.get(this.webAppSettings.authRoutes.frontChannelLogout, (req: Request, res: Response) => {\r\n                req.session.destroy(() => {\r\n                    res.sendStatus(200);\r\n                });\r\n            });\r\n        }\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(\r\n        options: SignInOptions = {\r\n            postLoginRedirect: \"/\",\r\n            failureRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const appState = {\r\n                appStage: AppStages.SIGN_IN,\r\n                redirectTo: options.postLoginRedirect,\r\n                csrfToken: req.session.csrfToken,\r\n            } as AppState;\r\n\r\n            const authUrlParams = {\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n            } as AuthorizationUrlRequest;\r\n\r\n            const authCodeParams = {\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n            } as AuthorizationCodeRequest;\r\n\r\n            // get url to sign user in\r\n            return this.redirectToAuthCodeUrl(req, res, next, authUrlParams, authCodeParams, appState);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param {SignOutOptions} options: options to modify logout request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(\r\n        options: SignOutOptions = {\r\n            postLogoutRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return async (req: Request, res: Response): Promise<void> => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n\r\n            /**\r\n             * Construct a logout URI and redirect the user to end the\r\n             * session with Azure AD/B2C. For more information, visit:\r\n             * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\r\n             * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\r\n             */\r\n            const logoutUri = `${this.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\r\n\r\n            const tokenCache = this.msalClient.getTokenCache();\r\n\r\n            const account =\r\n                req.session.account?.homeAccountId && await tokenCache.getAccountByHomeId(req.session.account.homeAccountId)\r\n                ||\r\n                req.session.account?.localAccountId && await tokenCache.getAccountByLocalId(req.session.account.localAccountId);\r\n\r\n            if (account) {\r\n                await tokenCache.removeAccount(account);\r\n            }\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!req.session.key) {\r\n                this.logger.error(ErrorMessages.SESSION_KEY_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.SESSION_KEY_NOT_FOUND));\r\n            }\r\n\r\n            if (!req.session.authorizationCodeRequest) {\r\n                this.logger.error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND));\r\n            }\r\n\r\n            if (req.body.state) {\r\n                const state: AppState = JSON.parse(\r\n                    this.cryptoUtils.decryptData(\r\n                        this.cryptoProvider.base64Decode(req.body.state as string),\r\n                        Buffer.from(req.session.key, \"hex\")\r\n                    )\r\n                );\r\n\r\n                // check if csrfToken matches\r\n                if (state.csrfToken === req.session.csrfToken) {\r\n                    switch (state.appStage) {\r\n                        case AppStages.SIGN_IN: {\r\n                            // token request should have auth code\r\n                            req.session.authorizationCodeRequest.code = req.body.code as string;\r\n\r\n                            try {\r\n                                // exchange auth code for tokens\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(\r\n                                    req.session.authorizationCodeRequest\r\n                                );\r\n\r\n                                if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n                                req.session.isAuthenticated = true;\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                req.session.account = tokenResponse.account!; // this won't be null in any web app scenario\r\n                                res.redirect(state.redirectTo);\r\n                            } catch (error) {\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        case AppStages.ACQUIRE_TOKEN: {\r\n                            // get the name of the resource associated with scope\r\n                            const resourceName = ConfigHelper.getResourceNameFromScopes(\r\n                                req.session.authorizationCodeRequest.scopes,\r\n                                this.webAppSettings\r\n                            );\r\n\r\n                            req.session.authorizationCodeRequest.code = req.body.code as string;\r\n\r\n                            try {\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(\r\n                                    req.session.authorizationCodeRequest\r\n                                );\r\n\r\n                                if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n                                req.session.protectedResources = {\r\n                                    [resourceName]: {\r\n                                        accessToken: tokenResponse.accessToken,\r\n                                    } as Resource,\r\n                                };\r\n\r\n                                res.redirect(state.redirectTo);\r\n                            } catch (error) {\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                            next(new Error(ErrorMessages.CANNOT_DETERMINE_APP_STAGE));\r\n                            break;\r\n                    }\r\n                } else {\r\n                    res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                }\r\n            } else {\r\n                res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens via acquireToken*\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!this.webAppSettings.protectedResources) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED));\r\n            }\r\n\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(scopes, this.webAppSettings);\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.webAppSettings.protectedResources[resourceName],\r\n                    accessToken: undefined,\r\n                } as Resource,\r\n            };\r\n\r\n            try {\r\n                const silentRequest = {\r\n                    account: req.session.account,\r\n                    scopes: scopes,\r\n                } as SilentFlowRequest;\r\n\r\n                // acquire token silently to be used in resource call\r\n                const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n                if (!tokenResponse || StringUtils.isEmpty(tokenResponse.accessToken)) {\r\n                    /*\r\n                     * In B2C scenarios, sometimes an access token is returned empty.\r\n                     * In that case, we will acquire token interactively instead.\r\n                     */\r\n\r\n                    throw new InteractionRequiredAuthError(ErrorMessages.INTERACTION_REQUIRED);\r\n                }\r\n\r\n                req.session.protectedResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                // in case there are no cached tokens, initiate an interactive call\r\n                if (error instanceof InteractionRequiredAuthError || IsAnInteractionRequiredAuthError(error)) {\r\n                    const appState = {\r\n                        appStage: AppStages.ACQUIRE_TOKEN,\r\n                        redirectTo: req.originalUrl,\r\n                    } as AppState;\r\n\r\n                    const authUrlParams = {\r\n                        scopes: scopes,\r\n                    } as AuthorizationUrlRequest;\r\n\r\n                    const authCodeParams = {\r\n                        scopes: scopes,\r\n                    } as AuthorizationCodeRequest;\r\n\r\n                    // initiate the first leg of auth code grant to get token\r\n                    return this.redirectToAuthCodeUrl(req, res, next, authUrlParams, authCodeParams, appState);\r\n                } else {\r\n                    next(error);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session.isAuthenticated) {\r\n                return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n\r\n            next();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the user has access for this route, defined in access matrix\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    hasAccess(options: GuardOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!this.webAppSettings.accessMatrix) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED));\r\n            }\r\n\r\n            if (!req.session.account?.idTokenClaims) {\r\n                this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND));\r\n            }\r\n\r\n            const checkFor = options.accessRule.hasOwnProperty(AccessControlConstants.GROUPS)\r\n                ? AccessControlConstants.GROUPS\r\n                : AccessControlConstants.ROLES;\r\n\r\n            switch (checkFor) {\r\n                case AccessControlConstants.GROUPS:\r\n                    if (!req.session.account.idTokenClaims[AccessControlConstants.GROUPS]) {\r\n                        if (\r\n                            req.session.account.idTokenClaims[AccessControlConstants.CLAIM_NAMES] ||\r\n                            req.session.account.idTokenClaims[AccessControlConstants.CLAIM_SOURCES]\r\n                        ) {\r\n                            return await this.handleOverage(req, res, next, options.accessRule);\r\n                        } else {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    } else {\r\n                        const groups = req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[];\r\n\r\n                        if (\r\n                            !this.checkAccessRule(req.method, options.accessRule, groups, AccessControlConstants.GROUPS)\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    }\r\n\r\n                    next();\r\n                    break;\r\n\r\n                case AccessControlConstants.ROLES:\r\n                    if (!req.session.account.idTokenClaims[AccessControlConstants.ROLES]) {\r\n                        return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        const roles = req.session.account.idTokenClaims[AccessControlConstants.ROLES] as string[];\r\n\r\n                        if (\r\n                            !this.checkAccessRule(req.method, options.accessRule, roles, AccessControlConstants.ROLES)\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    }\r\n\r\n                    next();\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n\r\n    // ============== UTILS ===============\r\n\r\n    /**\r\n     * This method is used to generate an auth code url request\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AuthCodeParams} params: modifies auth code url request\r\n     * @returns {Promise}\r\n     */\r\n    private async redirectToAuthCodeUrl(\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction,\r\n        authUrlParams: AuthorizationUrlRequest,\r\n        authCodeParams: AuthorizationCodeRequest,\r\n        appState: AppState\r\n    ): Promise<void> {\r\n        // add session csrfToken for crsf\r\n        req.session.csrfToken = this.cryptoProvider.createNewGuid();\r\n\r\n        const key = this.cryptoUtils.createKey(req.session.csrfToken, this.cryptoUtils.generateSalt());\r\n        req.session.key = key.toString(\"hex\");\r\n\r\n        const state = JSON.stringify({\r\n            ...appState,\r\n            csrfToken: req.session.csrfToken,\r\n        });\r\n\r\n        // prepare the request\r\n        req.session.authorizationUrlRequest = {\r\n            ...authUrlParams,\r\n            state: this.cryptoProvider.base64Encode(this.cryptoUtils.encryptData(state, key)),\r\n            redirectUri: UrlUtils.ensureAbsoluteUrl(req, this.webAppSettings.authRoutes.redirect),\r\n            responseMode: ResponseMode.FORM_POST\r\n        };\r\n\r\n        req.session.authorizationCodeRequest = {\r\n            ...authCodeParams,\r\n            redirectUri: UrlUtils.ensureAbsoluteUrl(req, this.webAppSettings.authRoutes.redirect),\r\n            code: \"\"\r\n        };\r\n\r\n        // request an authorization code to exchange for tokens\r\n        try {\r\n            const response = await this.msalClient.getAuthCodeUrl(req.session.authorizationUrlRequest);\r\n            res.redirect(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles group overage claims by querying MS Graph /memberOf endpoint\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AccessRule} rule: a given access rule\r\n     * @returns {Promise}\r\n     */\r\n    private async handleOverage(req: Request, res: Response, next: NextFunction, rule: AccessRule): Promise<void> {\r\n        if (!req.session.account?.idTokenClaims) {\r\n            this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\r\n            return next(new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND));\r\n        }\r\n\r\n        const { ...newIdTokenClaims } = req.session.account.idTokenClaims;\r\n\r\n        const silentRequest: SilentFlowRequest = {\r\n            account: req.session.account,\r\n            scopes: AccessControlConstants.GRAPH_MEMBER_SCOPES.split(\" \"),\r\n        };\r\n\r\n        try {\r\n            // acquire token silently to be used in resource call\r\n            const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n            if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n            try {\r\n                const graphResponse = await FetchManager.callApiEndpointWithToken(\r\n                    AccessControlConstants.GRAPH_MEMBERS_ENDPOINT,\r\n                    tokenResponse.accessToken\r\n                );\r\n\r\n                /**\r\n                 * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging\r\n                 * or due to the use of the $top query parameter to specifically limit the page size in a request.\r\n                 * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in\r\n                 * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\r\n                 */\r\n                if (graphResponse.data[AccessControlConstants.PAGINATION_LINK]) {\r\n                    try {\r\n                        const userGroups = await FetchManager.handlePagination(\r\n                            tokenResponse.accessToken,\r\n                            graphResponse.data[AccessControlConstants.PAGINATION_LINK]\r\n                        );\r\n\r\n                        req.session.account.idTokenClaims = {\r\n                            ...newIdTokenClaims,\r\n                            groups: userGroups,\r\n                        };\r\n\r\n                        if (\r\n                            !this.checkAccessRule(\r\n                                req.method,\r\n                                rule,\r\n                                req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[],\r\n                                AccessControlConstants.GROUPS\r\n                            )\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            return next();\r\n                        }\r\n                    } catch (error) {\r\n                        next(error);\r\n                    }\r\n                } else {\r\n                    req.session.account.idTokenClaims = {\r\n                        ...newIdTokenClaims,\r\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                        groups: graphResponse.data[\"value\"].map((v: any) => v.id),\r\n                    };\r\n\r\n                    if (\r\n                        !this.checkAccessRule(\r\n                            req.method,\r\n                            rule,\r\n                            req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[],\r\n                            AccessControlConstants.GROUPS\r\n                        )\r\n                    ) {\r\n                        return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        } catch (error) {\r\n            // TODO: handle silent token acquisition error\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the request passes a given access rule\r\n     * @param {string} method: HTTP method for this route\r\n     * @param {AccessRule} rule: access rule for this route\r\n     * @param {Array} creds: user's credentials i.e. roles or groups\r\n     * @param {string} credType: roles or groups\r\n     * @returns {boolean}\r\n     */\r\n    private checkAccessRule(method: string, rule: AccessRule, creds: string[], credType: string): boolean {\r\n        if (rule.methods.includes(method)) {\r\n            switch (credType) {\r\n                case AccessControlConstants.GROUPS:\r\n                    if (!rule.groups || rule.groups.filter(elem => creds.includes(elem)).length < 1) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case AccessControlConstants.ROLES:\r\n                    if (!rule.roles || rule.roles.filter(elem => creds.includes(elem)).length < 1) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, { Router, RequestHandler, Request, Response, NextFunction } from \"express\";\r\nimport { AccountInfo, AuthToken } from \"@azure/msal-common\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { AccessTokenClaims, IdTokenClaims } from \"../../utils/Types\";\r\nimport { AppSettings, Resource, WebAppSettings } from \"../../config/AppSettings\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { SignInOptions, SignOutOptions, TokenRequestOptions } from \"../MiddlewareOptions\";\r\nimport {\r\n    AppServiceAuthenticationHeaders,\r\n    AppServiceEnvironmentVariables,\r\n    AppServiceAuthenticationEndpoints,\r\n    AppServiceAuthenticationQueryParameters,\r\n    ErrorMessages,\r\n    ConfigurationErrorMessages,\r\n} from \"../../utils/Constants\";\r\n\r\nexport class AppServiceWebAppAuthClient extends BaseAuthClient {\r\n\r\n    webAppSettings: WebAppSettings;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n        this.webAppSettings = appSettings as WebAppSettings;\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(): Router {\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session) {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                throw new Error(ErrorMessages.SESSION_NOT_FOUND);\r\n            }\r\n\r\n            if (!req.session.isAuthenticated) {\r\n                // check headers for id token\r\n                const rawIdToken = req.headers[\r\n                    AppServiceAuthenticationHeaders.APP_SERVICE_ID_TOKEN_HEADER.toLowerCase()\r\n                ] as string;\r\n\r\n                if (rawIdToken) {\r\n                    // parse the id token\r\n                    const idTokenClaims: IdTokenClaims = AuthToken.extractTokenClaims(rawIdToken, this.cryptoProvider);\r\n\r\n                    req.session.isAuthenticated = true;\r\n\r\n                    req.session.account = {\r\n                        tenantId: idTokenClaims.tid,\r\n                        homeAccountId: idTokenClaims.oid + \".\" + idTokenClaims.tid,\r\n                        localAccountId: idTokenClaims.oid,\r\n                        environment: idTokenClaims.iss?.split(\"://\")[1].split(\"/\")[0],\r\n                        username: idTokenClaims.preferred_username,\r\n                        name: idTokenClaims.name,\r\n                        idTokenClaims: idTokenClaims,\r\n                    } as AccountInfo;\r\n                }\r\n            }\r\n\r\n            next();\r\n        });\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(\r\n        options: SignInOptions = {\r\n            postLoginRedirect: \"/\",\r\n            failureRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response): void => {\r\n            const postLoginRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLoginRedirect);\r\n            const loginUri =\r\n                \"https://\" +\r\n                process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\r\n                AppServiceAuthenticationEndpoints.AAD_SIGN_IN_ENDPOINT +\r\n                AppServiceAuthenticationQueryParameters.POST_LOGIN_REDIRECT_QUERY_PARAM +\r\n                postLoginRedirectUri;\r\n            res.redirect(loginUri);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param {SignOutOptions} options: options to modify logout request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(\r\n        options: SignOutOptions = {\r\n            postLogoutRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response): void => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n            const logoutUri =\r\n                \"https://\" +\r\n                process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\r\n                AppServiceAuthenticationEndpoints.AAD_SIGN_OUT_ENDPOINT +\r\n                AppServiceAuthenticationQueryParameters.POST_LOGOUT_REDIRECT_QUERY_PARAM +\r\n                postLogoutRedirectUri;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            next();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            if (!this.webAppSettings.protectedResources) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED));\r\n            }\r\n\r\n            // get scopes for token request\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(options.resource.scopes, this.webAppSettings);\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.webAppSettings.protectedResources[resourceName],\r\n                    accessToken: undefined,\r\n                } as Resource,\r\n            };\r\n\r\n            const rawAccessToken = req.headers[\r\n                AppServiceAuthenticationHeaders.APP_SERVICE_ACCESS_TOKEN_HEADER.toLowerCase()\r\n            ] as string;\r\n\r\n            if (rawAccessToken) {\r\n                const accessTokenClaims = AuthToken.extractTokenClaims(\r\n                    rawAccessToken,\r\n                    this.cryptoProvider\r\n                ) as AccessTokenClaims;\r\n\r\n                // get the name of the resource associated with scope\r\n                const scopes = accessTokenClaims?.scp.split(\" \");\r\n                const effectiveScopes = ConfigHelper.getEffectiveScopes(scopes);\r\n\r\n                if (options.resource.scopes.every(elem => effectiveScopes.includes(elem))) {\r\n                    req.session.protectedResources[resourceName].accessToken = rawAccessToken;\r\n                    return next();\r\n                } else {\r\n                    return next(new Error(\"No tokens found for given scopes\"));\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session.isAuthenticated) {\r\n                return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n\r\n            next();\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { CertificateClient, KeyVaultCertificate } from \"@azure/keyvault-certificates\";\r\nimport { KeyVaultSecret, SecretClient } from \"@azure/keyvault-secrets\";\r\n\r\nimport { KeyVaultCredential, ClientCertificate } from \"../config/AppSettings\";\r\nimport { KeyVaultCredentialTypes } from \"../utils/Constants\";\r\n\r\nexport type KeyVaultCredentialResponse = {\r\n    type: KeyVaultCredentialTypes.SECRET | KeyVaultCredentialTypes.CERTIFICATE;\r\n    value: string & ClientCertificate;\r\n};\r\n\r\nexport class KeyVaultManager {\r\n    /**\r\n     * Fetches credentials from Key Vault and updates appSettings\r\n     * @param {AppSettings} appSettings\r\n     * @returns {Promise}\r\n     */\r\n    async getCredentialFromKeyVault(keyVaultCredential: KeyVaultCredential): Promise<KeyVaultCredentialResponse> {\r\n        const credential = new DefaultAzureCredential();\r\n        let response: KeyVaultCredentialResponse = {} as KeyVaultCredentialResponse;\r\n\r\n        switch (keyVaultCredential.credentialType) {\r\n            case KeyVaultCredentialTypes.SECRET: {\r\n                try {\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    response = {\r\n                        type: KeyVaultCredentialTypes.SECRET,\r\n                        value: secretResponse.value,\r\n                    } as KeyVaultCredentialResponse;\r\n                } catch (error) {\r\n                    throw error;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case KeyVaultCredentialTypes.CERTIFICATE: {\r\n                try {\r\n                    const certificateResponse = await this.getCertificateCredential(keyVaultCredential, credential);\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    response = {\r\n                        type: KeyVaultCredentialTypes.CERTIFICATE,\r\n                        value: {\r\n                            thumbprint: certificateResponse?.properties?.x509Thumbprint?.toString(),\r\n                            privateKey: secretResponse?.value?.split(\"-----BEGIN CERTIFICATE-----\\n\")[0],\r\n                        },\r\n                    } as KeyVaultCredentialResponse;\r\n                } catch (error) {\r\n                    throw error;\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Gets a certificate credential from Key Vault\r\n     * @param {AppSettings} config\r\n     * @param {DefaultAzureCredential} credential\r\n     * @returns {Promise}\r\n     */\r\n    async getCertificateCredential(\r\n        keyVaultCredential: KeyVaultCredential,\r\n        credential: DefaultAzureCredential\r\n    ): Promise<KeyVaultCertificate> {\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new CertificateClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultCertificate = await secretClient.getCertificate(keyVaultCredential.credentialName);\r\n            return keyVaultCertificate;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a secret credential from Key Vault\r\n     * @param {AppSettings} config\r\n     * @param {DefaultAzureCredential} credential\r\n     * @returns {Promise}\r\n     */\r\n    async getSecretCredential(\r\n        keyVaultCredential: KeyVaultCredential,\r\n        credential: DefaultAzureCredential\r\n    ): Promise<KeyVaultSecret> {\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new SecretClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultSecret = await secretClient.getSecret(keyVaultCredential.credentialName);\r\n            return keyVaultSecret;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, Constants } from \"@azure/msal-common\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { DEFAULT_LOGGER_OPTIONS } from \"../utils/Constants\";\r\nimport { AppSettings } from \"./AppSettings\";\r\n\r\nexport class MsalConfiguration {\r\n    /**\r\n     * Maps the custom configuration object to configuration\r\n     * object expected by MSAL Node ConfidentialClientApplication class\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @param {ICachePlugin} cachePlugin: custom cache plugin\r\n     * @param {IDistributedPersistence} distributedPersistence: distributed persistence client\r\n     * @returns {Configuration}\r\n     */\r\n    static getMsalConfiguration(appSettings: AppSettings): Configuration {\r\n        return {\r\n            auth: {\r\n                clientId: appSettings.appCredentials.clientId,\r\n                authority: appSettings.b2cPolicies\r\n                    ? Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"] // the first policy/user-flow is the default authority\r\n                    : appSettings.appCredentials.instance\r\n                        ? `https://${appSettings.appCredentials.instance}/${appSettings.appCredentials.tenantId}`\r\n                        : `https://${Constants.DEFAULT_AUTHORITY_HOST}/${appSettings.appCredentials.tenantId}`,\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientSecret\") && {\r\n                    clientSecret: appSettings.appCredentials.clientSecret,\r\n                }),\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientCertificate\") && {\r\n                    clientCertificate: appSettings.appCredentials.clientCertificate,\r\n                }),\r\n                knownAuthorities: appSettings.b2cPolicies\r\n                    ? [UrlString.getDomainFromUrl(Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"])] // in B2C scenarios\r\n                    : [],\r\n            },\r\n            system: {\r\n                loggerOptions: appSettings.loggerOptions ? appSettings.loggerOptions : DEFAULT_LOGGER_OPTIONS,\r\n            },\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AppServiceEnvironmentVariables } from \"./Constants\";\r\n\r\nexport class EnvironmentUtils {\r\n    static isProduction(): boolean {\r\n        return process.env.NODE_ENV === \"production\";\r\n    }\r\n\r\n    static isDevelopment(): boolean {\r\n        return process.env.NODE_ENV === \"development\";\r\n    }\r\n\r\n    static isAppServiceAuthEnabled(): boolean {\r\n        return process.env[AppServiceEnvironmentVariables.WEBSITE_AUTH_ENABLED] === \"True\";\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClientBuilder } from \"../BaseAuthClientBuilder\";\r\nimport { MsalWebAppAuthClient } from \"./MsalWebAppAuthClient\";\r\nimport { AppServiceWebAppAuthClient } from \"./AppServiceWebAppAuthClient\";\r\nimport { KeyVaultManager } from \"../../network/KeyVaultManager\";\r\nimport { MsalConfiguration } from \"../../config/MsalConfiguration\";\r\nimport { AppSettings, AppType } from \"../../config/AppSettings\";\r\nimport { EnvironmentUtils } from \"../../utils/EnvironmentUtils\";\r\nimport { ErrorMessages } from \"../../utils/Constants\";\r\n\r\nexport class WebAppAuthClientBuilder extends BaseAuthClientBuilder {\r\n    appSettings!: AppSettings;\r\n    private msalConfig!: Configuration;\r\n\r\n    constructor(appSettings: AppSettings) {\r\n        super(appSettings, AppType.WebApp);\r\n    }\r\n\r\n    build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient {\r\n        // TODO: throw error if key vault credential is being built\r\n\r\n        this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n\r\n        if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n            return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        } else {\r\n            return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        }\r\n    }\r\n\r\n    async buildAsync(): Promise<MsalWebAppAuthClient | AppServiceWebAppAuthClient> {\r\n        try {\r\n            if (this.keyVaultCredential) {\r\n                const keyVaultManager = new KeyVaultManager();\r\n                const credential = await keyVaultManager.getCredentialFromKeyVault(this.keyVaultCredential);\r\n                this.appSettings.appCredentials[credential.type] = credential.value;\r\n            }\r\n\r\n            this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n\r\n            if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n                return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            } else {\r\n                return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(ErrorMessages.CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT);\r\n        }\r\n    }\r\n}\r\n"],"names":["AppStages","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","KeyVaultCredentialTypes","OIDC_SCOPES","AppServiceAuthenticationHeaders","APP_SERVICE_AUTHENTICATION_HEADER","APP_SERVICE_ACCESS_TOKEN_HEADER","APP_SERVICE_ID_TOKEN_HEADER","APP_SERVICE_REFRESH_TOKEN_HEADER","APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER","APP_SERVICE_USER_OID_HEADER","APP_SERVICE_USER_UPN_HEADER","APP_SERVICE_IDP_X_HEADER","AppServiceAuthenticationEndpoints","ID_TOKEN_ENDPOINT","POST_LOGOUT_DEFAULT_ENDPOINT","POST_LOGIN_DEFAULT_ENDPOINT","AAD_SIGN_IN_ENDPOINT","AAD_SIGN_OUT_ENDPOINT","TOKEN_REFRESH_ENDPOINT","AAD_REDIRECT_ENDPOINT","AppServiceAuthenticationQueryParameters","POST_LOGIN_REDIRECT_QUERY_PARAM","POST_LOGOUT_REDIRECT_QUERY_PARAM","AppServiceEnvironmentVariables","WEBSITE_AUTH_ENABLED","WEBSITE_AUTH_ALLOWED_AUDIENCES","WEBSITE_AUTH_DEFAULT_PROVIDER","WEBSITE_AUTH_TOKEN_STORE","WEBSITE_AUTH_LOGIN_PARAMS","WEBSITE_AUTH_PRESERVE_URL_FRAGMENT","WEBSITE_AUTH_OPENID_ISSUER","WEBSITE_AUTH_CLIENT_ID","WEBSITE_HOSTNAME","WEBSITE_SITE_NAME","WEBSITE_AUTH_REQUIRE_HTTPS","WEBSITE_AUTH_UNAUTHENTICATED_ACTION","WEBSITE_AUTH_API_PREFIX","MICROSOFT_PROVIDER_AUTHENTICATION_SECRET","AccessControlConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","ErrorMessages","NOT_PERMITTED","INVALID_TOKEN","CANNOT_DETERMINE_APP_STAGE","CANNOT_VALIDATE_TOKEN","CSRF_TOKEN_MISMATCH","INTERACTION_REQUIRED","TOKEN_ACQUISITION_FAILED","TOKEN_RESPONSE_NULL","AUTH_CODE_URL_NOT_OBTAINED","TOKEN_NOT_FOUND","TOKEN_NOT_DECODED","TOKEN_NOT_VERIFIED","KEYS_NOT_OBTAINED","STATE_NOT_FOUND","USER_HAS_NO_ROLE","USER_NOT_IN_ROLE","USER_HAS_NO_GROUP","USER_NOT_IN_GROUP","METHOD_NOT_ALLOWED","RULE_NOT_FOUND","SESSION_NOT_FOUND","KEY_VAULT_CONFIG_NOT_FOUND","CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT","SESSION_KEY_NOT_FOUND","AUTH_CODE_REQUEST_OBJECT_NOT_FOUND","ID_TOKEN_CLAIMS_NOT_FOUND","ConfigurationErrorMessages","AUTH_ROUTES_NOT_CONFIGURED","NO_PROTECTED_RESOURCE_CONFIGURED","NO_ACCESS_MATRIX_CONFIGURED","NO_CLIENT_ID","INVALID_CLIENT_ID","NO_TENANT_INFO","INVALID_TENANT_INFO","NO_CLIENT_CREDENTIAL","NO_REDIRECT_URI","NO_UNAUTHORIZED_ROUTE","DEFAULT_LOGGER_OPTIONS","loggerCallback","logLevel","message","containsPii","console","info","piiLoggingEnabled","LogLevel","Info","AppType","ConfigHelper","validateAppSettings","appSettings","appType","StringUtils","isEmpty","appCredentials","clientId","Error","isGuid","tenantId","Object","values","includes","WebApp","_appSettings$authRout","authRoutes","redirect","_appSettings$authRout2","unauthorized","guid","regexGuid","test","getResourceNameFromScopes","scopes","webAppSettings","index","_extends","protectedResources","findIndex","resource","JSON","stringify","sort","resourceName","keys","getScopesFromResourceEndpoint","resourceEndpoint","_Object$values$find","find","endpoint","getEffectiveScopes","scopesList","effectiveScopesList","filter","scope","BaseAuthClientBuilder","_proto","prototype","withKeyVaultCredentials","keyVaultCredential","withCustomCachePlugin","cachePlugin","customCachePlugin","CryptoUtils","algorithm","generateSalt","crypto","toString","createKey","password","salt","encryptData","stringifiedData","key","iv","cipher","encryptedData","update","join","decryptData","_encryptedData$split","split","encrypted","decipher","Buffer","from","packageName","packageVersion","BaseAuthClient","msalConfig","cryptoProvider","CryptoProvider","cryptoUtils","loggerOptions","system","logger","Logger","msalClient","ConfidentialClientApplication","getMsalClient","getMsalConfig","getLogger","FetchManager","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","axios","get","sent","abrupt","data","t0","stop","_x","apply","arguments","_ref2","_callee2","accessToken","options","_callee2$","_context2","headers","Authorization","_x2","_x3","_ref3","_callee3","nextPage","_context3","callApiEndpointWithToken","graphResponse","map","v","push","id","handlePagination","_x4","_x5","_x6","UrlUtils","req","url","urlComponents","UrlString","getUrlComponents","Protocol","HostNameAndPort","startsWith","protocol","PathSegments","IsAnInteractionRequiredAuthError","error","InteractionRequiredAuthError","isInteractionRequiredError","errorCode","errorMessage","subError","MsalWebAppAuthClient","_BaseAuthClient","_inheritsLoose","_this","call","initialize","appRouter","express","Router","use","res","session","_this2","post","getPathFromUrl","handleRedirect","frontChannelLogout","destroy","sendStatus","signIn","postLoginRedirect","failureRedirect","appState","appStage","SIGN_IN","redirectTo","csrfToken","authUrlParams","OIDC_DEFAULT_SCOPES","authCodeParams","_this3","redirectToAuthCodeUrl","signOut","postLogoutRedirect","_req$session$account","_req$session$account2","postLogoutRedirectUri","logoutUri","tokenCache","account","ensureAbsoluteUrl","_this4","auth","authority","getTokenCache","t1","homeAccountId","getAccountByHomeId","t2","localAccountId","getAccountByLocalId","removeAccount","state","tokenResponse","_req$session$protecte","_tokenResponse","_this5","authorizationCodeRequest","body","parse","base64Decode","ACQUIRE_TOKEN","code","acquireTokenByCode","isAuthenticated","getToken","_req$session$protecte2","silentRequest","_callee3$","_this6","undefined","acquireTokenSilent","originalUrl","_x7","_x8","_this7","hasAccess","_ref4","_callee4","_req$session$account3","checkFor","groups","roles","_callee4$","_context4","_this8","accessMatrix","idTokenClaims","accessRule","hasOwnProperty","handleOverage","checkAccessRule","method","_x9","_x10","_x11","_redirectToAuthCodeUrl","_callee5","_callee5$","_context5","createNewGuid","authorizationUrlRequest","base64Encode","redirectUri","responseMode","ResponseMode","FORM_POST","getAuthCodeUrl","_x12","_x13","_x14","_x15","_x16","_x17","_handleOverage","_callee6","rule","_req$session$account4","newIdTokenClaims","userGroups","_callee6$","_context6","_objectDestructuringEmpty","_x18","_x19","_x20","_x21","creds","credType","methods","elem","length","AppServiceWebAppAuthClient","rawIdToken","toLowerCase","_idTokenClaims$iss","AuthToken","extractTokenClaims","tid","oid","environment","iss","username","preferred_username","name","postLoginRedirectUri","loginUri","process","env","rawAccessToken","accessTokenClaims","effectiveScopes","scp","every","KeyVaultManager","getCredentialFromKeyVault","_getCredentialFromKeyVault","credential","secretResponse","_certificateResponse$","_certificateResponse$2","_secretResponse$value","certificateResponse","_secretResponse","DefaultAzureCredential","credentialType","SECRET","CERTIFICATE","getSecretCredential","type","value","getCertificateCredential","thumbprint","properties","x509Thumbprint","privateKey","_getCertificateCredential","secretClient","keyVaultCertificate","CertificateClient","keyVaultUrl","getCertificate","credentialName","_getSecretCredential","keyVaultSecret","SecretClient","getSecret","MsalConfiguration","getMsalConfiguration","b2cPolicies","entries","instance","Constants","DEFAULT_AUTHORITY_HOST","clientSecret","clientCertificate","knownAuthorities","getDomainFromUrl","EnvironmentUtils","isProduction","isDevelopment","isAppServiceAuthEnabled","WebAppAuthClientBuilder","_BaseAuthClientBuilde","build","buildAsync","_buildAsync","keyVaultManager"],"mappings":"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"}