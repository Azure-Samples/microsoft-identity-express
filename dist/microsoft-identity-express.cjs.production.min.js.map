{"version":3,"file":"microsoft-identity-express.cjs.production.min.js","sources":["../src/utils/Constants.ts","../src/config/AppSettings.ts","../src/config/ConfigHelper.ts","../src/client/BaseAuthClientBuilder.ts","../src/utils/CryptoUtils.ts","../src/client/BaseAuthClient.ts","../src/packageMetadata.ts","../src/network/FetchManager.ts","../src/utils/UrlUtils.ts","../src/client/webapp/MsalWebAppAuthClient.ts","../src/utils/Helpers.ts","../src/client/webapp/AppServiceWebAppAuthClient.ts","../src/network/KeyVaultManager.ts","../src/config/MsalConfiguration.ts","../src/utils/EnvironmentUtils.ts","../src/client/webapp/WebAppAuthClientBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LoggerOptions, LogLevel } from \"@azure/msal-common\";\r\n\r\n/**\r\n * Basic authentication stages used to determine\r\n * appropriate action after redirect occurs\r\n */\r\nexport enum AppStages {\r\n    SIGN_IN = \"sign_in\",\r\n    SIGN_OUT = \"sign_out\",\r\n    ACQUIRE_TOKEN = \"acquire_token\",\r\n}\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n\r\n/**\r\n * String constants related credential type\r\n */\r\nexport enum KeyVaultCredentialTypes {\r\n    SECRET = \"clientSecret\",\r\n    CERTIFICATE = \"clientCertificate\",\r\n}\r\n\r\nexport const OIDC_SCOPES = [\"openid\", \"profile\", \"email\", \"offline_access\"];\r\n\r\n/**\r\n * Request headers used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationHeaders = {\r\n    APP_SERVICE_AUTHENTICATION_HEADER: \"X-MSAL-APP-SERVICE-AUTHENTICATION\",\r\n    APP_SERVICE_ACCESS_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ACCESS-TOKEN\",\r\n    APP_SERVICE_ID_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ID-TOKEN\",\r\n    APP_SERVICE_REFRESH_TOKEN_HEADER: \"X-MS-TOKEN-AAD-REFRESH-TOKEN\",\r\n    APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER: \"X-MS-TOKEN-AAD-EXPIRES-ON\",\r\n    APP_SERVICE_USER_OID_HEADER: \"X-MS-CLIENT-PRINCIPAL-ID\",\r\n    APP_SERVICE_USER_UPN_HEADER: \"X-MS-CLIENT-PRINCIPAL-NAME\",\r\n    APP_SERVICE_IDP_X_HEADER: \"X-MS-CLIENT-PRINCIPAL-IDP\",\r\n};\r\n\r\n/**\r\n * Endpoints used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationEndpoints = {\r\n    ID_TOKEN_ENDPOINT: \"/.auth/me\",\r\n    POST_LOGOUT_DEFAULT_ENDPOINT: \"/.auth/logout/done\",\r\n    POST_LOGIN_DEFAULT_ENDPOINT: \"/.auth/login/done\",\r\n    AAD_SIGN_IN_ENDPOINT: \"/.auth/login/aad\",\r\n    AAD_SIGN_OUT_ENDPOINT: \"/.auth/logout\",\r\n    TOKEN_REFRESH_ENDPOINT: \"/.auth/refresh\",\r\n    AAD_REDIRECT_ENDPOINT: \"/.auth/login/aad/callback\",\r\n};\r\n\r\n/**\r\n * Query parameters used by App Service authentication endpoints\r\n */\r\nexport const AppServiceAuthenticationQueryParameters = {\r\n    POST_LOGIN_REDIRECT_QUERY_PARAM: \"?post_login_redirect_url=\",\r\n    POST_LOGOUT_REDIRECT_QUERY_PARAM: \"?post_logout_redirect_uri=\",\r\n};\r\n\r\n/**\r\n * Environment variables used by App Service authentication\r\n */\r\nexport const AppServiceEnvironmentVariables = {\r\n    WEBSITE_AUTH_ENABLED: \"WEBSITE_AUTH_ENABLED\",\r\n    WEBSITE_AUTH_ALLOWED_AUDIENCES: \"WEBSITE_AUTH_ALLOWED_AUDIENCES\",\r\n    WEBSITE_AUTH_DEFAULT_PROVIDER: \"WEBSITE_AUTH_DEFAULT_PROVIDER\",\r\n    WEBSITE_AUTH_TOKEN_STORE: \"WEBSITE_AUTH_TOKEN_STORE\",\r\n    WEBSITE_AUTH_LOGIN_PARAMS: \"WEBSITE_AUTH_LOGIN_PARAMS\",\r\n    WEBSITE_AUTH_PRESERVE_URL_FRAGMENT: \"WEBSITE_AUTH_PRESERVE_URL_FRAGMENT\",\r\n    WEBSITE_AUTH_OPENID_ISSUER: \"WEBSITE_AUTH_OPENID_ISSUER\",\r\n    WEBSITE_AUTH_CLIENT_ID: \"WEBSITE_AUTH_CLIENT_ID\",\r\n    WEBSITE_HOSTNAME: \"WEBSITE_HOSTNAME\",\r\n    WEBSITE_SITE_NAME: \"WEBSITE_SITE_NAME\",\r\n    WEBSITE_AUTH_REQUIRE_HTTPS: \"WEBSITE_AUTH_REQUIRE_HTTPS\",\r\n    WEBSITE_AUTH_UNAUTHENTICATED_ACTION: \"WEBSITE_AUTH_UNAUTHENTICATED_ACTION\",\r\n    WEBSITE_AUTH_API_PREFIX: \"WEBSITE_AUTH_API_PREFIX\",\r\n    MICROSOFT_PROVIDER_AUTHENTICATION_SECRET: \"MICROSOFT_PROVIDER_AUTHENTICATION_SECRET\",\r\n};\r\n\r\n/**\r\n * Constants used in access control scenarios\r\n */\r\nexport const AccessControlConstants = {\r\n    GROUPS: \"groups\",\r\n    ROLES: \"roles\",\r\n    CLAIM_NAMES: \"_claim_name\",\r\n    CLAIM_SOURCES: \"_claim_sources\",\r\n    PAGINATION_LINK: \"@odata.nextLink\",\r\n    GRAPH_MEMBERS_ENDPOINT: \"https://graph.microsoft.com/v1.0/me/memberOf\",\r\n    GRAPH_MEMBER_SCOPES: \"User.Read GroupMember.Read.All\",\r\n};\r\n\r\n/**\r\n * Various information constants\r\n */\r\nexport const InfoMessages = {\r\n    APP_SERVICE_AUTH_DETECTED: \"App Service Authentication detected\",\r\n    REQUEST_FOR_RESOURCE: \"Request made to web API\",\r\n    OVERAGE_OCCURRED: \"User has too many groups. Groups overage claim occurred\",\r\n};\r\n\r\n/**\r\n * Various error constants\r\n */\r\nexport const ErrorMessages = {\r\n    NOT_PERMITTED: \"Not permitted\",\r\n    INVALID_TOKEN: \"Invalid token\",\r\n    CANNOT_DETERMINE_APP_STAGE: \"Cannot determine application stage\",\r\n    CANNOT_VALIDATE_TOKEN: \"Cannot validate token\",\r\n    CSRF_TOKEN_MISMATCH: \"CSRF token in response does not match to original request\",\r\n    INTERACTION_REQUIRED: \"interaction_required\",\r\n    TOKEN_ACQUISITION_FAILED: \"Token acquisition failed\",\r\n    TOKEN_RESPONSE_NULL: \"Token response is null\",\r\n    AUTH_CODE_URL_NOT_OBTAINED: \"Authorization code url cannot be obtained\",\r\n    TOKEN_NOT_FOUND: \"No token found\",\r\n    TOKEN_NOT_DECODED: \"Token cannot be decoded\",\r\n    TOKEN_NOT_VERIFIED: \"Token cannot be verified\",\r\n    KEYS_NOT_OBTAINED: \"Signing keys cannot be obtained\",\r\n    STATE_NOT_FOUND: \"State not found\",\r\n    USER_HAS_NO_ROLE: \"User does not have any roles\",\r\n    USER_NOT_IN_ROLE: \"User does not have this role\",\r\n    USER_HAS_NO_GROUP: \"User does not have any groups\",\r\n    USER_NOT_IN_GROUP: \"User does not have this group\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed for this route\",\r\n    RULE_NOT_FOUND: \"No rule found for this route\",\r\n    SESSION_NOT_FOUND: \"No session found for this request\",\r\n    KEY_VAULT_CONFIG_NOT_FOUND: \"No coordinates found for Key Vault\",\r\n    CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT: \"Cannot obtain credentials from Key Vault\",\r\n    SESSION_KEY_NOT_FOUND: \"No session key found in session. Cannot encrypt state data\",\r\n    AUTH_CODE_REQUEST_OBJECT_NOT_FOUND: \"No auth code request object found in session\",\r\n    ID_TOKEN_CLAIMS_NOT_FOUND: \"No id token claims found in session\",\r\n};\r\n\r\n/**\r\n * Various configuration error constants\r\n */\r\nexport const ConfigurationErrorMessages = {\r\n    AUTH_ROUTES_NOT_CONFIGURED:\r\n        \"Authentication routes are not defined. Ensure that the application settings are configured properly.\",\r\n    NO_PROTECTED_RESOURCE_CONFIGURED:\r\n        \"No protected resource is configured to acquire a token for. Ensure that the application settings are configured properly.\",\r\n    NO_ACCESS_MATRIX_CONFIGURED:\r\n        \"No access matrix is configured to control access for. Ensure that the application settings are configured properly.\",\r\n    NO_CLIENT_ID: \"No clientId provided!\",\r\n    INVALID_CLIENT_ID: \"Invalid clientId!\",\r\n    NO_TENANT_INFO: \"No tenant info provided!\",\r\n    INVALID_TENANT_INFO: \"Invalid tenant info!\",\r\n    NO_CLIENT_CREDENTIAL: \"No client credential provided!\",\r\n    NO_REDIRECT_URI: \"No redirect URI provided!\",\r\n    NO_UNAUTHORIZED_ROUTE: \"No unauthorized route provided!\",\r\n};\r\n\r\n/**\r\n * For more information, visit: https://login.microsoftonline.com/error\r\n */\r\nexport const ErrorCodes = {\r\n    65001: \"AADSTS65001\", // consent required\r\n    50076: \"AADSTS50076\", // mfa required\r\n    50079: \"AADSTS50079\", // mfa enrollment required\r\n    50001: \"AADSTS50001\", // invalid resource uri\r\n    65004: \"AADSTS65004\", // user declined consent\r\n    70011: \"AADSTS70011\", // invalid scope\r\n    700022: \"AADSTS700022\", // multiple resources\r\n    700020: \"AADSTS700020\", // interaction required\r\n    90118: \"AADB2C90118\", // password forgotten (B2C)\r\n};\r\n\r\nexport const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (logLevel, message, containsPii) => {\r\n        if (containsPii) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(message);\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LoggerOptions } from \"@azure/msal-common\";\r\n\r\nexport type AppSettings = {\r\n    appCredentials: AppCredentials;\r\n    loggerOptions?: LoggerOptions;\r\n    b2cPolicies?: Record<string, Policy>;\r\n    accessMatrix?: Record<string, AccessRule>;\r\n};\r\n\r\nexport type WebAppSettings = AppSettings & {\r\n    authRoutes: AuthRoutes;\r\n    protectedResources?: Record<string, Resource>\r\n};\r\n\r\nexport type AppCredentials = {\r\n    instance?: string;\r\n    clientId: string;\r\n    tenantId: string;\r\n    clientSecret?: string;\r\n    clientCertificate?: ClientCertificate;\r\n};\r\n\r\nexport type ClientCertificate = {\r\n    thumbprint: string;\r\n    privateKey: string;\r\n    x5c?: string;\r\n};\r\n\r\nexport type KeyVaultCredential = {\r\n    credentialType: string;\r\n    credentialName: string;\r\n    keyVaultUrl: string;\r\n};\r\n\r\nexport type AuthRoutes = {\r\n    redirect: string;\r\n    unauthorized: string;\r\n    frontChannelLogout?: string;\r\n};\r\n\r\nexport type Policy = {\r\n    authority: string;\r\n};\r\n\r\nexport type Resource = {\r\n    endpoint: string;\r\n    scopes: string[];\r\n    accessToken?: string;\r\n};\r\n\r\nexport type AccessRule = {\r\n    path: string;\r\n    methods: string[];\r\n    roles?: string[];\r\n    groups?: string[];\r\n};\r\n\r\nexport enum AppType {\r\n    WebApp\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport { AADAuthorityConstants, ConfigurationErrorMessages, OIDC_SCOPES } from \"../utils/Constants\";\r\nimport { AppSettings, AppType, Resource, WebAppSettings } from \"./AppSettings\";\r\n\r\nexport class ConfigHelper {\r\n    /**\r\n     * Validates the fields in the configuration file\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @returns {void}\r\n     */\r\n    static validateAppSettings(appSettings: AppSettings, appType: AppType): void {\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_ID);\r\n        } else if (!ConfigHelper.isGuid(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_CLIENT_ID);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.tenantId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_TENANT_INFO);\r\n        } else if (\r\n            !ConfigHelper.isGuid(appSettings.appCredentials.tenantId) &&\r\n            !Object.values(AADAuthorityConstants).includes(appSettings.appCredentials.tenantId)\r\n        ) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_TENANT_INFO);\r\n        }\r\n\r\n        switch (appType) {\r\n            case AppType.WebApp:\r\n                if (StringUtils.isEmpty((<WebAppSettings>appSettings).authRoutes?.redirect)) {\r\n                    throw new Error(ConfigurationErrorMessages.NO_REDIRECT_URI);\r\n                }\r\n\r\n                if (StringUtils.isEmpty((<WebAppSettings>appSettings).authRoutes?.unauthorized)) {\r\n                    throw new Error(ConfigurationErrorMessages.NO_UNAUTHORIZED_ROUTE);\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if a string is GUID\r\n     * @param {string} guid\r\n     * @returns {boolean}\r\n     */\r\n    static isGuid(guid: string): boolean {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n\r\n    /**\r\n     * Util method to get the resource name for a given scope(s)\r\n     * @param {Array} scopes: an array of scopes that the resource is associated with\r\n     * @param {webAppSettings} webAppSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getResourceNameFromScopes(scopes: string[], webAppSettings: WebAppSettings): string {\r\n        const index = Object.values({\r\n            ...webAppSettings.protectedResources,\r\n        }).findIndex((resource: Resource) =>\r\n            JSON.stringify(resource.scopes.sort()) === JSON.stringify(scopes.sort())\r\n        );\r\n\r\n        const resourceName = Object.keys({\r\n            ...webAppSettings.protectedResources,\r\n        })[index];\r\n\r\n        return resourceName;\r\n    }\r\n\r\n    /**\r\n     * Util method to get the scopes for a given resource name\r\n     * @param {string} resourceEndpoint: the resource name\r\n     * @param {webAppSettings} webAppSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getScopesFromResourceEndpoint(resourceEndpoint: string, webAppSettings: WebAppSettings): string[] {\r\n        const scopes = Object.values({\r\n            ...webAppSettings.protectedResources,\r\n        }).find((resource: Resource) => resource.endpoint === resourceEndpoint)?.scopes;\r\n\r\n        return scopes ? scopes : [];\r\n    }\r\n\r\n    /**\r\n     * Util method to strip the default OIDC scopes from the scopes array\r\n     * @param {Array} scopesList full list of scopes for this resource\r\n     * @returns\r\n     */\r\n    static getEffectiveScopes(scopesList: string[]): string[] {\r\n        const effectiveScopesList = scopesList.filter(scope => !OIDC_SCOPES.includes(scope));\r\n        return effectiveScopesList;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICachePlugin } from \"@azure/msal-node\";\r\n\r\nimport { ConfigHelper } from \"../config/ConfigHelper\";\r\nimport { AppSettings, AppType, KeyVaultCredential } from \"../config/AppSettings\";\r\nimport { MsalWebAppAuthClient } from \"./webapp/MsalWebAppAuthClient\";\r\nimport { AppServiceWebAppAuthClient } from \"./webapp/AppServiceWebAppAuthClient\";\r\n\r\nexport abstract class BaseAuthClientBuilder {\r\n    appSettings: AppSettings;\r\n    protected keyVaultCredential: KeyVaultCredential | undefined;\r\n    protected customCachePlugin: ICachePlugin | undefined;\r\n\r\n    protected constructor(appSettings: AppSettings, appType: AppType) {\r\n        ConfigHelper.validateAppSettings(appSettings, appType);\r\n        this.appSettings = appSettings;\r\n    }\r\n\r\n    withKeyVaultCredentials(keyVaultCredential: KeyVaultCredential): BaseAuthClientBuilder {\r\n        this.keyVaultCredential = keyVaultCredential;\r\n        return this;\r\n    }\r\n\r\n    withCustomCachePlugin(cachePlugin: ICachePlugin): BaseAuthClientBuilder {\r\n        this.customCachePlugin = cachePlugin;\r\n        return this;\r\n    }\r\n\r\n    abstract build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient;\r\n\r\n    abstract buildAsync(): Promise<MsalWebAppAuthClient | AppServiceWebAppAuthClient>;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport * as crypto from \"crypto\";\r\n\r\nexport class CryptoUtils {\r\n    private algorithm: string;\r\n\r\n    constructor(algorithm: string = \"aes-192-cbc\") {\r\n        this.algorithm = algorithm;\r\n    }\r\n\r\n    generateSalt(): string {\r\n        return crypto.randomBytes(20).toString(\"hex\");\r\n    }\r\n\r\n    createKey(password: string, salt: string): Buffer {\r\n        return crypto.scryptSync(password, salt, 24);\r\n    }\r\n\r\n    encryptData(stringifiedData: string, key: Buffer): string {\r\n        const iv = crypto.randomBytes(16);\r\n        const cipher = crypto.createCipheriv(this.algorithm, key, iv);\r\n        const encryptedData = cipher.update(stringifiedData, \"utf8\", \"hex\");\r\n\r\n        return [iv.toString(\"hex\"), encryptedData + cipher.final(\"hex\")].join(\".\");\r\n    }\r\n\r\n    decryptData(encryptedData: string, key: Buffer): string {\r\n        const [iv, encrypted] = encryptedData.split(\".\");\r\n        const decipher = crypto.createDecipheriv(this.algorithm, key, Buffer.from(iv, \"hex\"));\r\n        return decipher.update(encrypted, \"hex\", \"utf8\") + decipher.final(\"utf8\");\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger, LoggerOptions, LogLevel } from \"@azure/msal-common\";\r\nimport { ConfidentialClientApplication, Configuration, CryptoProvider } from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"../config/AppSettings\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { packageName, packageVersion } from \"../packageMetadata\";\r\n\r\nexport abstract class BaseAuthClient {\r\n    appSettings: AppSettings;\r\n\r\n    protected msalConfig: Configuration;\r\n    protected msalClient: ConfidentialClientApplication;\r\n    protected cryptoProvider: CryptoProvider;\r\n    protected cryptoUtils: CryptoUtils;\r\n    protected logger: Logger;\r\n    protected loggerOptions: LoggerOptions;\r\n\r\n    protected constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        this.appSettings = appSettings;\r\n        this.msalConfig = msalConfig;\r\n        this.cryptoProvider = new CryptoProvider();\r\n        this.cryptoUtils = new CryptoUtils();\r\n        this.loggerOptions =\r\n            this.msalConfig.system && this.msalConfig.system.loggerOptions\r\n                ? this.msalConfig.system.loggerOptions\r\n                : {\r\n                    loggerCallback: () => {\r\n                        // allow users to not set loggerCallback\r\n                    },\r\n                    piiLoggingEnabled: false,\r\n                    logLevel: LogLevel.Info,\r\n                };\r\n\r\n        this.logger = new Logger(this.loggerOptions, packageName, packageVersion);\r\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\r\n    }\r\n\r\n    getMsalClient(): ConfidentialClientApplication {\r\n        return this.msalClient;\r\n    }\r\n\r\n    getMsalConfig(): Configuration {\r\n        return this.msalConfig;\r\n    }\r\n\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const packageName = \"@azure-samples/microsoft-identity-express\";\r\nexport const packageVersion = \"beta\";\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport { AccessControlConstants, ErrorMessages } from \"../utils/Constants\";\r\n\r\nexport class FetchManager {\r\n    /**\r\n     * Calls a resource endpoint\r\n     * @param {string} endpoint\r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpoint = async (endpoint: string): Promise<AxiosResponse> => {\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calls a resource endpoint with a raw access token\r\n     * using the authorization bearer token scheme\r\n     * @param {string} endpoint\r\n     * @param {string} accessToken\r\n     * @returns {Promise}\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    static callApiEndpointWithToken = async (endpoint: string, accessToken: string): Promise<AxiosResponse<any>> => {\r\n        if (StringUtils.isEmpty(accessToken)) {\r\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND);\r\n        }\r\n\r\n        const options: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n            },\r\n        };\r\n\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint, options);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles queries against Microsoft Graph that return multiple pages of data\r\n     * @param {string} accessToken: access token required by endpoint\r\n     * @param {string} nextPage: next page link\r\n     * @param {Array} data: stores data from each page\r\n     * @returns {Promise}\r\n     */\r\n    static handlePagination = async (accessToken: string, nextPage: string, data: string[] = []): Promise<string[]> => {\r\n        try {\r\n            const graphResponse = await (await FetchManager.callApiEndpointWithToken(nextPage, accessToken)).data;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n            graphResponse[\"value\"].map((v: any) => data.push(v.id));\r\n\r\n            if (graphResponse[AccessControlConstants.PAGINATION_LINK]) {\r\n                return await FetchManager.handlePagination(\r\n                    accessToken,\r\n                    graphResponse[AccessControlConstants.PAGINATION_LINK],\r\n                    data\r\n                );\r\n            } else {\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Request } from \"express\";\r\nimport { IUri, UrlString } from \"@azure/msal-common\";\r\n\r\nexport class UrlUtils {\r\n    /**\r\n     * Gets the absolute URL from a given request and path string\r\n     * @param {Request} req: express request object\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static ensureAbsoluteUrl = (req: Request, url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n\r\n        if (!urlComponents.Protocol) {\r\n            if (!urlComponents.HostNameAndPort && !url.startsWith(\"www\")) {\r\n                if (!url.startsWith(\"/\")) {\r\n                    return req.protocol + \"://\" + req.get(\"host\") + \"/\" + url;\r\n                }\r\n                return req.protocol + \"://\" + req.get(\"host\") + url;\r\n            }\r\n            return req.protocol + \"://\" + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the path segment from a given URL\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static getPathFromUrl = (url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n        return `/${urlComponents.PathSegments.join(\"/\")}`;\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, { RequestHandler, Request, Response, NextFunction, Router } from \"express\";\r\nimport { OIDC_DEFAULT_SCOPES, InteractionRequiredAuthError, StringUtils, ResponseMode } from \"@azure/msal-common\";\r\nimport { AuthorizationCodeRequest, AuthorizationUrlRequest, Configuration, SilentFlowRequest } from \"@azure/msal-node\";\r\nimport { Resource, AppSettings, AccessRule, WebAppSettings } from \"../../config/AppSettings\";\r\nimport { TokenRequestOptions, GuardOptions, SignInOptions, SignOutOptions } from \"../MiddlewareOptions\";\r\nimport { AppStages, ErrorMessages, AccessControlConstants, ConfigurationErrorMessages } from \"../../utils/Constants\";\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { FetchManager } from \"../../network/FetchManager\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { AppState } from \"../../utils/Types\";\r\nimport { IsAnInteractionRequiredAuthError } from \"../../utils/Helpers\";\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in Express web apps\r\n */\r\nexport class MsalWebAppAuthClient extends BaseAuthClient {\r\n\r\n    webAppSettings: WebAppSettings;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n        this.webAppSettings = appSettings as WebAppSettings;\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @returns {Router}\r\n     */\r\n    initialize(): Router {\r\n        const appRouter = express.Router();\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction) => {\r\n            if (!req.session) {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                throw new Error(ErrorMessages.SESSION_NOT_FOUND);\r\n            }\r\n\r\n            next();\r\n        });\r\n\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        if (this.webAppSettings.authRoutes.frontChannelLogout) {\r\n            /**\r\n             * Expose front-channel logout route. For more information, visit:\r\n             * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\r\n             */\r\n            appRouter.get(this.webAppSettings.authRoutes.frontChannelLogout, (req: Request, res: Response) => {\r\n                req.session.destroy(() => {\r\n                    res.sendStatus(200);\r\n                });\r\n            });\r\n        }\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(\r\n        options: SignInOptions = {\r\n            postLoginRedirect: \"/\",\r\n            failureRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const appState = {\r\n                appStage: AppStages.SIGN_IN,\r\n                redirectTo: options.postLoginRedirect,\r\n                csrfToken: req.session.csrfToken,\r\n            } as AppState;\r\n\r\n            const authUrlParams = {\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n            } as AuthorizationUrlRequest;\r\n\r\n            const authCodeParams = {\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n            } as AuthorizationCodeRequest;\r\n\r\n            // get url to sign user in\r\n            return this.redirectToAuthCodeUrl(req, res, next, authUrlParams, authCodeParams, appState);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param {SignOutOptions} options: options to modify logout request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(\r\n        options: SignOutOptions = {\r\n            postLogoutRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return async (req: Request, res: Response): Promise<void> => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n\r\n            /**\r\n             * Construct a logout URI and redirect the user to end the\r\n             * session with Azure AD/B2C. For more information, visit:\r\n             * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\r\n             * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\r\n             */\r\n            const logoutUri = `${this.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\r\n\r\n            const tokenCache = this.msalClient.getTokenCache();\r\n\r\n            const account =\r\n                req.session.account?.homeAccountId && await tokenCache.getAccountByHomeId(req.session.account.homeAccountId)\r\n                ||\r\n                req.session.account?.localAccountId && await tokenCache.getAccountByLocalId(req.session.account.localAccountId);\r\n\r\n            if (account) {\r\n                await tokenCache.removeAccount(account);\r\n            }\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!req.session.key) {\r\n                this.logger.error(ErrorMessages.SESSION_KEY_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.SESSION_KEY_NOT_FOUND));\r\n            }\r\n\r\n            if (!req.session.authorizationCodeRequest) {\r\n                this.logger.error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.AUTH_CODE_REQUEST_OBJECT_NOT_FOUND));\r\n            }\r\n\r\n            if (req.body.state) {\r\n                const state: AppState = JSON.parse(\r\n                    this.cryptoUtils.decryptData(\r\n                        this.cryptoProvider.base64Decode(req.body.state as string),\r\n                        Buffer.from(req.session.key, \"hex\")\r\n                    )\r\n                );\r\n\r\n                // check if csrfToken matches\r\n                if (state.csrfToken === req.session.csrfToken) {\r\n                    switch (state.appStage) {\r\n                        case AppStages.SIGN_IN: {\r\n                            // token request should have auth code\r\n                            req.session.authorizationCodeRequest.code = req.body.code as string;\r\n\r\n                            try {\r\n                                // exchange auth code for tokens\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(\r\n                                    req.session.authorizationCodeRequest\r\n                                );\r\n\r\n                                if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n                                req.session.isAuthenticated = true;\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                req.session.account = tokenResponse.account!; // this won't be null in any web app scenario\r\n                                res.redirect(state.redirectTo);\r\n                            } catch (error) {\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        case AppStages.ACQUIRE_TOKEN: {\r\n                            // get the name of the resource associated with scope\r\n                            const resourceName = ConfigHelper.getResourceNameFromScopes(\r\n                                req.session.authorizationCodeRequest.scopes,\r\n                                this.webAppSettings\r\n                            );\r\n\r\n                            req.session.authorizationCodeRequest.code = req.body.code as string;\r\n\r\n                            try {\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(\r\n                                    req.session.authorizationCodeRequest\r\n                                );\r\n\r\n                                if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n                                req.session.protectedResources = {\r\n                                    [resourceName]: {\r\n                                        accessToken: tokenResponse.accessToken,\r\n                                    } as Resource,\r\n                                };\r\n\r\n                                res.redirect(state.redirectTo);\r\n                            } catch (error) {\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                            next(new Error(ErrorMessages.CANNOT_DETERMINE_APP_STAGE));\r\n                            break;\r\n                    }\r\n                } else {\r\n                    res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                }\r\n            } else {\r\n                res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens via acquireToken*\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!this.webAppSettings.protectedResources) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED));\r\n            }\r\n\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(scopes, this.webAppSettings);\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.webAppSettings.protectedResources[resourceName],\r\n                    accessToken: undefined,\r\n                } as Resource,\r\n            };\r\n\r\n            try {\r\n                const silentRequest = {\r\n                    account: req.session.account,\r\n                    scopes: scopes,\r\n                } as SilentFlowRequest;\r\n\r\n                // acquire token silently to be used in resource call\r\n                const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n                if (!tokenResponse || StringUtils.isEmpty(tokenResponse.accessToken)) {\r\n                    /*\r\n                     * In B2C scenarios, sometimes an access token is returned empty.\r\n                     * In that case, we will acquire token interactively instead.\r\n                     */\r\n\r\n                    throw new InteractionRequiredAuthError(ErrorMessages.INTERACTION_REQUIRED);\r\n                }\r\n\r\n                req.session.protectedResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                // in case there are no cached tokens, initiate an interactive call\r\n                if (error instanceof InteractionRequiredAuthError || IsAnInteractionRequiredAuthError(error)) {\r\n                    const appState = {\r\n                        appStage: AppStages.ACQUIRE_TOKEN,\r\n                        redirectTo: req.originalUrl,\r\n                    } as AppState;\r\n\r\n                    const authUrlParams = {\r\n                        scopes: scopes,\r\n                    } as AuthorizationUrlRequest;\r\n\r\n                    const authCodeParams = {\r\n                        scopes: scopes,\r\n                    } as AuthorizationCodeRequest;\r\n\r\n                    // initiate the first leg of auth code grant to get token\r\n                    return this.redirectToAuthCodeUrl(req, res, next, authUrlParams, authCodeParams, appState);\r\n                } else {\r\n                    next(error);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session.isAuthenticated) {\r\n                return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n\r\n            next();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the user has access for this route, defined in access matrix\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    hasAccess(options: GuardOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (!this.webAppSettings.accessMatrix) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_ACCESS_MATRIX_CONFIGURED));\r\n            }\r\n\r\n            if (!req.session.account?.idTokenClaims) {\r\n                this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\r\n                return next(new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND));\r\n            }\r\n\r\n            const checkFor = options.accessRule.hasOwnProperty(AccessControlConstants.GROUPS)\r\n                ? AccessControlConstants.GROUPS\r\n                : AccessControlConstants.ROLES;\r\n\r\n            switch (checkFor) {\r\n                case AccessControlConstants.GROUPS:\r\n                    if (!req.session.account.idTokenClaims[AccessControlConstants.GROUPS]) {\r\n                        if (\r\n                            req.session.account.idTokenClaims[AccessControlConstants.CLAIM_NAMES] ||\r\n                            req.session.account.idTokenClaims[AccessControlConstants.CLAIM_SOURCES]\r\n                        ) {\r\n                            return await this.handleOverage(req, res, next, options.accessRule);\r\n                        } else {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    } else {\r\n                        const groups = req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[];\r\n\r\n                        if (\r\n                            !this.checkAccessRule(req.method, options.accessRule, groups, AccessControlConstants.GROUPS)\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    }\r\n\r\n                    next();\r\n                    break;\r\n\r\n                case AccessControlConstants.ROLES:\r\n                    if (!req.session.account.idTokenClaims[AccessControlConstants.ROLES]) {\r\n                        return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        const roles = req.session.account.idTokenClaims[AccessControlConstants.ROLES] as string[];\r\n\r\n                        if (\r\n                            !this.checkAccessRule(req.method, options.accessRule, roles, AccessControlConstants.ROLES)\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        }\r\n                    }\r\n\r\n                    next();\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n\r\n    // ============== UTILS ===============\r\n\r\n    /**\r\n     * This method is used to generate an auth code url request\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AuthCodeParams} params: modifies auth code url request\r\n     * @returns {Promise}\r\n     */\r\n    private async redirectToAuthCodeUrl(\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction,\r\n        authUrlParams: AuthorizationUrlRequest,\r\n        authCodeParams: AuthorizationCodeRequest,\r\n        appState: AppState\r\n    ): Promise<void> {\r\n        // add session csrfToken for crsf\r\n        req.session.csrfToken = this.cryptoProvider.createNewGuid();\r\n\r\n        const key = this.cryptoUtils.createKey(req.session.csrfToken, this.cryptoUtils.generateSalt());\r\n        req.session.key = key.toString(\"hex\");\r\n\r\n        const state = JSON.stringify({\r\n            ...appState,\r\n            csrfToken: req.session.csrfToken,\r\n        });\r\n\r\n        // prepare the request\r\n        req.session.authorizationUrlRequest = {\r\n            ...authUrlParams,\r\n            state: this.cryptoProvider.base64Encode(this.cryptoUtils.encryptData(state, key)),\r\n            redirectUri: UrlUtils.ensureAbsoluteUrl(req, this.webAppSettings.authRoutes.redirect),\r\n            responseMode: ResponseMode.FORM_POST\r\n        };\r\n\r\n        req.session.authorizationCodeRequest = {\r\n            ...authCodeParams,\r\n            redirectUri: UrlUtils.ensureAbsoluteUrl(req, this.webAppSettings.authRoutes.redirect),\r\n            code: \"\"\r\n        };\r\n\r\n        // request an authorization code to exchange for tokens\r\n        try {\r\n            const response = await this.msalClient.getAuthCodeUrl(req.session.authorizationUrlRequest);\r\n            res.redirect(response);\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles group overage claims by querying MS Graph /memberOf endpoint\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AccessRule} rule: a given access rule\r\n     * @returns {Promise}\r\n     */\r\n    private async handleOverage(req: Request, res: Response, next: NextFunction, rule: AccessRule): Promise<void> {\r\n        if (!req.session.account?.idTokenClaims) {\r\n            this.logger.error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND);\r\n            return next(new Error(ErrorMessages.ID_TOKEN_CLAIMS_NOT_FOUND));\r\n        }\r\n\r\n        const { ...newIdTokenClaims } = req.session.account.idTokenClaims;\r\n\r\n        const silentRequest: SilentFlowRequest = {\r\n            account: req.session.account,\r\n            scopes: AccessControlConstants.GRAPH_MEMBER_SCOPES.split(\" \"),\r\n        };\r\n\r\n        try {\r\n            // acquire token silently to be used in resource call\r\n            const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n            if (!tokenResponse) return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n\r\n            try {\r\n                const graphResponse = await FetchManager.callApiEndpointWithToken(\r\n                    AccessControlConstants.GRAPH_MEMBERS_ENDPOINT,\r\n                    tokenResponse.accessToken\r\n                );\r\n\r\n                /**\r\n                 * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging\r\n                 * or due to the use of the $top query parameter to specifically limit the page size in a request.\r\n                 * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in\r\n                 * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\r\n                 */\r\n                if (graphResponse.data[AccessControlConstants.PAGINATION_LINK]) {\r\n                    try {\r\n                        const userGroups = await FetchManager.handlePagination(\r\n                            tokenResponse.accessToken,\r\n                            graphResponse.data[AccessControlConstants.PAGINATION_LINK]\r\n                        );\r\n\r\n                        req.session.account.idTokenClaims = {\r\n                            ...newIdTokenClaims,\r\n                            groups: userGroups,\r\n                        };\r\n\r\n                        if (\r\n                            !this.checkAccessRule(\r\n                                req.method,\r\n                                rule,\r\n                                req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[],\r\n                                AccessControlConstants.GROUPS\r\n                            )\r\n                        ) {\r\n                            return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            return next();\r\n                        }\r\n                    } catch (error) {\r\n                        next(error);\r\n                    }\r\n                } else {\r\n                    req.session.account.idTokenClaims = {\r\n                        ...newIdTokenClaims,\r\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                        groups: graphResponse.data[\"value\"].map((v: any) => v.id),\r\n                    };\r\n\r\n                    if (\r\n                        !this.checkAccessRule(\r\n                            req.method,\r\n                            rule,\r\n                            req.session.account.idTokenClaims[AccessControlConstants.GROUPS] as string[],\r\n                            AccessControlConstants.GROUPS\r\n                        )\r\n                    ) {\r\n                        return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        } catch (error) {\r\n            // TODO: handle silent token acquisition error\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the request passes a given access rule\r\n     * @param {string} method: HTTP method for this route\r\n     * @param {AccessRule} rule: access rule for this route\r\n     * @param {Array} creds: user's credentials i.e. roles or groups\r\n     * @param {string} credType: roles or groups\r\n     * @returns {boolean}\r\n     */\r\n    private checkAccessRule(method: string, rule: AccessRule, creds: string[], credType: string): boolean {\r\n        if (rule.methods.includes(method)) {\r\n            switch (credType) {\r\n                case AccessControlConstants.GROUPS:\r\n                    if (!rule.groups || rule.groups.filter(elem => creds.includes(elem)).length < 1) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case AccessControlConstants.ROLES:\r\n                    if (!rule.roles || rule.roles.filter(elem => creds.includes(elem)).length < 1) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InteractionRequiredAuthError } from \"@azure/msal-common\";\r\n\r\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param error\r\n */\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\r\nexport function IsAnInteractionRequiredAuthError(error: any): boolean {\r\n    return InteractionRequiredAuthError.isInteractionRequiredError(\r\n        error?.errorCode,\r\n        error?.errorMessage,\r\n        error?.subError\r\n    );\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, { Router, RequestHandler, Request, Response, NextFunction } from \"express\";\r\nimport { AccountInfo, AuthToken } from \"@azure/msal-common\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { AccessTokenClaims, IdTokenClaims } from \"../../utils/Types\";\r\nimport { AppSettings, Resource, WebAppSettings } from \"../../config/AppSettings\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { SignInOptions, SignOutOptions, TokenRequestOptions } from \"../MiddlewareOptions\";\r\nimport {\r\n    AppServiceAuthenticationHeaders,\r\n    AppServiceEnvironmentVariables,\r\n    AppServiceAuthenticationEndpoints,\r\n    AppServiceAuthenticationQueryParameters,\r\n    ErrorMessages,\r\n    ConfigurationErrorMessages,\r\n} from \"../../utils/Constants\";\r\n\r\nexport class AppServiceWebAppAuthClient extends BaseAuthClient {\r\n\r\n    webAppSettings: WebAppSettings;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n        this.webAppSettings = appSettings as WebAppSettings;\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(): Router {\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.webAppSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session) {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                throw new Error(ErrorMessages.SESSION_NOT_FOUND);\r\n            }\r\n\r\n            if (!req.session.isAuthenticated) {\r\n                // check headers for id token\r\n                const rawIdToken = req.headers[\r\n                    AppServiceAuthenticationHeaders.APP_SERVICE_ID_TOKEN_HEADER.toLowerCase()\r\n                ] as string;\r\n\r\n                if (rawIdToken) {\r\n                    // parse the id token\r\n                    const idTokenClaims: IdTokenClaims = AuthToken.extractTokenClaims(rawIdToken, this.cryptoProvider);\r\n\r\n                    req.session.isAuthenticated = true;\r\n\r\n                    req.session.account = {\r\n                        tenantId: idTokenClaims.tid,\r\n                        homeAccountId: idTokenClaims.oid + \".\" + idTokenClaims.tid,\r\n                        localAccountId: idTokenClaims.oid,\r\n                        environment: idTokenClaims.iss?.split(\"://\")[1].split(\"/\")[0],\r\n                        username: idTokenClaims.preferred_username,\r\n                        name: idTokenClaims.name,\r\n                        idTokenClaims: idTokenClaims,\r\n                    } as AccountInfo;\r\n                }\r\n            }\r\n\r\n            next();\r\n        });\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(\r\n        options: SignInOptions = {\r\n            postLoginRedirect: \"/\",\r\n            failureRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response): void => {\r\n            const postLoginRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLoginRedirect);\r\n            const loginUri =\r\n                \"https://\" +\r\n                process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\r\n                AppServiceAuthenticationEndpoints.AAD_SIGN_IN_ENDPOINT +\r\n                AppServiceAuthenticationQueryParameters.POST_LOGIN_REDIRECT_QUERY_PARAM +\r\n                postLoginRedirectUri;\r\n            res.redirect(loginUri);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param {SignOutOptions} options: options to modify logout request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(\r\n        options: SignOutOptions = {\r\n            postLogoutRedirect: \"/\",\r\n        }\r\n    ): RequestHandler {\r\n        return (req: Request, res: Response): void => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n            const logoutUri =\r\n                \"https://\" +\r\n                process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] +\r\n                AppServiceAuthenticationEndpoints.AAD_SIGN_OUT_ENDPOINT +\r\n                AppServiceAuthenticationQueryParameters.POST_LOGOUT_REDIRECT_QUERY_PARAM +\r\n                postLogoutRedirectUri;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            next();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            if (!this.webAppSettings.protectedResources) {\r\n                this.logger.error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED);\r\n                return next(new Error(ConfigurationErrorMessages.NO_PROTECTED_RESOURCE_CONFIGURED));\r\n            }\r\n\r\n            // get scopes for token request\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(options.resource.scopes, this.webAppSettings);\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.webAppSettings.protectedResources[resourceName],\r\n                    accessToken: undefined,\r\n                } as Resource,\r\n            };\r\n\r\n            const rawAccessToken = req.headers[\r\n                AppServiceAuthenticationHeaders.APP_SERVICE_ACCESS_TOKEN_HEADER.toLowerCase()\r\n            ] as string;\r\n\r\n            if (rawAccessToken) {\r\n                const accessTokenClaims = AuthToken.extractTokenClaims(\r\n                    rawAccessToken,\r\n                    this.cryptoProvider\r\n                ) as AccessTokenClaims;\r\n\r\n                // get the name of the resource associated with scope\r\n                const scopes = accessTokenClaims?.scp.split(\" \");\r\n                const effectiveScopes = ConfigHelper.getEffectiveScopes(scopes);\r\n\r\n                if (options.resource.scopes.every(elem => effectiveScopes.includes(elem))) {\r\n                    req.session.protectedResources[resourceName].accessToken = rawAccessToken;\r\n                    return next();\r\n                } else {\r\n                    return next(new Error(\"No tokens found for given scopes\"));\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (!req.session.isAuthenticated) {\r\n                return res.redirect(this.webAppSettings.authRoutes.unauthorized);\r\n            }\r\n\r\n            next();\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { CertificateClient, KeyVaultCertificate } from \"@azure/keyvault-certificates\";\r\nimport { KeyVaultSecret, SecretClient } from \"@azure/keyvault-secrets\";\r\n\r\nimport { KeyVaultCredential, ClientCertificate } from \"../config/AppSettings\";\r\nimport { KeyVaultCredentialTypes } from \"../utils/Constants\";\r\n\r\nexport type KeyVaultCredentialResponse = {\r\n    type: KeyVaultCredentialTypes.SECRET | KeyVaultCredentialTypes.CERTIFICATE;\r\n    value: string & ClientCertificate;\r\n};\r\n\r\nexport class KeyVaultManager {\r\n    /**\r\n     * Fetches credentials from Key Vault and updates appSettings\r\n     * @param {AppSettings} appSettings\r\n     * @returns {Promise}\r\n     */\r\n    async getCredentialFromKeyVault(keyVaultCredential: KeyVaultCredential): Promise<KeyVaultCredentialResponse> {\r\n        const credential = new DefaultAzureCredential();\r\n        let response: KeyVaultCredentialResponse = {} as KeyVaultCredentialResponse;\r\n\r\n        switch (keyVaultCredential.credentialType) {\r\n            case KeyVaultCredentialTypes.SECRET: {\r\n                try {\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    response = {\r\n                        type: KeyVaultCredentialTypes.SECRET,\r\n                        value: secretResponse.value,\r\n                    } as KeyVaultCredentialResponse;\r\n                } catch (error) {\r\n                    throw error;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case KeyVaultCredentialTypes.CERTIFICATE: {\r\n                try {\r\n                    const certificateResponse = await this.getCertificateCredential(keyVaultCredential, credential);\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    response = {\r\n                        type: KeyVaultCredentialTypes.CERTIFICATE,\r\n                        value: {\r\n                            thumbprint: certificateResponse?.properties?.x509Thumbprint?.toString(),\r\n                            privateKey: secretResponse?.value?.split(\"-----BEGIN CERTIFICATE-----\\n\")[0],\r\n                        },\r\n                    } as KeyVaultCredentialResponse;\r\n                } catch (error) {\r\n                    throw error;\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Gets a certificate credential from Key Vault\r\n     * @param {AppSettings} config\r\n     * @param {DefaultAzureCredential} credential\r\n     * @returns {Promise}\r\n     */\r\n    async getCertificateCredential(\r\n        keyVaultCredential: KeyVaultCredential,\r\n        credential: DefaultAzureCredential\r\n    ): Promise<KeyVaultCertificate> {\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new CertificateClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultCertificate = await secretClient.getCertificate(keyVaultCredential.credentialName);\r\n            return keyVaultCertificate;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a secret credential from Key Vault\r\n     * @param {AppSettings} config\r\n     * @param {DefaultAzureCredential} credential\r\n     * @returns {Promise}\r\n     */\r\n    async getSecretCredential(\r\n        keyVaultCredential: KeyVaultCredential,\r\n        credential: DefaultAzureCredential\r\n    ): Promise<KeyVaultSecret> {\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new SecretClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultSecret = await secretClient.getSecret(keyVaultCredential.credentialName);\r\n            return keyVaultSecret;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, Constants } from \"@azure/msal-common\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { DEFAULT_LOGGER_OPTIONS } from \"../utils/Constants\";\r\nimport { AppSettings } from \"./AppSettings\";\r\n\r\nexport class MsalConfiguration {\r\n    /**\r\n     * Maps the custom configuration object to configuration\r\n     * object expected by MSAL Node ConfidentialClientApplication class\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @param {ICachePlugin} cachePlugin: custom cache plugin\r\n     * @param {IDistributedPersistence} distributedPersistence: distributed persistence client\r\n     * @returns {Configuration}\r\n     */\r\n    static getMsalConfiguration(appSettings: AppSettings): Configuration {\r\n        return {\r\n            auth: {\r\n                clientId: appSettings.appCredentials.clientId,\r\n                authority: appSettings.b2cPolicies\r\n                    ? Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"] // the first policy/user-flow is the default authority\r\n                    : appSettings.appCredentials.instance\r\n                        ? `https://${appSettings.appCredentials.instance}/${appSettings.appCredentials.tenantId}`\r\n                        : `https://${Constants.DEFAULT_AUTHORITY_HOST}/${appSettings.appCredentials.tenantId}`,\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientSecret\") && {\r\n                    clientSecret: appSettings.appCredentials.clientSecret,\r\n                }),\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientCertificate\") && {\r\n                    clientCertificate: appSettings.appCredentials.clientCertificate,\r\n                }),\r\n                knownAuthorities: appSettings.b2cPolicies\r\n                    ? [UrlString.getDomainFromUrl(Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"])] // in B2C scenarios\r\n                    : [],\r\n            },\r\n            system: {\r\n                loggerOptions: appSettings.loggerOptions ? appSettings.loggerOptions : DEFAULT_LOGGER_OPTIONS,\r\n            },\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AppServiceEnvironmentVariables } from \"./Constants\";\r\n\r\nexport class EnvironmentUtils {\r\n    static isProduction(): boolean {\r\n        return process.env.NODE_ENV === \"production\";\r\n    }\r\n\r\n    static isDevelopment(): boolean {\r\n        return process.env.NODE_ENV === \"development\";\r\n    }\r\n\r\n    static isAppServiceAuthEnabled(): boolean {\r\n        return process.env[AppServiceEnvironmentVariables.WEBSITE_AUTH_ENABLED] === \"True\";\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClientBuilder } from \"../BaseAuthClientBuilder\";\r\nimport { MsalWebAppAuthClient } from \"./MsalWebAppAuthClient\";\r\nimport { AppServiceWebAppAuthClient } from \"./AppServiceWebAppAuthClient\";\r\nimport { KeyVaultManager } from \"../../network/KeyVaultManager\";\r\nimport { MsalConfiguration } from \"../../config/MsalConfiguration\";\r\nimport { AppSettings, AppType } from \"../../config/AppSettings\";\r\nimport { EnvironmentUtils } from \"../../utils/EnvironmentUtils\";\r\nimport { ErrorMessages } from \"../../utils/Constants\";\r\n\r\nexport class WebAppAuthClientBuilder extends BaseAuthClientBuilder {\r\n    appSettings!: AppSettings;\r\n    private msalConfig!: Configuration;\r\n\r\n    constructor(appSettings: AppSettings) {\r\n        super(appSettings, AppType.WebApp);\r\n    }\r\n\r\n    build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient {\r\n        // TODO: throw error if key vault credential is being built\r\n\r\n        this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n\r\n        if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n            return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        } else {\r\n            return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        }\r\n    }\r\n\r\n    async buildAsync(): Promise<MsalWebAppAuthClient | AppServiceWebAppAuthClient> {\r\n        try {\r\n            if (this.keyVaultCredential) {\r\n                const keyVaultManager = new KeyVaultManager();\r\n                const credential = await keyVaultManager.getCredentialFromKeyVault(this.keyVaultCredential);\r\n                this.appSettings.appCredentials[credential.type] = credential.value;\r\n            }\r\n\r\n            this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n\r\n            if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n                return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            } else {\r\n                return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(ErrorMessages.CANNOT_OBTAIN_CREDENTIALS_FROM_KEY_VAULT);\r\n        }\r\n    }\r\n}\r\n"],"names":["AppStages","KeyVaultCredentialTypes","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","AppType","OIDC_SCOPES","AppServiceAuthenticationHeaders","APP_SERVICE_AUTHENTICATION_HEADER","APP_SERVICE_ACCESS_TOKEN_HEADER","APP_SERVICE_ID_TOKEN_HEADER","APP_SERVICE_REFRESH_TOKEN_HEADER","APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER","APP_SERVICE_USER_OID_HEADER","APP_SERVICE_USER_UPN_HEADER","APP_SERVICE_IDP_X_HEADER","AccessControlConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","ConfigurationErrorMessages","DEFAULT_LOGGER_OPTIONS","loggerCallback","logLevel","message","containsPii","console","info","piiLoggingEnabled","LogLevel","Info","ConfigHelper","validateAppSettings","appSettings","appType","StringUtils","isEmpty","appCredentials","clientId","Error","isGuid","tenantId","Object","values","includes","WebApp","_appSettings$authRout","authRoutes","redirect","_appSettings$authRout2","unauthorized","guid","test","getResourceNameFromScopes","scopes","webAppSettings","index","_extends","protectedResources","findIndex","resource","JSON","stringify","sort","keys","getScopesFromResourceEndpoint","resourceEndpoint","_Object$values$find","find","endpoint","getEffectiveScopes","scopesList","filter","scope","BaseAuthClientBuilder","this","_proto","prototype","withKeyVaultCredentials","keyVaultCredential","withCustomCachePlugin","cachePlugin","customCachePlugin","CryptoUtils","algorithm","generateSalt","crypto","toString","createKey","password","salt","encryptData","stringifiedData","key","iv","cipher","encryptedData","update","join","decryptData","_encryptedData$split","split","encrypted","decipher","Buffer","from","BaseAuthClient","msalConfig","cryptoProvider","CryptoProvider","cryptoUtils","loggerOptions","system","logger","Logger","msalClient","ConfidentialClientApplication","getMsalClient","getMsalConfig","getLogger","FetchManager","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","axios","get","abrupt","sent","data","t0","stop","_x","apply","arguments","_ref2","_callee2","accessToken","options","_context2","headers","Authorization","_x2","_x3","_ref3","_callee3","nextPage","_context3","callApiEndpointWithToken","graphResponse","map","v","push","id","handlePagination","_x4","_x5","_x6","UrlUtils","req","url","urlComponents","UrlString","getUrlComponents","Protocol","HostNameAndPort","startsWith","protocol","PathSegments","MsalWebAppAuthClient","_BaseAuthClient","_this","call","_inheritsLoose","initialize","appRouter","express","Router","use","res","session","_this2","error","post","getPathFromUrl","handleRedirect","frontChannelLogout","destroy","sendStatus","signIn","postLoginRedirect","failureRedirect","_this3","redirectToAuthCodeUrl","OIDC_DEFAULT_SCOPES","appStage","SIGN_IN","redirectTo","csrfToken","signOut","postLogoutRedirect","_req$session$account","_req$session$account2","postLogoutRedirectUri","logoutUri","tokenCache","account","ensureAbsoluteUrl","_this4","auth","authority","getTokenCache","t1","homeAccountId","getAccountByHomeId","t2","localAccountId","getAccountByLocalId","removeAccount","state","tokenResponse","resourceName","_req$session$protecte","_tokenResponse","_this5","authorizationCodeRequest","body","parse","base64Decode","ACQUIRE_TOKEN","code","acquireTokenByCode","isAuthenticated","getToken","_req$session$protecte2","silentRequest","_this6","undefined","acquireTokenSilent","InteractionRequiredAuthError","isInteractionRequiredError","errorCode","errorMessage","subError","originalUrl","_x7","_x8","_this7","hasAccess","_ref4","_callee4","_req$session$account3","checkFor","_context4","_this8","accessMatrix","idTokenClaims","accessRule","hasOwnProperty","handleOverage","checkAccessRule","method","_x9","_x10","_x11","_redirectToAuthCodeUrl","_callee5","authUrlParams","authCodeParams","appState","_context5","createNewGuid","authorizationUrlRequest","base64Encode","redirectUri","responseMode","ResponseMode","FORM_POST","getAuthCodeUrl","_x12","_x13","_x14","_x15","_x16","_x17","_handleOverage","_callee6","rule","_req$session$account4","newIdTokenClaims","_context6","_objectDestructuringEmpty","groups","_x18","_x19","_x20","_x21","creds","credType","methods","elem","length","roles","AppServiceWebAppAuthClient","rawIdToken","toLowerCase","_idTokenClaims$iss","AuthToken","extractTokenClaims","tid","oid","environment","iss","username","preferred_username","name","postLoginRedirectUri","loginUri","process","env","rawAccessToken","accessTokenClaims","effectiveScopes","scp","every","KeyVaultManager","getCredentialFromKeyVault","_getCredentialFromKeyVault","credential","response","_certificateResponse$","_certificateResponse$2","_secretResponse$value","certificateResponse","_secretResponse","DefaultAzureCredential","credentialType","SECRET","CERTIFICATE","getSecretCredential","type","value","getCertificateCredential","secretResponse","thumbprint","properties","x509Thumbprint","privateKey","_getCertificateCredential","secretClient","CertificateClient","keyVaultUrl","getCertificate","credentialName","_getSecretCredential","SecretClient","getSecret","MsalConfiguration","getMsalConfiguration","b2cPolicies","entries","instance","Constants","DEFAULT_AUTHORITY_HOST","clientSecret","clientCertificate","knownAuthorities","getDomainFromUrl","EnvironmentUtils","isProduction","isDevelopment","isAppServiceAuthEnabled","WebAppAuthClientBuilder","_BaseAuthClientBuilde","build","buildAsync","_buildAsync","keyVaultManager"],"mappings":"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"}