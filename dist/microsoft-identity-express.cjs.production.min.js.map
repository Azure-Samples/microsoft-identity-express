{"version":3,"file":"microsoft-identity-express.cjs.production.min.js","sources":["../src/utils/Constants.ts","../node_modules/regenerator-runtime/runtime.js","../src/config/ConfigHelper.ts","../src/client/BaseAuthClientBuilder.ts","../src/client/BaseAuthClient.ts","../src/packageMetadata.ts","../src/network/FetchManager.ts","../src/utils/UrlUtils.ts","../src/utils/CryptoUtils.ts","../src/client/webapp/MsalWebAppAuthClient.ts","../src/client/webapp/AppServiceWebAppAuthClient.ts","../src/network/KeyVaultManager.ts","../src/cache/DistributedCachePlugin.ts","../src/config/MsalConfiguration.ts","../src/utils/EnvironmentUtils.ts","../src/client/webapp/WebAppAuthClientBuilder.ts","../src/client/webapi/MsalWebApiAuthClient.ts","../src/client/webapi/WebApiAuthClientBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    LoggerOptions,\r\n    LogLevel,\r\n    OIDC_DEFAULT_SCOPES,\r\n} from \"@azure/msal-common\";\r\n\r\n/**\r\n * Basic authentication stages used to determine\r\n * appropriate action after redirect occurs\r\n */\r\nexport enum AppStages {\r\n    SIGN_IN = \"sign_in\",\r\n    SIGN_OUT = \"sign_out\",\r\n    ACQUIRE_TOKEN = \"acquire_token\",\r\n};\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\"\r\n}\r\n\r\n/**\r\n * String constants related credential type\r\n */\r\nexport enum KeyVaultCredentialTypes {\r\n    SECRET = \"clientSecret\",\r\n    CERTIFICATE = \"clientCertificate\",\r\n}\r\n\r\nexport const OIDC_SCOPES = [\r\n    ...OIDC_DEFAULT_SCOPES,\r\n    \"email\"\r\n]\r\n\r\n/**\r\n * Request headers used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationHeaders = {\r\n    APP_SERVICE_AUTHENTICATION_HEADER: \"X-MSAL-APP-SERVICE-AUTHENTICATION\",\r\n    APP_SERVICE_ACCESS_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ACCESS-TOKEN\",\r\n    APP_SERVICE_ID_TOKEN_HEADER: \"X-MS-TOKEN-AAD-ID-TOKEN\",\r\n    APP_SERVICE_REFRESH_TOKEN_HEADER: \"X-MS-TOKEN-AAD-REFRESH-TOKEN\",\r\n    APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER: \"X-MS-TOKEN-AAD-EXPIRES-ON\",\r\n    APP_SERVICE_USER_OID_HEADER: \"X-MS-CLIENT-PRINCIPAL-ID\",\r\n    APP_SERVICE_USER_UPN_HEADER: \"X-MS-CLIENT-PRINCIPAL-NAME\",\r\n    APP_SERVICE_IDP_X_HEADER: \"X-MS-CLIENT-PRINCIPAL-IDP\"\r\n}\r\n\r\n/**\r\n * Endpoints used by App Service authentication\r\n */\r\nexport const AppServiceAuthenticationEndpoints = {\r\n    ID_TOKEN_ENDPOINT: \"/.auth/me\",\r\n    POST_LOGOUT_DEFAULT_ENDPOINT: \"/.auth/logout/done\",\r\n    POST_LOGIN_DEFAULT_ENDPOINT: \"/.auth/login/done\",\r\n    AAD_SIGN_IN_ENDPOINT: \"/.auth/login/aad\",\r\n    AAD_SIGN_OUT_ENDPOINT: \"/.auth/logout\",\r\n    TOKEN_REFRESH_ENDPOINT: \"/.auth/refresh\",\r\n    AAD_REDIRECT_ENDPOINT: \"/.auth/login/aad/callback\",\r\n}\r\n\r\n/**\r\n * Query parameters used by App Service authentication endpoints\r\n */\r\nexport const AppServiceAuthenticationQueryParameters = {\r\n    POST_LOGIN_REDIRECT_QUERY_PARAM: \"?post_login_redirect_url=\",\r\n    POST_LOGOUT_REDIRECT_QUERY_PARAM: \"?post_logout_redirect_uri=\",\r\n}\r\n\r\n/**\r\n * Environment variables used by App Service authentication\r\n */\r\nexport const AppServiceEnvironmentVariables = {\r\n    WEBSITE_AUTH_ENABLED: \"WEBSITE_AUTH_ENABLED\",\r\n    WEBSITE_AUTH_ALLOWED_AUDIENCES: \"WEBSITE_AUTH_ALLOWED_AUDIENCES\",\r\n    WEBSITE_AUTH_DEFAULT_PROVIDER: \"WEBSITE_AUTH_DEFAULT_PROVIDER\",\r\n    WEBSITE_AUTH_TOKEN_STORE: \"WEBSITE_AUTH_TOKEN_STORE\",\r\n    WEBSITE_AUTH_LOGIN_PARAMS: \"WEBSITE_AUTH_LOGIN_PARAMS\",\r\n    WEBSITE_AUTH_PRESERVE_URL_FRAGMENT: \"WEBSITE_AUTH_PRESERVE_URL_FRAGMENT\",\r\n    WEBSITE_AUTH_OPENID_ISSUER: \"WEBSITE_AUTH_OPENID_ISSUER\",\r\n    WEBSITE_AUTH_CLIENT_ID: \"WEBSITE_AUTH_CLIENT_ID\",\r\n    WEBSITE_HOSTNAME: \"WEBSITE_HOSTNAME\",\r\n    WEBSITE_SITE_NAME: \"WEBSITE_SITE_NAME\",\r\n    WEBSITE_AUTH_REQUIRE_HTTPS: \"WEBSITE_AUTH_REQUIRE_HTTPS\",\r\n    WEBSITE_AUTH_UNAUTHENTICATED_ACTION: \"WEBSITE_AUTH_UNAUTHENTICATED_ACTION\",\r\n    WEBSITE_AUTH_API_PREFIX: \"WEBSITE_AUTH_API_PREFIX\",\r\n    MICROSOFT_PROVIDER_AUTHENTICATION_SECRET: \"MICROSOFT_PROVIDER_AUTHENTICATION_SECRET\",\r\n}\r\n\r\n/**\r\n * Constants used in access control scenarios\r\n */\r\nexport const AccessControlConstants = {\r\n    GROUPS: \"groups\",\r\n    ROLES: \"roles\",\r\n    CLAIM_NAMES: \"_claim_name\",\r\n    CLAIM_SOURCES: \"_claim_sources\",\r\n    PAGINATION_LINK: \"@odata.nextLink\",\r\n    GRAPH_MEMBERS_ENDPOINT: \"https://graph.microsoft.com/v1.0/me/memberOf\",\r\n    GRAPH_MEMBER_SCOPES: \"User.Read GroupMember.Read.All\"\r\n};\r\n\r\n/**\r\n * Various information constants\r\n */\r\nexport const InfoMessages = {\r\n    APP_SERVICE_AUTH_DETECTED: \"App Service Authentication detected\",\r\n    REQUEST_FOR_RESOURCE: \"Request made to web API\",\r\n    OVERAGE_OCCURRED: \"User has too many groups. Groups overage claim occurred\"\r\n}\r\n\r\n/**\r\n * Various error constants\r\n */\r\nexport const ErrorMessages = {\r\n    NOT_PERMITTED: \"Not permitted\",\r\n    INVALID_TOKEN: \"Invalid token\",\r\n    CANNOT_DETERMINE_APP_STAGE: \"Cannot determine application stage\",\r\n    CANNOT_VALIDATE_TOKEN: \"Cannot validate token\",\r\n    NONCE_MISMATCH: \"Nonce does not match\",\r\n    INTERACTION_REQUIRED: \"interaction_required\",\r\n    TOKEN_ACQUISITION_FAILED: \"Token acquisition failed\",\r\n    AUTH_CODE_NOT_OBTAINED: \"Authorization code cannot be obtained\",\r\n    TOKEN_NOT_FOUND: \"No token found\",\r\n    TOKEN_NOT_DECODED: \"Token cannot be decoded\",\r\n    TOKEN_NOT_VERIFIED: \"Token cannot be verified\",\r\n    KEYS_NOT_OBTAINED: \"Signing keys cannot be obtained\",\r\n    STATE_NOT_FOUND: \"State not found\",\r\n    USER_HAS_NO_ROLE: \"User does not have any roles\",\r\n    USER_NOT_IN_ROLE: \"User does not have this role\",\r\n    USER_HAS_NO_GROUP: \"User does not have any groups\",\r\n    USER_NOT_IN_GROUP: \"User does not have this group\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed for this route\",\r\n    RULE_NOT_FOUND: \"No rule found for this route\",\r\n    SESSION_NOT_FOUND: \"No session found for this request\",\r\n    KEY_VAULT_CONFIG_NOT_FOUND: \"No coordinates found for Key Vault\"\r\n};\r\n\r\n/**\r\n * Various configuration error constants\r\n */\r\nexport const ConfigurationErrorMessages = {\r\n    NO_CLIENT_ID: \"No clientId provided!\",\r\n    INVALID_CLIENT_ID: \"Invalid clientId!\",\r\n    NO_TENANT_INFO: \"No tenant info provided!\",\r\n    INVALID_TENANT_INFO: \"Invalid tenant info!\",\r\n    NO_CLIENT_CREDENTIAL: \"No client credential provided!\",\r\n    NO_REDIRECT_URI: \"No redirect URI provided!\",\r\n    NO_ERROR_ROUTE: \"No error route provided!\",\r\n    NO_UNAUTHORIZED_ROUTE: \"No unauthorized route provided!\"\r\n}\r\n\r\n/**\r\n * For more information, visit: https://login.microsoftonline.com/error\r\n */\r\nexport const ErrorCodes = {\r\n    65001: \"AADSTS65001\", // consent required\r\n    50076: \"AADSTS50076\", // mfa required\r\n    50079: \"AADSTS50079\", // mfa enrollment required\r\n    50001: \"AADSTS50001\", // invalid resource uri\r\n    65004: \"AADSTS65004\", // user declined consent\r\n    70011: \"AADSTS70011\", // invalid scope\r\n    700022: \"AADSTS700022\", // multiple resources\r\n    700020: \"AADSTS700020\", // interaction required\r\n    90118: \"AADB2C90118\", // password forgotten (B2C)\r\n};\r\n\r\nexport const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (logLevel, message, containsPii) => {\r\n        if (containsPii) {\r\n            return;\r\n        }\r\n        console.info(message);\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n};","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport { AADAuthorityConstants, ConfigurationErrorMessages, OIDC_SCOPES } from \"../utils/Constants\";\r\nimport { AppSettings, Resource } from \"./AppSettings\";\r\n\r\nexport class ConfigHelper {\r\n\r\n    /**\r\n     * Validates the fields in the configuration file\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @returns {void}\r\n     */\r\n    static validateAppSettings(appSettings: AppSettings): void {\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_ID);\r\n        } else if (!ConfigHelper.isGuid(appSettings.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_CLIENT_ID);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.appCredentials.tenantId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_TENANT_INFO);\r\n        } else if (!ConfigHelper.isGuid(appSettings.appCredentials.tenantId) && !Object.values(AADAuthorityConstants).includes(appSettings.appCredentials.tenantId)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_TENANT_INFO);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.authRoutes.redirect)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_REDIRECT_URI);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.authRoutes.error)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_ERROR_ROUTE);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(appSettings.authRoutes.unauthorized)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_UNAUTHORIZED_ROUTE);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Verifies if a string is GUID\r\n     * @param {string} guid\r\n     * @returns {boolean}\r\n     */\r\n    static isGuid(guid: string): boolean {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n\r\n    /**\r\n     * Util method to get the resource name for a given scope(s)\r\n     * @param {Array} scopes: an array of scopes that the resource is associated with\r\n     * @param {AppSettings} appSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getResourceNameFromScopes(scopes: string[], appSettings: AppSettings): string {\r\n        const index = Object.values({ ...appSettings.protectedResources, ...appSettings.ownedResources })\r\n            .findIndex((resource: Resource) => JSON.stringify(resource.scopes) === JSON.stringify(scopes));\r\n\r\n        const resourceName = Object.keys({ ...appSettings.protectedResources, ...appSettings.ownedResources })[index];\r\n\r\n        return resourceName;\r\n    };\r\n\r\n    /**\r\n     * Util method to get the scopes for a given resource name\r\n     * @param {string} resourceEndpoint: the resource name\r\n     * @param {AppSettings} appSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getScopesFromResourceEndpoint(resourceEndpoint: string, appSettings: AppSettings): string[] {\r\n        const scopes = Object.values({ ...appSettings.protectedResources, ...appSettings.ownedResources })\r\n            .find((resource: Resource) => resource.endpoint === resourceEndpoint).scopes;\r\n\r\n        return scopes;\r\n    };\r\n\r\n    static getEffectiveScopes(scopesList: string[]): string[] {\r\n        const effectiveScopesList = scopesList.filter(scope => !OIDC_SCOPES.includes(scope));\r\n        return effectiveScopesList;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICachePlugin } from \"@azure/msal-node\";\r\n\r\nimport { IDistributedPersistence } from \"../cache/IDistributedPersistence\";\r\nimport { ConfigHelper } from \"../config/ConfigHelper\";\r\nimport { AppSettings, KeyVaultCredential } from \"../config/AppSettings\";\r\n\r\nexport abstract class BaseAuthClientBuilder {\r\n\r\n    appSettings: AppSettings;\r\n    protected persistenceManager: IDistributedPersistence;\r\n    protected keyVaultCredential: KeyVaultCredential;\r\n    protected customCachePlugin: ICachePlugin;\r\n\r\n    protected constructor(appSettings: AppSettings) {\r\n        ConfigHelper.validateAppSettings(appSettings);\r\n        this.appSettings = appSettings;\r\n    };\r\n\r\n    withKeyVaultCredentials(keyVaultCredential: KeyVaultCredential): BaseAuthClientBuilder {\r\n        this.keyVaultCredential = keyVaultCredential;\r\n        return this;\r\n    }\r\n\r\n    withCustomCachePlugin(cachePlugin: ICachePlugin): BaseAuthClientBuilder {\r\n        this.customCachePlugin = cachePlugin;\r\n        return this;\r\n    }\r\n    \r\n    withDistributedTokenCache(persistenceManager: IDistributedPersistence): BaseAuthClientBuilder {\r\n        this.persistenceManager = persistenceManager;\r\n        return this;\r\n    }\r\n\r\n    abstract build(): any;\r\n\r\n    abstract buildAsync(): Promise<any>;\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common\";\r\n\r\nimport {\r\n    ConfidentialClientApplication,\r\n    Configuration,\r\n    CryptoProvider,\r\n} from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"../config/AppSettings\";\r\n\r\nimport {\r\n    packageName,\r\n    packageVersion\r\n} from \"../packageMetadata\";\r\n\r\nexport abstract class BaseAuthClient {\r\n\r\n    appSettings: AppSettings;\r\n    protected msalConfig: Configuration;\r\n    protected msalClient: ConfidentialClientApplication;\r\n    protected cryptoProvider: CryptoProvider;\r\n    protected logger: Logger;\r\n\r\n    protected constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        this.appSettings = appSettings;\r\n        this.msalConfig = msalConfig;\r\n        this.cryptoProvider = new CryptoProvider();\r\n        this.logger = new Logger(this.msalConfig.system.loggerOptions, packageName, packageVersion);\r\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\r\n    }\r\n\r\n    getMsalClient(): ConfidentialClientApplication {\r\n        return this.msalClient;\r\n    }\r\n\r\n    getMsalConfig(): Configuration {\r\n        return this.msalConfig;\r\n    }\r\n\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n}","export const packageName = \"@azure-samples/microsoft-identity-express\";\r\nexport const packageVersion = \"beta\";","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport {\r\n    AccessControlConstants,\r\n    ErrorMessages\r\n} from \"../utils/Constants\";\r\n\r\nexport class FetchManager {\r\n\r\n    /**\r\n     * Calls a resource endpoint\r\n     * @param {string} endpoint\r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpoint = async (endpoint: string): Promise<AxiosResponse> => {\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint);\r\n            return response.data;\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls a resource endpoint with a raw access token\r\n     * using the authorization bearer token scheme\r\n     * @param {string} endpoint \r\n     * @param {string} accessToken \r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpointWithToken = async (endpoint: string, accessToken: string): Promise<AxiosResponse> => {\r\n\r\n        if (StringUtils.isEmpty(accessToken)) {\r\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND)\r\n        }\r\n\r\n        const options: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint, options);\r\n            return response.data;\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles queries against Microsoft Graph that return multiple pages of data  \r\n     * @param {string} accessToken: access token required by endpoint \r\n     * @param {string} nextPage: next page link\r\n     * @param {Array} data: stores data from each page\r\n     * @returns {Promise}\r\n     */\r\n    static handlePagination = async (accessToken: string, nextPage: string, data: string[] = []): Promise<string[]> => {\r\n\r\n        try {\r\n            const graphResponse = await FetchManager.callApiEndpointWithToken(nextPage, accessToken);\r\n            graphResponse[\"value\"].map((v) => data.push(v.id));\r\n\r\n            if (graphResponse[AccessControlConstants.PAGINATION_LINK]) {\r\n                return await FetchManager.handlePagination(accessToken, graphResponse[AccessControlConstants.PAGINATION_LINK], data)\r\n            } else {\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Request } from \"express\";\r\nimport { IUri, UrlString } from \"@azure/msal-common\";\r\n\r\nexport class UrlUtils {\r\n    /**\r\n     * Gets the absolute URL from a given request and path string\r\n     * @param {Request} req: express request object \r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static ensureAbsoluteUrl = (req: Request, url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n\r\n        if (!urlComponents.Protocol) {\r\n            if (!urlComponents.HostNameAndPort && !url.startsWith(\"www\")) {\r\n                if (!url.startsWith(\"/\")) {\r\n                    return req.protocol + \"://\" + req.get(\"host\") + \"/\" + url;\r\n                }\r\n                return req.protocol + \"://\" + req.get(\"host\") + url;\r\n            }\r\n            return req.protocol + \"://\" + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the path segment from a given URL\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static getPathFromUrl = (url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n        return `/${urlComponents.PathSegments.join(\"/\")}`;\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n\r\nimport * as crypto from \"crypto\";\r\n\r\n\r\n\r\nexport class CryptoUtils {\r\n\r\n    algorithm: string;\r\n\r\n    constructor(algorithm: string = \"aes-192-cbc\") {\r\n        this.algorithm = algorithm;\r\n    }\r\n\r\n    generateSalt(): string {\r\n        return crypto.randomBytes(20).toString('hex');\r\n    }\r\n\r\n    createKey(password, salt): Buffer {\r\n        return crypto.scryptSync(password, salt, 24);\r\n    }\r\n\r\n    encryptData(stringifiedData, key): string {\r\n        const iv = crypto.randomBytes(16);\r\n        const cipher = crypto.createCipheriv(this.algorithm, key, iv);\r\n        const encryptedData = cipher.update(stringifiedData, 'utf8', 'hex');\r\n\r\n        return [iv.toString(\"hex\"), encryptedData + cipher.final('hex')].join(\".\");\r\n    }\r\n\r\n    decryptData(encryptedData, key): string {\r\n        const [iv, encrypted] = encryptedData.split(\".\");\r\n        const decipher = crypto.createDecipheriv(this.algorithm, key, Buffer.from(iv, \"hex\"));\r\n        return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, {\r\n    RequestHandler,\r\n    Request,\r\n    Response,\r\n    NextFunction,\r\n    Router\r\n} from \"express\";\r\n\r\nimport {\r\n    OIDC_DEFAULT_SCOPES,\r\n    InteractionRequiredAuthError,\r\n    StringUtils,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    Configuration,\r\n    SilentFlowRequest,\r\n    AuthenticationResult\r\n} from \"@azure/msal-node\";\r\n\r\n\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { IdTokenClaims } from \"../../utils/Types\";\r\nimport { FetchManager } from \"../../network/FetchManager\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { CryptoUtils } from \"../../utils/CryptoUtils\"\r\n\r\nimport {\r\n    Resource,\r\n    AppSettings,\r\n    AccessRule,\r\n} from \"../../config/AppSettings\";\r\n\r\nimport { AuthCodeParams } from \"../../utils/Types\";\r\n\r\nimport {\r\n    InitializationOptions,\r\n    TokenRequestOptions,\r\n    GuardOptions,\r\n    SignInOptions,\r\n    SignOutOptions,\r\n    HandleRedirectOptions\r\n} from \"../MiddlewareOptions\";\r\n\r\nimport {\r\n    AppStages,\r\n    ErrorMessages,\r\n    AccessControlConstants,\r\n    InfoMessages\r\n} from \"../../utils/Constants\";\r\n\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in Express MVC web apps\r\n */\r\nexport class MsalWebAppAuthClient extends BaseAuthClient {\r\n    \r\n    private cryptoUtils: CryptoUtils;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n        this.cryptoUtils = new CryptoUtils();\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(options?: InitializationOptions): Router {\r\n\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect), this.handleRedirect());\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction) => {\r\n\r\n            if (!req.session) {\r\n                // TODO: handle gracefully\r\n                throw new Error(ErrorMessages.SESSION_NOT_FOUND);\r\n            }\r\n\r\n            // add session nonce for crsf\r\n            req.session.nonce = this.cryptoProvider.createNewGuid();\r\n            next();\r\n        });\r\n\r\n        if (this.appSettings.authRoutes.frontChannelLogout) {\r\n            /**\r\n             * Expose front-channel logout route. For more information, visit: \r\n             * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\r\n             */\r\n            appRouter.get(this.appSettings.authRoutes.frontChannelLogout, (req: Request, res: Response, next: NextFunction) => {\r\n                req.session.destroy(() => {\r\n                    res.sendStatus(200);\r\n                });\r\n            });\r\n        }\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(options?: SignInOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            const key = this.cryptoUtils.createKey(req.session.nonce, this.cryptoUtils.generateSalt());\r\n            req.session.key = key.toString(\"hex\");\r\n\r\n            const state = this.cryptoProvider.base64Encode(\r\n                this.cryptoUtils.encryptData(JSON.stringify({\r\n                    stage: AppStages.SIGN_IN,\r\n                    path: options.postLoginRedirect,\r\n                    nonce: req.session.nonce,\r\n                }), key)\r\n            );\r\n\r\n            const params: AuthCodeParams = {\r\n                authority: this.msalConfig.auth.authority,\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n                state: state,\r\n                redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect)\r\n            };\r\n\r\n            // get url to sign user in\r\n            return this.getAuthCode(req, res, next, params);\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param options: options to modify logout request \r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(options?: SignOutOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n\r\n            /**\r\n             * Construct a logout URI and redirect the user to end the\r\n             * session with Azure AD/B2C. For more information, visit:\r\n             * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\r\n             * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\r\n             */\r\n            const logoutUri = `${this.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @param {HandleRedirectOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(options?: HandleRedirectOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            // TODO: handle form_post method\r\n\r\n            if (req.query.state) {\r\n                const state = JSON.parse(this.cryptoUtils.decryptData(this.cryptoProvider.base64Decode(req.query.state as string), Buffer.from(req.session.key, \"hex\")));\r\n\r\n                // check if nonce matches\r\n                if (state.nonce === req.session.nonce) {\r\n                    switch (state.stage) {\r\n                        case AppStages.SIGN_IN: {\r\n                            // token request should have auth code\r\n                            req.session.tokenRequest.code = req.query.code as string;\r\n\r\n                            try {\r\n                                // exchange auth code for tokens\r\n                                const tokenResponse: AuthenticationResult = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n                                req.session.isAuthenticated = true;\r\n                                req.session.account = tokenResponse.account;\r\n                                res.redirect(state.path);\r\n                            } catch (error) {\r\n                                this.logger.error(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                next(error)\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        case AppStages.ACQUIRE_TOKEN: {\r\n                            // get the name of the resource associated with scope\r\n                            const resourceName = ConfigHelper.getResourceNameFromScopes(req.session.tokenRequest.scopes, this.appSettings);\r\n\r\n                            req.session.tokenRequest.code = req.query.code as string;\r\n\r\n                            try {\r\n                                const tokenResponse: AuthenticationResult = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n                                req.session.protectedResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                                res.redirect(state.path);\r\n                            } catch (error) {\r\n                                this.logger.error(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                            this.logger.error(ErrorMessages.CANNOT_DETERMINE_APP_STAGE);\r\n                            res.redirect(this.appSettings.authRoutes.error);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    this.logger.error(ErrorMessages.NONCE_MISMATCH);\r\n                    res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n            } else {\r\n                this.logger.error(ErrorMessages.STATE_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that gets tokens via acquireToken*\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(scopes, this.appSettings)\r\n\r\n            if (!req.session.protectedResources) {\r\n                req.session.protectedResources = {}\r\n            }\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.appSettings.protectedResources[resourceName],\r\n                    accessToken: null,\r\n                } as Resource\r\n            };\r\n\r\n            try {\r\n                const silentRequest: SilentFlowRequest = {\r\n                    account: req.session.account,\r\n                    scopes: scopes,\r\n                };\r\n\r\n                // acquire token silently to be used in resource call\r\n                const tokenResponse: AuthenticationResult = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n                // In B2C scenarios, sometimes an access token is returned empty.\r\n                // In that case, we will acquire token interactively instead.\r\n                if (StringUtils.isEmpty(tokenResponse.accessToken)) {\r\n                    this.logger.error(ErrorMessages.TOKEN_NOT_FOUND);\r\n                    throw new InteractionRequiredAuthError(ErrorMessages.INTERACTION_REQUIRED);\r\n                }\r\n\r\n                req.session.protectedResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                // in case there are no cached tokens, initiate an interactive call\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    \r\n                    const key = this.cryptoUtils.createKey(req.session.nonce, this.cryptoUtils.generateSalt());\r\n                    req.session.key = key.toString(\"hex\");\r\n\r\n                    const state = this.cryptoProvider.base64Encode(\r\n                        this.cryptoUtils.encryptData(JSON.stringify({\r\n                            stage: AppStages.ACQUIRE_TOKEN,\r\n                            path: req.originalUrl,\r\n                            nonce: req.session.nonce,\r\n                        }), key)\r\n                    );\r\n\r\n                    const params: AuthCodeParams = {\r\n                        authority: this.msalConfig.auth.authority,\r\n                        scopes: scopes,\r\n                        state: state,\r\n                        redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect),\r\n                        account: req.session.account,\r\n                    };\r\n\r\n                    // initiate the first leg of auth code grant to get token\r\n                    return this.getAuthCode(req, res, next, params);\r\n                } else {\r\n                    next(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(options?: GuardOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (req.session) {\r\n                if (!req.session.isAuthenticated) {\r\n                    this.logger.error(ErrorMessages.NOT_PERMITTED);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if the user has access for this route, defined in access matrix\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    hasAccess(options?: GuardOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (req.session && this.appSettings.accessMatrix) {\r\n\r\n                const checkFor = options.accessRule.hasOwnProperty(AccessControlConstants.GROUPS) ? AccessControlConstants.GROUPS : AccessControlConstants.ROLES;\r\n\r\n                switch (checkFor) {\r\n                    case AccessControlConstants.GROUPS:\r\n\r\n                        if (req.session.account.idTokenClaims[AccessControlConstants.GROUPS] === undefined) {\r\n                            if (req.session.account.idTokenClaims[AccessControlConstants.CLAIM_NAMES]\r\n                                || req.session.account.idTokenClaims[AccessControlConstants.CLAIM_SOURCES]) {\r\n                                this.logger.warning(InfoMessages.OVERAGE_OCCURRED);\r\n                                return await this.handleOverage(req, res, next, options.accessRule);\r\n                            } else {\r\n                                this.logger.error(ErrorMessages.USER_HAS_NO_GROUP);\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        } else {\r\n                            const groups = req.session.account.idTokenClaims[AccessControlConstants.GROUPS];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, groups, AccessControlConstants.GROUPS)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    case AccessControlConstants.ROLES:\r\n                        if (req.session.account.idTokenClaims[AccessControlConstants.ROLES] === undefined) {\r\n                            this.logger.error(ErrorMessages.USER_HAS_NO_ROLE);\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            const roles = req.session.account.idTokenClaims[AccessControlConstants.ROLES];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, roles, AccessControlConstants.ROLES)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            } else {\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============== UTILS ===============\r\n\r\n    /**\r\n     * This method is used to generate an auth code url request\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AuthCodeParams} params: modifies auth code url request\r\n     * @returns {Promise}\r\n     */\r\n    private async getAuthCode(req: Request, res: Response, next: NextFunction, params: AuthCodeParams): Promise<void> {\r\n\r\n        // prepare the request\r\n        req.session.authCodeRequest = {\r\n            authority: params.authority,\r\n            scopes: params.scopes,\r\n            state: params.state,\r\n            redirectUri: params.redirect,\r\n            prompt: params.prompt,\r\n            account: params.account,\r\n        }\r\n\r\n        req.session.tokenRequest = {\r\n            authority: params.authority,\r\n            scopes: params.scopes,\r\n            redirectUri: params.redirect,\r\n            code: undefined,\r\n        }\r\n\r\n        // request an authorization code to exchange for tokens\r\n        try {\r\n            const response = await this.msalClient.getAuthCodeUrl(req.session.authCodeRequest);\r\n            res.redirect(response);\r\n        } catch (error) {\r\n            this.logger.error(ErrorMessages.AUTH_CODE_NOT_OBTAINED);\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles group overage claims by querying MS Graph /memberOf endpoint\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AccessRule} rule: a given access rule\r\n     * @returns {Promise}\r\n     */\r\n    private async handleOverage(req: Request, res: Response, next: NextFunction, rule: AccessRule): Promise<void> {\r\n        const { _claim_names, _claim_sources, ...newIdTokenClaims } = <IdTokenClaims>req.session.account.idTokenClaims;\r\n\r\n        const silentRequest: SilentFlowRequest = {\r\n            account: req.session.account,\r\n            scopes: AccessControlConstants.GRAPH_MEMBER_SCOPES.split(\" \"),\r\n        };\r\n\r\n        try {\r\n            // acquire token silently to be used in resource call\r\n            const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n            try {\r\n                const graphResponse = await FetchManager.callApiEndpointWithToken(AccessControlConstants.GRAPH_MEMBERS_ENDPOINT, tokenResponse.accessToken);\r\n\r\n                /**\r\n                 * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging \r\n                 * or due to the use of the $top query parameter to specifically limit the page size in a request. \r\n                 * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in \r\n                 * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\r\n                 */\r\n                if (graphResponse[AccessControlConstants.PAGINATION_LINK]) {\r\n                    try {\r\n                        const userGroups = await FetchManager.handlePagination(tokenResponse.accessToken, graphResponse[AccessControlConstants.PAGINATION_LINK]);\r\n\r\n                        req.session.account.idTokenClaims = {\r\n                            ...newIdTokenClaims,\r\n                            groups: userGroups\r\n                        }\r\n\r\n                        if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessControlConstants.GROUPS], AccessControlConstants.GROUPS)) {\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            return next();\r\n                        }\r\n                    } catch (error) {\r\n                        next(error);\r\n                    }\r\n                } else {\r\n                    req.session.account.idTokenClaims = {\r\n                        ...newIdTokenClaims,\r\n                        groups: graphResponse[\"value\"].map((v) => v.id)\r\n                    }\r\n\r\n                    if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessControlConstants.GROUPS], AccessControlConstants.GROUPS)) {\r\n                        return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        } catch (error) {\r\n            // TODO: handle silent token acquisition error\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if the request passes a given access rule\r\n     * @param {string} method: HTTP method for this route\r\n     * @param {AccessRule} rule: access rule for this route\r\n     * @param {Array} creds: user's credentials i.e. roles or groups\r\n     * @param {string} credType: roles or groups\r\n     * @returns {boolean}\r\n     */\r\n    private checkAccessRule(method: string, rule: AccessRule, creds: string[], credType: string): boolean {\r\n        if (rule.methods.includes(method)) {\r\n            switch (credType) {\r\n                case AccessControlConstants.GROUPS:\r\n                    if (rule.groups.filter(elem => creds.includes(elem)).length < 1) {\r\n                        this.logger.error(ErrorMessages.USER_NOT_IN_GROUP);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case AccessControlConstants.ROLES:\r\n                    if (rule.roles.filter(elem => creds.includes(elem)).length < 1) {\r\n                        this.logger.error(ErrorMessages.USER_NOT_IN_ROLE);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            this.logger.error(ErrorMessages.METHOD_NOT_ALLOWED);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, {\r\n    Router,\r\n    RequestHandler,\r\n    Request,\r\n    Response,\r\n    NextFunction\r\n} from \"express\";\r\n\r\nimport { AccountInfo, AuthToken } from \"@azure/msal-common\";\r\n\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { AccessTokenClaims, IdTokenClaims } from \"../../utils/Types\";\r\nimport { AppSettings, Resource } from \"../../config/AppSettings\";\r\nimport { ConfigHelper } from \"../../config/ConfigHelper\";\r\nimport { UrlUtils } from \"../../utils/UrlUtils\";\r\nimport { CryptoUtils } from \"../../utils/CryptoUtils\"\r\n\r\n\r\nimport {\r\n    GuardOptions,\r\n    HandleRedirectOptions,\r\n    InitializationOptions,\r\n    SignInOptions,\r\n    SignOutOptions,\r\n    TokenRequestOptions\r\n} from \"../MiddlewareOptions\";\r\n\r\nimport {\r\n    AppServiceAuthenticationHeaders,\r\n    AppServiceEnvironmentVariables,\r\n    AppServiceAuthenticationEndpoints,\r\n    AppServiceAuthenticationQueryParameters,\r\n    ErrorMessages\r\n} from \"../../utils/Constants\";\r\n\r\nexport class AppServiceWebAppAuthClient extends BaseAuthClient {\r\n\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(options?: InitializationOptions): Router {\r\n\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect), this.handleRedirect());\r\n        appRouter.post(UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect), this.handleRedirect());\r\n        \r\n        appRouter.use((req: Request, res: Response, next: NextFunction): void => {\r\n\r\n            \r\n            if (!req.session.isAuthenticated) {\r\n                // check headers for id token\r\n                const rawIdToken = req.headers[AppServiceAuthenticationHeaders.APP_SERVICE_ID_TOKEN_HEADER.toLowerCase()] as string;\r\n\r\n                if (rawIdToken) {\r\n\r\n                    // parse the id token\r\n                    const idTokenClaims: IdTokenClaims = AuthToken.extractTokenClaims(rawIdToken, this.cryptoProvider);\r\n\r\n                    req.session.isAuthenticated = true;\r\n\r\n                    req.session.account = {\r\n                        tenantId: idTokenClaims.tid,\r\n                        homeAccountId: idTokenClaims.oid + \".\" + idTokenClaims.tid,\r\n                        localAccountId: idTokenClaims.oid,\r\n                        environment: idTokenClaims.iss.split(\"://\")[1].split(\"/\")[0],\r\n                        username: idTokenClaims.preferred_username,\r\n                        name: idTokenClaims.name,\r\n                        idTokenClaims: idTokenClaims\r\n                    } as AccountInfo;\r\n                }\r\n            }\r\n\r\n            next();\r\n        });\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(options?: SignInOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            let loginUri;\r\n            const postLoginRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLoginRedirect);\r\n            loginUri = \"https://\" + process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] + AppServiceAuthenticationEndpoints.AAD_SIGN_IN_ENDPOINT + AppServiceAuthenticationQueryParameters.POST_LOGIN_REDIRECT_QUERY_PARAM + postLoginRedirectUri;\r\n            res.redirect(loginUri);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param options: options to modify logout request \r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(options?: SignOutOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.postLogoutRedirect);\r\n            const logoutUri = \"https://\" + process.env[AppServiceEnvironmentVariables.WEBSITE_HOSTNAME] + AppServiceAuthenticationEndpoints.AAD_SIGN_OUT_ENDPOINT + AppServiceAuthenticationQueryParameters.POST_LOGOUT_REDIRECT_QUERY_PARAM + postLogoutRedirectUri;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutUri);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @param {HandleRedirectOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect(options?: HandleRedirectOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            // get scopes for token request\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(options.resource.scopes, this.appSettings)\r\n\r\n            if (!req.session.protectedResources) {\r\n                req.session.protectedResources = {}\r\n            }\r\n\r\n            req.session.protectedResources = {\r\n                [resourceName]: {\r\n                    ...this.appSettings.protectedResources[resourceName],\r\n                    accessToken: null,\r\n                } as Resource\r\n            };\r\n\r\n            const rawAccessToken = req.headers[AppServiceAuthenticationHeaders.APP_SERVICE_ACCESS_TOKEN_HEADER.toLowerCase()] as string;\r\n\r\n            if (rawAccessToken) {\r\n\r\n                const accessTokenClaims: AccessTokenClaims = AuthToken.extractTokenClaims(rawAccessToken, this.cryptoProvider);\r\n\r\n                // get the name of the resource associated with scope\r\n                const scopes = accessTokenClaims.scp.split(\" \");\r\n                const effectiveScopes = ConfigHelper.getEffectiveScopes(scopes);\r\n\r\n                if (options.resource.scopes.every(elem => effectiveScopes.includes(elem))) {\r\n                    req.session.protectedResources[resourceName].accessToken = rawAccessToken;\r\n                    return next();\r\n                } else {\r\n                    return next(new Error(\"No tokens found for given scopes\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(options?: GuardOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (req.session) {\r\n                if (!req.session.isAuthenticated) {\r\n                    this.logger.error(ErrorMessages.NOT_PERMITTED);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { CertificateClient, KeyVaultCertificate } from \"@azure/keyvault-certificates\";\r\nimport { KeyVaultSecret, SecretClient } from \"@azure/keyvault-secrets\";\r\n\r\nimport { KeyVaultCredential, ClientCertificate } from \"../config/AppSettings\";\r\nimport { KeyVaultCredentialTypes } from \"../utils/Constants\";\r\n\r\nexport type KeyVaultCredentialResponse = {\r\n    type: KeyVaultCredentialTypes.SECRET | KeyVaultCredentialTypes.CERTIFICATE,\r\n    value: string & ClientCertificate\r\n}\r\n\r\nexport class KeyVaultManager {\r\n\r\n    /**\r\n     * Fetches credentials from Key Vault and updates appSettings\r\n     * @param {AppSettings} appSettings \r\n     * @returns {Promise}\r\n     */\r\n    async getCredentialFromKeyVault(keyVaultCredential: KeyVaultCredential): Promise<KeyVaultCredentialResponse> {\r\n\r\n        const credential = new DefaultAzureCredential();\r\n\r\n        switch (keyVaultCredential.credentialType) {\r\n            case KeyVaultCredentialTypes.SECRET: {\r\n                try {\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    return {\r\n                        type: KeyVaultCredentialTypes.SECRET,\r\n                        value: secretResponse.value,\r\n                    } as KeyVaultCredentialResponse;\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case KeyVaultCredentialTypes.CERTIFICATE: {\r\n                try {\r\n                    const certificateResponse = await this.getCertificateCredential(keyVaultCredential, credential);\r\n                    const secretResponse = await this.getSecretCredential(keyVaultCredential, credential);\r\n\r\n                    return {\r\n                        type: KeyVaultCredentialTypes.CERTIFICATE,\r\n                        value: {\r\n                            thumbprint: certificateResponse.properties.x509Thumbprint.toString(),\r\n                            privateKey: secretResponse.value.split('-----BEGIN CERTIFICATE-----\\n')[0]\r\n                        }\r\n                    } as KeyVaultCredentialResponse;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets a certificate credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getCertificateCredential(keyVaultCredential: KeyVaultCredential, credential: DefaultAzureCredential): Promise<KeyVaultCertificate> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new CertificateClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultCertificate = await secretClient.getCertificate(keyVaultCredential.credentialName);\r\n            return keyVaultCertificate;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a secret credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getSecretCredential(keyVaultCredential: KeyVaultCredential, credential: DefaultAzureCredential): Promise<KeyVaultSecret> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new SecretClient(keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultSecret = await secretClient.getSecret(keyVaultCredential.credentialName);\r\n            return keyVaultSecret;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICachePlugin } from \"@azure/msal-node\";\r\nimport { IDistributedPersistence } from \"./IDistributedPersistence\";\r\n\r\nexport class DistributedCachePlugin implements ICachePlugin {\r\n\r\n    private static instance: DistributedCachePlugin;\r\n\r\n    private persistenceManager: IDistributedPersistence;\r\n    private persistenceKey: string;\r\n\r\n    private constructor(persistenceManager: IDistributedPersistence, persistenceKey?: string) {\r\n        this.persistenceManager = persistenceManager;\r\n        this.persistenceKey = persistenceKey;\r\n    }\r\n\r\n    static getInstance(persistenceManager: IDistributedPersistence, persistenceKey?: string): DistributedCachePlugin {\r\n        if (!DistributedCachePlugin.instance) {\r\n            DistributedCachePlugin.instance = new DistributedCachePlugin(persistenceManager, persistenceKey);\r\n        }\r\n\r\n        return DistributedCachePlugin.instance;\r\n    }\r\n\r\n    async beforeCacheAccess(cacheContext): Promise<void> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const sessionData = await this.persistenceManager.get(this.persistenceKey);\r\n            if (sessionData) {\r\n                const cacheData = await this.persistenceManager.get(JSON.parse(sessionData).account.homeAccountId);\r\n                cacheContext.tokenCache.deserialize(cacheData);\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    async afterCacheAccess(cacheContext): Promise<void> {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (cacheContext.cacheHasChanged) {\r\n                const kvStore = cacheContext.tokenCache.getKVStore();\r\n                const homeAccountId = Object.values(kvStore)[1][\"homeAccountId\"];\r\n                await this.persistenceManager.set(homeAccountId, cacheContext.tokenCache.serialize());\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    UrlString,\r\n    Constants,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    ICachePlugin,\r\n    Configuration\r\n} from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"./AppSettings\";\r\n\r\nimport {\r\n    DEFAULT_LOGGER_OPTIONS\r\n} from \"../utils/Constants\"\r\n\r\nimport { IDistributedPersistence } from \"../cache/IDistributedPersistence\";\r\nimport { DistributedCachePlugin } from \"../cache/DistributedCachePlugin\";\r\n\r\nexport class MsalConfiguration {\r\n\r\n    /**\r\n     * Maps the custom configuration object to configuration\r\n     * object expected by MSAL Node ConfidentialClientApplication class\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @param {ICachePlugin} cachePlugin: custom cache plugin\r\n     * @param {IDistributedPersistence} distributedPersistence: distributed persistence client\r\n     * @returns {Configuration}\r\n     */\r\n    static getMsalConfiguration(appSettings: AppSettings, persistenceManager?: IDistributedPersistence): Configuration {\r\n        return {\r\n            auth: {\r\n                clientId: appSettings.appCredentials.clientId,\r\n                authority: appSettings.b2cPolicies ?\r\n                    Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"] // the first policy/user-flow is the default authority\r\n                    :\r\n                    appSettings.appCredentials.instance ? `https://${appSettings.appCredentials.instance}/${appSettings.appCredentials.tenantId}` \r\n                    :\r\n                    `https://${Constants.DEFAULT_AUTHORITY_HOST}/${appSettings.appCredentials.tenantId}`,\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientSecret\")) && { clientSecret: appSettings.appCredentials.clientSecret },\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientCertificate\")) && { clientCertificate: appSettings.appCredentials.clientCertificate },\r\n                knownAuthorities: appSettings.b2cPolicies ?\r\n                    [UrlString.getDomainFromUrl(Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"])] // in B2C scenarios\r\n                    :\r\n                    [],\r\n            },\r\n            cache: {\r\n                cachePlugin: persistenceManager ? DistributedCachePlugin.getInstance(persistenceManager) : null\r\n            },\r\n            system: {\r\n                loggerOptions: appSettings.loggerOptions ? appSettings.loggerOptions : DEFAULT_LOGGER_OPTIONS,\r\n            },\r\n        };\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AppServiceEnvironmentVariables,\r\n} from \"./Constants\";\r\n\r\nexport class EnvironmentUtils {\r\n    static isProduction(): boolean {\r\n        return process.env.NODE_ENV === 'production';\r\n    }\r\n\r\n    static isDevelopment(): boolean {\r\n        return process.env.NODE_ENV === 'development';\r\n    }\r\n\r\n    static isAppServiceAuthEnabled(): boolean {\r\n        return process.env[AppServiceEnvironmentVariables.WEBSITE_AUTH_ENABLED] === \"True\";\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClientBuilder } from \"../BaseAuthClientBuilder\";\r\nimport { MsalWebAppAuthClient } from \"./MsalWebAppAuthClient\";\r\nimport { AppServiceWebAppAuthClient } from \"./AppServiceWebAppAuthClient\";\r\nimport { KeyVaultManager } from \"../../network/KeyVaultManager\";\r\nimport { MsalConfiguration } from \"../../config/MsalConfiguration\";\r\nimport { AppSettings } from \"../../config/AppSettings\";\r\nimport { EnvironmentUtils } from \"../../utils/EnvironmentUtils\";\r\n\r\nexport class WebAppAuthClientBuilder extends BaseAuthClientBuilder {\r\n\r\n    appSettings: AppSettings;\r\n    private msalConfig: Configuration;\r\n\r\n    constructor(appSettings: AppSettings) {\r\n        super(appSettings)\r\n    };\r\n\r\n    build(): MsalWebAppAuthClient | AppServiceWebAppAuthClient {\r\n        // TODO: throw error if key vault credential is being built\r\n        \r\n        this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings, this.persistenceManager);\r\n        \r\n        if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n            return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        } else {\r\n            return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n        }\r\n    }\r\n\r\n    async buildAsync(): Promise<MsalWebAppAuthClient | AppServiceWebAppAuthClient> {\r\n        try {\r\n            if (this.keyVaultCredential) {\r\n                const keyVaultManager = new KeyVaultManager();\r\n                const credential = await keyVaultManager.getCredentialFromKeyVault(this.keyVaultCredential);\r\n                this.appSettings.appCredentials[credential.type] = credential.value;\r\n            }\r\n\r\n            if (this.persistenceManager) {\r\n                this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings, this.persistenceManager);\r\n            } else {\r\n                this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n            }\r\n\r\n            if (EnvironmentUtils.isAppServiceAuthEnabled()) {\r\n                return new AppServiceWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            } else {\r\n                return new MsalWebAppAuthClient(this.appSettings, this.msalConfig);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, {\r\n    RequestHandler,\r\n    Request,\r\n    Response,\r\n    NextFunction,\r\n    Router\r\n} from \"express\";\r\n\r\nimport {\r\n    AuthenticationResult,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    Configuration,\r\n    OnBehalfOfRequest,\r\n} from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClient } from \"../BaseAuthClient\";\r\n\r\nimport {\r\n    AppSettings,\r\n} from \"../../config/AppSettings\";\r\n\r\nimport {\r\n    InitializationOptions,\r\n    TokenRequestOptions,\r\n} from \"../MiddlewareOptions\";\r\n\r\nimport {\r\n    ErrorMessages,\r\n} from \"../../utils/Constants\";\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in RESTful APIs.\r\n */\r\nexport class MsalWebApiAuthClient extends BaseAuthClient {\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        super(appSettings, msalConfig);\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(options?: InitializationOptions): Router {\r\n        const appRouter = express.Router();\r\n\r\n        appRouter.use((req: Request, res: Response, next: NextFunction) => {\r\n            // TODO: add defaults\r\n            next();\r\n        });\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    /**\r\n     * Middleware that gets tokens via OBO flow. Used in web API scenarios\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getTokenOnBehalf(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const authHeader: string = req.headers.authorization;\r\n\r\n            // get scopes for token request\r\n            const scopes: string[] = options.resource.scopes;\r\n\r\n            // get the raw access token from authZ header\r\n            const rawAccessToken: string = authHeader.split(\" \")[1];\r\n            req.oboAssertion = rawAccessToken;\r\n\r\n            const oboRequest: OnBehalfOfRequest = {\r\n                oboAssertion: rawAccessToken,\r\n                scopes: scopes,\r\n            }\r\n\r\n            try {\r\n                // TODO: check cache first\r\n                const tokenResponse: AuthenticationResult = await this.msalClient.acquireTokenOnBehalfOf(oboRequest);\r\n                req.oboToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives access token in req authorization header\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthorized(): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (req.headers.authorization) {\r\n                next();\r\n            } else {\r\n                this.logger.error(ErrorMessages.TOKEN_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { BaseAuthClientBuilder } from \"../BaseAuthClientBuilder\";\r\nimport { MsalWebApiAuthClient } from \"./MsalWebApiAuthClient\";\r\nimport { KeyVaultManager } from \"../../network/KeyVaultManager\";\r\nimport { MsalConfiguration } from \"../../config/MsalConfiguration\";\r\nimport { AppSettings } from \"../../config/AppSettings\";\r\n\r\nexport class WebApiAuthClientBuilder extends BaseAuthClientBuilder {\r\n\r\n    appSettings: AppSettings;\r\n    private msalConfig: Configuration;\r\n\r\n    constructor(appSettings: AppSettings) {\r\n        super(appSettings)\r\n    };\r\n\r\n    /**\r\n     * Synchronously builds the MSAL middleware with the provided configuration.\r\n     * @returns {MsalWebApiAuthClient}\r\n     */\r\n    build(): MsalWebApiAuthClient {\r\n        // TODO: throw error if key vault credential is being built\r\n        this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings, this.persistenceManager);\r\n        return new MsalWebApiAuthClient(this.appSettings, this.msalConfig);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously builds the MSAL middleware with the provided configuration.\r\n     * @returns {Promise}\r\n     */\r\n    async buildAsync(): Promise<MsalWebApiAuthClient> {\r\n        try {\r\n            if (this.keyVaultCredential) {\r\n                const keyVaultManager = new KeyVaultManager();\r\n                const credential = await keyVaultManager.getCredentialFromKeyVault(this.keyVaultCredential);\r\n                this.appSettings.appCredentials[credential.type] = credential.value;\r\n            }\r\n\r\n            if (this.persistenceManager) {\r\n                this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings, this.persistenceManager);\r\n            } else {\r\n                this.msalConfig = MsalConfiguration.getMsalConfiguration(this.appSettings);\r\n            }\r\n\r\n            return new MsalWebApiAuthClient(this.appSettings, this.msalConfig);\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n}"],"names":["AppStages","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","KeyVaultCredentialTypes","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","OIDC_SCOPES","OIDC_DEFAULT_SCOPES","AppServiceAuthenticationHeaders","APP_SERVICE_AUTHENTICATION_HEADER","APP_SERVICE_ACCESS_TOKEN_HEADER","APP_SERVICE_ID_TOKEN_HEADER","APP_SERVICE_REFRESH_TOKEN_HEADER","APP_SERVICE_ACCESS_TOKEN_EXPIRES_HEADER","APP_SERVICE_USER_OID_HEADER","APP_SERVICE_USER_UPN_HEADER","APP_SERVICE_IDP_X_HEADER","AccessControlConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","DEFAULT_LOGGER_OPTIONS","loggerCallback","logLevel","message","containsPii","console","piiLoggingEnabled","LogLevel","Info","ConfigHelper","validateAppSettings","appSettings","StringUtils","isEmpty","appCredentials","clientId","isGuid","tenantId","includes","authRoutes","redirect","unauthorized","guid","test","getResourceNameFromScopes","scopes","index","protectedResources","ownedResources","findIndex","resource","JSON","stringify","getScopesFromResourceEndpoint","resourceEndpoint","find","endpoint","getEffectiveScopes","scopesList","filter","scope","BaseAuthClientBuilder","withKeyVaultCredentials","keyVaultCredential","withCustomCachePlugin","cachePlugin","customCachePlugin","withDistributedTokenCache","persistenceManager","BaseAuthClient","msalConfig","cryptoProvider","CryptoProvider","logger","Logger","system","loggerOptions","msalClient","ConfidentialClientApplication","getMsalClient","getMsalConfig","getLogger","FetchManager","axios","get","data","accessToken","options","headers","Authorization","nextPage","callApiEndpointWithToken","graphResponse","map","v","id","handlePagination","UrlUtils","req","url","urlComponents","UrlString","getUrlComponents","Protocol","HostNameAndPort","startsWith","protocol","PathSegments","join","CryptoUtils","algorithm","generateSalt","crypto","toString","createKey","password","salt","encryptData","stringifiedData","iv","cipher","encryptedData","update","decryptData","split","encrypted","decipher","Buffer","from","MsalWebAppAuthClient","cryptoUtils","initialize","appRouter","express","Router","getPathFromUrl","handleRedirect","post","use","res","session","nonce","_this2","createNewGuid","frontChannelLogout","destroy","sendStatus","signIn","_this3","base64Encode","stage","SIGN_IN","path","postLoginRedirect","params","authority","auth","ensureAbsoluteUrl","getAuthCode","signOut","postLogoutRedirectUri","postLogoutRedirect","logoutUri","_this4","query","parse","_this5","base64Decode","ACQUIRE_TOKEN","tokenRequest","code","acquireTokenByCode","tokenResponse","isAuthenticated","account","resourceName","getToken","_this6","silentRequest","acquireTokenSilent","InteractionRequiredAuthError","_context2","originalUrl","_this7","hasAccess","_this8","accessMatrix","checkFor","accessRule","idTokenClaims","warning","handleOverage","checkAccessRule","authCodeRequest","redirectUri","prompt","getAuthCodeUrl","rule","_claim_names","newIdTokenClaims","groups","creds","credType","methods","elem","roles","AppServiceWebAppAuthClient","_BaseAuthClient","rawIdToken","toLowerCase","AuthToken","extractTokenClaims","_this","tid","homeAccountId","oid","localAccountId","environment","iss","username","preferred_username","loginUri","postLoginRedirectUri","process","env","rawAccessToken","accessTokenClaims","scp","effectiveScopes","every","KeyVaultManager","getCredentialFromKeyVault","credential","DefaultAzureCredential","credentialType","SECRET","CERTIFICATE","getSecretCredential","log","getCertificateCredential","certificateResponse","secretResponse","thumbprint","properties","x509Thumbprint","privateKey","secretClient","CertificateClient","keyVaultUrl","getCertificate","credentialName","SecretClient","getSecret","DistributedCachePlugin","persistenceKey","getInstance","instance","beforeCacheAccess","cacheContext","sessionData","tokenCache","deserialize","afterCacheAccess","cacheHasChanged","kvStore","getKVStore","set","serialize","MsalConfiguration","getMsalConfiguration","b2cPolicies","entries","Constants","DEFAULT_AUTHORITY_HOST","clientSecret","clientCertificate","knownAuthorities","getDomainFromUrl","cache","EnvironmentUtils","isProduction","isDevelopment","isAppServiceAuthEnabled","WebAppAuthClientBuilder","_BaseAuthClientBuilde","build","buildAsync","keyVaultManager","MsalWebApiAuthClient","getTokenOnBehalf","authorization","oboAssertion","oboRequest","acquireTokenOnBehalfOf","oboToken","isAuthorized","WebApiAuthClientBuilder"],"mappings":"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"}