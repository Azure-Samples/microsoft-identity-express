{"version":3,"file":"msal-express-wrapper.cjs.production.min.js","sources":["../src/utils/Constants.ts","../node_modules/regenerator-runtime/runtime.js","../src/config/ConfigHelper.ts","../src/cache/DistributedCachePlugin.ts","../src/config/MsalConfig.ts","../src/crypto/TokenValidator.ts","../src/network/KeyVaultManager.ts","../src/network/FetchManager.ts","../src/utils/UrlUtils.ts","../src/packageMetadata.ts","../src/middleware/MsalMiddleware.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    LoggerOptions,\r\n    LogLevel,\r\n} from \"@azure/msal-common\";\r\n\r\nexport const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (logLevel, message, containsPii) => {\r\n        if (containsPii) {\r\n            return;\r\n        }\r\n        console.info(message);\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n};\r\n\r\n/**\r\n * Basic authentication stages used to determine\r\n * appropriate action after redirect occurs\r\n */\r\nexport enum AppStages {\r\n    SIGN_IN = \"sign_in\",\r\n    SIGN_OUT = \"sign_out\",\r\n    ACQUIRE_TOKEN = \"acquire_token\",\r\n};\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\"\r\n}\r\n\r\n/**\r\n * String constants related credential type\r\n */\r\nexport enum KeyVaultCredentialTypes {\r\n    SECRET = \"secret\",\r\n    CERTIFICATE = \"certificate\",\r\n}\r\n\r\n/**\r\n * Constants used in access control scenarios\r\n */\r\nexport const AccessConstants = {\r\n    GROUPS: \"groups\",\r\n    ROLES: \"roles\",\r\n    CLAIM_NAMES: \"_claim_name\",\r\n    CLAIM_SOURCES: \"_claim_sources\",\r\n    PAGINATION_LINK: \"@odata.nextLink\",\r\n    GRAPH_MEMBERS_ENDPOINT: \"https://graph.microsoft.com/v1.0/me/memberOf\",\r\n    GRAPH_MEMBER_SCOPES: \"User.Read GroupMember.Read.All\"\r\n};\r\n\r\nexport const InfoMessages = {\r\n    REQUEST_FOR_RESOURCE: \"Request made to web API\",\r\n    OVERAGE_OCCURRED: \"User has too many groups. Groups overage claim occurred\"\r\n}\r\n\r\n/**\r\n * Various error constants\r\n */\r\nexport const ErrorMessages = {\r\n    NOT_PERMITTED: \"Not permitted\",\r\n    INVALID_TOKEN: \"Invalid token\",\r\n    CANNOT_DETERMINE_APP_STAGE: \"Cannot determine application stage\",\r\n    CANNOT_VALIDATE_TOKEN: \"Cannot validate token\",\r\n    NONCE_MISMATCH: \"Nonce does not match\",\r\n    INTERACTION_REQUIRED: \"interaction_required\",\r\n    TOKEN_ACQUISITION_FAILED: \"Token acquisition failed\",\r\n    AUTH_CODE_NOT_OBTAINED: \"Authorization code cannot be obtained\",\r\n    TOKEN_NOT_FOUND: \"No token found\",\r\n    TOKEN_NOT_DECODED: \"Token cannot be decoded\",\r\n    TOKEN_NOT_VERIFIED: \"Token cannot be verified\",\r\n    KEYS_NOT_OBTAINED: \"Signing keys cannot be obtained\",\r\n    STATE_NOT_FOUND: \"State not found\",\r\n    USER_HAS_NO_ROLE: \"User does not have any roles\",\r\n    USER_NOT_IN_ROLE: \"User does not have this role\",\r\n    USER_HAS_NO_GROUP: \"User does not have any groups\",\r\n    USER_NOT_IN_GROUP: \"User does not have this group\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed for this route\",\r\n    RULE_NOT_FOUND: \"No rule found for this route\",\r\n    SESSION_NOT_FOUND: \"No session found for this request\",\r\n    KEY_VAULT_CONFIG_NOT_FOUND: \"No coordinates found for Key Vault\"\r\n};\r\n\r\n/**\r\n * Various configuration error constants\r\n */\r\nexport const ConfigurationErrorMessages = {\r\n    NO_CLIENT_ID: \"No clientId provided!\",\r\n    INVALID_CLIENT_ID: \"Invalid clientId!\",\r\n    NO_TENANT_INFO: \"No tenant info provided!\",\r\n    INVALID_TENANT_INFO: \"Invalid tenant info!\",\r\n    NO_CLIENT_CREDENTIAL: \"No client credential provided!\",\r\n    NO_REDIRECT_URI: \"No redirect URI provided!\",\r\n    NO_ERROR_ROUTE: \"No error route provided!\",\r\n    NO_UNAUTHORIZED_ROUTE: \"No unauthorized route provided!\"\r\n}\r\n\r\n/**\r\n * For more information, visit: https://login.microsoftonline.com/error\r\n */\r\nexport const ErrorCodes = {\r\n    65001: \"AADSTS65001\", // consent required\r\n};","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AppSettings,\r\n    Resource\r\n} from \"./AppSettings\";\r\n\r\nexport class ConfigHelper {\r\n\r\n    /**\r\n     * Verifies if a string is GUID\r\n     * @param {string} guid\r\n     * @returns {boolean}\r\n     */\r\n    static isGuid(guid: string): boolean {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n\r\n    /**\r\n     * Util method to get the resource name for a given scope(s)\r\n     * @param {Array} scopes: an array of scopes that the resource is associated with\r\n     * @param {AppSettings} appSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getResourceNameFromScopes(scopes: string[], appSettings: AppSettings): string {\r\n        const index = Object.values({ ...appSettings.remoteResources, ...appSettings.ownedResources })\r\n            .findIndex((resource: Resource) => JSON.stringify(resource.scopes) === JSON.stringify(scopes));\r\n\r\n        const resourceName = Object.keys({ ...appSettings.remoteResources, ...appSettings.ownedResources })[index];\r\n        \r\n        return resourceName;\r\n    };\r\n\r\n    /**\r\n     * Util method to get the scopes for a given resource name\r\n     * @param {string} resourceEndpoint: the resource name\r\n     * @param {AppSettings} appSettings: application authentication parameters\r\n     * @returns {string}\r\n     */\r\n    static getScopesFromResourceEndpoint(resourceEndpoint: string, appSettings: AppSettings): string[] {\r\n        const scopes = Object.values(appSettings.ownedResources)\r\n            .find((resource: Resource) => resource.endpoint === resourceEndpoint).scopes;\r\n\r\n        return scopes;\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICachePlugin } from \"@azure/msal-node\";\r\nimport { IDistributedPersistence } from \"./IDistributedPersistence\";\r\n\r\nexport class DistributedCachePlugin implements ICachePlugin {\r\n\r\n    private static instance: DistributedCachePlugin;\r\n\r\n    private persistenceManager: IDistributedPersistence;\r\n    private sessionId: string;\r\n\r\n    private constructor(persistenceManager: IDistributedPersistence, sessionId?: string) {\r\n        this.persistenceManager = persistenceManager;\r\n        this.sessionId = sessionId;\r\n    }\r\n\r\n    static getInstance(persistenceManager: IDistributedPersistence, sessionId?: string): DistributedCachePlugin {\r\n        if (!DistributedCachePlugin.instance) {\r\n            DistributedCachePlugin.instance = new DistributedCachePlugin(persistenceManager, sessionId);\r\n        }\r\n\r\n        return DistributedCachePlugin.instance;\r\n    }\r\n\r\n    async beforeCacheAccess(cacheContext): Promise<void> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const sessionData = await this.persistenceManager.get(\"sess:\" + this.sessionId);\r\n            if (sessionData) {\r\n                const cacheData = await this.persistenceManager.get(JSON.parse(sessionData).account.homeAccountId);\r\n                cacheContext.tokenCache.deserialize(cacheData);\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    async afterCacheAccess(cacheContext): Promise<void> {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (cacheContext.cacheHasChanged) {\r\n                const kvStore = cacheContext.tokenCache.getKVStore();\r\n                const homeAccountId = Object.values(kvStore)[1][\"homeAccountId\"];\r\n                await this.persistenceManager.set(homeAccountId, cacheContext.tokenCache.serialize());\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    UrlString,\r\n    StringUtils,\r\n    Constants,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    ICachePlugin,\r\n    Configuration\r\n} from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"./AppSettings\";\r\nimport { ConfigHelper } from \"./ConfigHelper\";\r\nimport { DistributedCachePlugin } from \"../cache/DistributedCachePlugin\";\r\nimport { IDistributedPersistence } from \"../cache/IDistributedPersistence\";\r\n\r\nimport {\r\n    AADAuthorityConstants,\r\n    ConfigurationErrorMessages\r\n} from \"../utils/Constants\";\r\n\r\nimport {\r\n    DEFAULT_LOGGER_OPTIONS\r\n} from \"../utils/Constants\"\r\n\r\nexport class ConfigurationBuilder {\r\n\r\n    /**\r\n     * Validates the fields in the configuration file\r\n     * @param {AppSettings} config: configuration object\r\n     * @returns {void}\r\n     */\r\n    static validateAppSettings(config: AppSettings): void {\r\n        if (StringUtils.isEmpty(config.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_ID);\r\n        } else if (!ConfigHelper.isGuid(config.appCredentials.clientId)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_CLIENT_ID);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(config.appCredentials.tenantInfo)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_TENANT_INFO);\r\n        } else if (!ConfigHelper.isGuid(config.appCredentials.tenantInfo) && !Object.values(AADAuthorityConstants).includes(config.appCredentials.tenantInfo)) {\r\n            throw new Error(ConfigurationErrorMessages.INVALID_TENANT_INFO);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(config.appCredentials.clientSecret) && !config.appCredentials.clientCertificate) {\r\n            throw new Error(ConfigurationErrorMessages.NO_CLIENT_CREDENTIAL);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(config.authRoutes.redirect)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_REDIRECT_URI);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(config.authRoutes.error)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_ERROR_ROUTE);\r\n        }\r\n\r\n        if (StringUtils.isEmpty(config.authRoutes.unauthorized)) {\r\n            throw new Error(ConfigurationErrorMessages.NO_UNAUTHORIZED_ROUTE);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Maps the custom configuration object to configuration\r\n     * object expected by MSAL Node ConfidentialClientApplication class\r\n     * @param {AppSettings} appSettings: configuration object\r\n     * @param {ICachePlugin} cachePlugin: persistent cache implementation\r\n     * @returns {Configuration}\r\n     */\r\n    static getMsalConfiguration(appSettings: AppSettings, persistenceManager?: IDistributedPersistence, cachePlugin?: ICachePlugin): Configuration {\r\n        return {\r\n            auth: {\r\n                clientId: appSettings.appCredentials.clientId,\r\n                authority: appSettings.b2cPolicies ?\r\n                    Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"] // the first policy/user-flow is the default authority\r\n                    :\r\n                    appSettings.appCredentials.instance ? `https://${appSettings.appCredentials.instance}/${appSettings.appCredentials.tenantInfo}` \r\n                    :\r\n                    `https://${Constants.DEFAULT_AUTHORITY_HOST}/${appSettings.appCredentials.tenantInfo}`,\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientSecret\")) && { clientSecret: appSettings.appCredentials.clientSecret },\r\n                ...(appSettings.appCredentials.hasOwnProperty(\"clientCertificate\")) && { clientCertificate: appSettings.appCredentials.clientCertificate },\r\n                knownAuthorities: appSettings.b2cPolicies ?\r\n                    [UrlString.getDomainFromUrl(Object.entries(appSettings.b2cPolicies)[0][1][\"authority\"])] // in B2C scenarios\r\n                    :\r\n                    [],\r\n            },\r\n            cache: {\r\n                cachePlugin: cachePlugin ? cachePlugin : DistributedCachePlugin.getInstance(persistenceManager),\r\n            },\r\n            system: {\r\n                loggerOptions: appSettings.loggerOptions ? appSettings.loggerOptions : DEFAULT_LOGGER_OPTIONS,\r\n            },\r\n        };\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport jwksClient from \"jwks-rsa\";\r\n\r\nimport {\r\n    StringUtils,\r\n    Constants,\r\n    TokenClaims,\r\n    Logger\r\n} from \"@azure/msal-common\";\r\n\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport {\r\n    AuthToken,\r\n    TokenHeader,\r\n    IdTokenClaims,\r\n    AccessTokenClaims\r\n} from \"./AuthToken\";\r\n\r\nimport { AppSettings } from \"../config/AppSettings\";\r\n\r\nimport { ConfigHelper } from \"../config/ConfigHelper\";\r\n\r\nimport {\r\n    ErrorMessages,\r\n    AADAuthorityConstants\r\n} from \"../utils/Constants\";\r\n\r\nexport class TokenValidator {\r\n    private appSettings: AppSettings;\r\n    private msalConfig: Configuration;\r\n    private logger: Logger;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings \r\n     * @param {Configuration} msalConfig\r\n     * @param {Logger} logger\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration, logger: Logger) {\r\n        this.appSettings = appSettings;\r\n        this.msalConfig = msalConfig;\r\n        this.logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Verifies a given token's signature using jwks-rsa\r\n     * @param {string} authToken \r\n     * @returns {Promise}\r\n     */\r\n    async verifyTokenSignature(authToken: string): Promise<TokenClaims | boolean> {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            this.logger.error(ErrorMessages.TOKEN_NOT_FOUND);\r\n            return false;\r\n        }\r\n\r\n        // we will first decode to get kid parameter in header\r\n        let decodedToken: AuthToken;\r\n\r\n        try {\r\n            decodedToken = jwt.decode(authToken, { complete: true });\r\n        } catch (error) {\r\n            this.logger.error(ErrorMessages.TOKEN_NOT_DECODED);\r\n            return false;\r\n        }\r\n\r\n        // obtains signing keys from discovery endpoint\r\n        let keys;\r\n\r\n        try {\r\n            keys = await this.getSigningKeys(decodedToken.header, decodedToken.payload.tid);\r\n        } catch (error) {\r\n            this.logger.error(ErrorMessages.KEYS_NOT_OBTAINED);\r\n            return false;\r\n        }\r\n\r\n        // verify the signature at header section using keys\r\n        let verifiedToken: TokenClaims;\r\n\r\n        try {\r\n            verifiedToken = jwt.verify(authToken, keys);\r\n\r\n            /**\r\n             * if a multiplexer was used in place of tenantId i.e. if the app\r\n             * is multi-tenant, the tenantId should be obtained from the user\"s\r\n             * token\"s tid claim for verification purposes\r\n             */\r\n            if (\r\n                this.appSettings.appCredentials.tenantInfo === AADAuthorityConstants.COMMON ||\r\n                this.appSettings.appCredentials.tenantInfo === AADAuthorityConstants.ORGANIZATIONS ||\r\n                this.appSettings.appCredentials.tenantInfo === AADAuthorityConstants.CONSUMERS\r\n            ) {\r\n                this.appSettings.appCredentials.tenantInfo = decodedToken.payload.tid;\r\n            }\r\n\r\n            return verifiedToken;\r\n        } catch (error) {\r\n            this.logger.error(ErrorMessages.TOKEN_NOT_VERIFIED);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches signing keys of an access token\r\n     * from the authority discovery endpoint\r\n     * @param {TokenHeader} header: token header\r\n     * @param {string} tid: tenant id\r\n     * @returns {Promise}\r\n     */\r\n    private async getSigningKeys(header: TokenHeader, tid: string): Promise<string> {\r\n        let jwksUri;\r\n\r\n        // Check if a B2C application i.e. app has b2cPolicies\r\n        if (this.appSettings.b2cPolicies) {\r\n            jwksUri = `${this.msalConfig.auth.authority}/discovery/v2.0/keys`;\r\n        } else {\r\n            jwksUri = `https://${Constants.DEFAULT_AUTHORITY_HOST}/${tid}/discovery/v2.0/keys`;\r\n        }\r\n\r\n        const client = jwksClient({\r\n            jwksUri: jwksUri,\r\n        });\r\n\r\n        return (await client.getSigningKeyAsync(header.kid)).getPublicKey();\r\n    };\r\n\r\n    /**\r\n     * Verifies the access token for signature and claims\r\n     * @param {string} idToken: raw Id token\r\n     * @returns {Promise}\r\n     */\r\n    async validateIdToken(idToken: string): Promise<boolean> {\r\n        try {\r\n            const verifiedToken = await this.verifyTokenSignature(idToken);\r\n\r\n            if (verifiedToken) {\r\n                return this.validateIdTokenClaims(verifiedToken as IdTokenClaims);\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Verifies the access token for signature and claims\r\n     * @param {string} accessToken: raw access token\r\n     * @param {string} protectedRoute: used for checking scope\r\n     * @returns {Promise}\r\n     */\r\n    async validateAccessToken(accessToken: string, protectedRoute: string): Promise<boolean> {\r\n        try {\r\n            const verifiedToken = await this.verifyTokenSignature(accessToken);\r\n\r\n            if (verifiedToken) {\r\n                return this.validateAccessTokenClaims(verifiedToken as AccessTokenClaims, protectedRoute);\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates the id token for a set of claims\r\n     * @param {IdTokenClaims} idTokenClaims: decoded id token claims\r\n     * @returns {boolean}\r\n     */\r\n    validateIdTokenClaims(idTokenClaims: IdTokenClaims): boolean {\r\n        const now = Math.round(new Date().getTime() / 1000); // in UNIX format\r\n\r\n        /**\r\n         * At the very least, check for issuer, audience, issue and expiry dates.\r\n         * For more information on validating id tokens, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/id-tokens#validating-an-id_token\r\n         */\r\n        const checkIssuer = idTokenClaims.iss.includes(this.appSettings.appCredentials.tenantInfo) ? true : false;\r\n        const checkAudience = idTokenClaims.aud === this.msalConfig.auth.clientId ? true : false;\r\n        const checkTimestamp = idTokenClaims.iat <= now && idTokenClaims.exp >= now ? true : false;\r\n\r\n        return checkIssuer && checkAudience && checkTimestamp;\r\n    };\r\n\r\n    /**\r\n     * Validates the access token for a set of claims\r\n     * @param {TokenClaims} verifiedToken: token with a verified signature\r\n     * @param {string} protectedRoute: route where this token is required to access\r\n     * @returns {boolean}\r\n     */\r\n    validateAccessTokenClaims(verifiedToken: AccessTokenClaims, protectedRoute: string): boolean {\r\n        const now = Math.round(new Date().getTime() / 1000); // in UNIX format\r\n\r\n        /**\r\n         * At the very least, validate the token with respect to issuer, audience, scope\r\n         * and timestamp, though implementation and extent vary. For more information, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/access-tokens#validating-tokens\r\n         */\r\n        const checkIssuer = verifiedToken.iss.includes(this.appSettings.appCredentials.tenantInfo) ? true : false;\r\n        const checkTimestamp = verifiedToken.iat <= now && verifiedToken.iat >= now ? true : false;\r\n\r\n        const checkAudience = verifiedToken.aud === this.appSettings.appCredentials.clientId ||\r\n            verifiedToken.aud === \"api://\" + this.appSettings.appCredentials.clientId ? true : false;\r\n\r\n        const checkScopes = ConfigHelper.getScopesFromResourceEndpoint(protectedRoute, this.appSettings)\r\n            .every(scp => verifiedToken.scp.includes(scp));\r\n\r\n        return checkAudience && checkIssuer && checkTimestamp && checkScopes;\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { CertificateClient, KeyVaultCertificate } from \"@azure/keyvault-certificates\";\r\nimport { KeyVaultSecret, SecretClient } from \"@azure/keyvault-secrets\";\r\n\r\nimport { AppSettings } from \"../config/AppSettings\";\r\nimport { KeyVaultCredentialTypes } from \"../utils/Constants\";\r\n\r\nexport class KeyVaultManager {\r\n\r\n    /**\r\n     * Fetches credentials from Key Vault and updates appSettings\r\n     * @param {AppSettings} config \r\n     * @returns {Promise}\r\n     */\r\n    async getCredentialFromKeyVault(config: AppSettings): Promise<AppSettings> {\r\n\r\n        const credential = new DefaultAzureCredential();\r\n\r\n        if (!config.appCredentials.keyVaultCredential) {\r\n            return config\r\n        }\r\n\r\n        switch (config.appCredentials.keyVaultCredential.credentialType) {\r\n            case KeyVaultCredentialTypes.SECRET: {\r\n                try {\r\n                    const secretResponse = await this.getSecretCredential(config, credential);\r\n                    config.appCredentials.clientSecret = secretResponse.value;\r\n                    return config;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case KeyVaultCredentialTypes.CERTIFICATE: {\r\n                try {\r\n                    const certificateResponse = await this.getCertificateCredential(config, credential);\r\n                    const secretResponse = await this.getSecretCredential(config, credential);\r\n\r\n                    config.appCredentials.clientCertificate = {\r\n                        thumbprint: certificateResponse.properties.x509Thumbprint.toString(),\r\n                        privateKey: secretResponse.value.split('-----BEGIN CERTIFICATE-----\\n')[0]\r\n                    }\r\n                    return config;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets a certificate credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getCertificateCredential(config: AppSettings, credential: DefaultAzureCredential): Promise<KeyVaultCertificate> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new CertificateClient(config.appCredentials.keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultCertificate = await secretClient.getCertificate(config.appCredentials.keyVaultCredential.credentialName);\r\n            return keyVaultCertificate;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a secret credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getSecretCredential(config: AppSettings, credential: DefaultAzureCredential): Promise<KeyVaultSecret> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new SecretClient(config.appCredentials.keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultSecret = await secretClient.getSecret(config.appCredentials.keyVaultCredential.credentialName);\r\n            return keyVaultSecret;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StringUtils } from \"@azure/msal-common\";\r\n\r\nimport {\r\n    AccessConstants,\r\n    ErrorMessages\r\n} from \"../utils/Constants\";\r\n\r\nexport class FetchManager {\r\n\r\n    /**\r\n     * Calls a resource endpoint with a raw access token\r\n     * using the authorization bearer token scheme\r\n     * @param {string} endpoint \r\n     * @param {string} accessToken \r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpoint = async (endpoint: string, accessToken: string): Promise<any> => {\r\n\r\n        if (StringUtils.isEmpty(accessToken)) {\r\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND)\r\n        }\r\n\r\n        const options: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint, options);\r\n            return response.data;\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles queries against Microsoft Graph that return multiple pages of data  \r\n     * @param {string} accessToken: access token required by endpoint \r\n     * @param {string} nextPage: next page link\r\n     * @param {Array} data: stores data from each page\r\n     * @returns {Promise}\r\n     */\r\n    static handlePagination = async (accessToken: string, nextPage: string, data: string[] = []): Promise<any> => {\r\n\r\n        try {\r\n            const graphResponse = await FetchManager.callApiEndpoint(nextPage, accessToken);\r\n            graphResponse[\"value\"].map((v) => data.push(v.id));\r\n\r\n            if (graphResponse[AccessConstants.PAGINATION_LINK]) {\r\n                return await FetchManager.handlePagination(accessToken, graphResponse[AccessConstants.PAGINATION_LINK], data)\r\n            } else {\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Request } from \"express\";\r\nimport { IUri, UrlString } from \"@azure/msal-common\";\r\n\r\nexport class UrlUtils {\r\n    /**\r\n     * Gets the absolute URL from a given request and path string\r\n     * @param {Request} req: express request object \r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static ensureAbsoluteUrl = (req: Request, url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n\r\n        if (!urlComponents.Protocol) {\r\n            if (!urlComponents.HostNameAndPort) {\r\n                return req.protocol + \"://\" + req.get(\"host\") + url;\r\n            }\r\n            return req.protocol + \"://\" + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the path segment from a given URL\r\n     * @param {string} url: a given URL\r\n     * @returns {string}\r\n     */\r\n    static getPathFromUrl = (url: string): string => {\r\n        const urlComponents: IUri = new UrlString(url).getUrlComponents();\r\n        return `/${urlComponents.PathSegments.join(\"/\")}`;\r\n    };\r\n}\r\n","export const name = \"@azure-samples/msal-express-wrapper\";\r\nexport const version = \"0.1.0\";","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport express, {\r\n    RequestHandler,\r\n    Request,\r\n    Response,\r\n    NextFunction,\r\n    Router\r\n} from \"express\";\r\n\r\nimport {\r\n    OIDC_DEFAULT_SCOPES,\r\n    InteractionRequiredAuthError,\r\n    PromptValue,\r\n    StringUtils,\r\n    ICachePlugin,\r\n    Logger,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    ConfidentialClientApplication,\r\n    Configuration,\r\n    AccountInfo,\r\n    CryptoProvider,\r\n    AuthorizationUrlRequest,\r\n    AuthorizationCodeRequest,\r\n    SilentFlowRequest,\r\n    OnBehalfOfRequest,\r\n} from \"@azure/msal-node\";\r\n\r\nimport { IAuthMiddleware } from \"./IAuthMiddleware\";\r\nimport { ConfigurationBuilder } from \"../config/MsalConfig\";\r\nimport { ConfigHelper } from \"../config/ConfigHelper\";\r\nimport { TokenValidator } from \"../crypto/TokenValidator\";\r\nimport { KeyVaultManager } from \"../network/KeyVaultManager\";\r\nimport { FetchManager } from \"../network/FetchManager\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\n\r\nimport { IDistributedPersistence } from \"../cache/IDistributedPersistence\";\r\nimport { DistributedCachePlugin } from \"../cache/DistributedCachePlugin\";\r\n\r\nimport {\r\n    Resource,\r\n    AppSettings,\r\n    AccessRule,\r\n} from \"../config/AppSettings\";\r\n\r\nimport { AuthCodeParams } from \"../utils/Types\";\r\n\r\nimport {\r\n    InitializationOptions,\r\n    TokenRequestOptions,\r\n    GuardOptions,\r\n    SignInOptions,\r\n    SignOutOptions,\r\n    HandleRedirectOptions\r\n} from \"./MiddlewareOptions\";\r\n\r\nimport {\r\n    AppStages,\r\n    ErrorMessages,\r\n    AccessConstants,\r\n    InfoMessages\r\n} from \"../utils/Constants\";\r\n\r\nimport {\r\n    name,\r\n    version\r\n} from \"../packageMetadata\";\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in Express MVC web apps and\r\n * RESTful APIs (coming soon).\r\n */\r\nexport class MsalMiddleware implements IAuthMiddleware {\r\n\r\n    logger: Logger;\r\n    appSettings: AppSettings;\r\n\r\n    protected msalConfig: Configuration;\r\n    protected msalClient: ConfidentialClientApplication;\r\n\r\n    private cryptoProvider: CryptoProvider;\r\n    private tokenValidator: TokenValidator;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {ICachePlugin} cache: cachePlugin\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, persistenceManager?: IDistributedPersistence, cachePlugin?: ICachePlugin) {\r\n        ConfigurationBuilder.validateAppSettings(appSettings);\r\n        this.appSettings = appSettings;\r\n\r\n        this.msalConfig = ConfigurationBuilder.getMsalConfiguration(appSettings, persistenceManager, cachePlugin);\r\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\r\n\r\n        this.logger = new Logger(this.msalConfig.system.loggerOptions, name, version);\r\n        this.tokenValidator = new TokenValidator(this.appSettings, this.msalConfig, this.logger);\r\n        this.cryptoProvider = new CryptoProvider();\r\n    }\r\n\r\n    /**\r\n     * Asynchronously builds authProvider object with credentials fetched from Key Vault\r\n     * @param {AppSettings} appSettings\r\n     * @param {ICachePlugin} cache: cachePlugin\r\n     * @returns \r\n     */\r\n    static async buildAsync(appSettings: AppSettings, persistenceManager?: IDistributedPersistence, cachePlugin?: ICachePlugin): Promise<MsalMiddleware> {\r\n        try {\r\n            const keyVault = new KeyVaultManager();\r\n            const appSettingsWithKeyVaultCredentials = await keyVault.getCredentialFromKeyVault(appSettings);\r\n            const authProvider = new MsalMiddleware(appSettingsWithKeyVaultCredentials, persistenceManager, cachePlugin);\r\n            return authProvider;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // withKeyVaultCredentials(): Router {\r\n    //     const appRouter = express.Router();\r\n\r\n    //     appRouter.use(this.setKeyVaultCredentials());\r\n\r\n    //     return appRouter;\r\n    // }\r\n\r\n    // withDistributedTokenCache(persistenceManager: IDistributedPersistence, sessionId?: string): Router {\r\n    //     const appRouter = express.Router();\r\n\r\n    //     appRouter.use(this.setTokenCachePlugin(persistenceManager, sessionId));\r\n\r\n    //     return appRouter;\r\n    // }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize(options?: InitializationOptions): Router {\r\n\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(UrlUtils.getPathFromUrl(this.appSettings.authRoutes.redirect), this.handleRedirect());\r\n\r\n        appRouter.use((req, res, next) => {\r\n\r\n            /**\r\n             * Request Configuration\r\n             * We manipulate these three request objects below\r\n             * to acquire a token with the appropriate claims\r\n             */\r\n            if (!req.session[\"authCodeRequest\"]) {\r\n                let authCodeRequest: AuthorizationUrlRequest;\r\n                req.session.authCodeRequest = authCodeRequest;\r\n            }\r\n\r\n            if (!req.session[\"tokenRequest\"]) {\r\n                let tokenRequest: AuthorizationCodeRequest;\r\n                req.session.tokenRequest = tokenRequest;\r\n            }\r\n\r\n            // signed-in user's account\r\n            if (!req.session[\"account\"]) {\r\n                let account: AccountInfo;\r\n                req.session.account = account;\r\n            }\r\n\r\n            // random GUID for csrf protection\r\n            req.session.nonce = this.cryptoProvider.createNewGuid();\r\n\r\n            next();\r\n        })\r\n\r\n        if (this.appSettings.authRoutes.frontChannelLogout) {\r\n            /**\r\n             * Expose front-channel logout route. For more information, visit: \r\n             * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\r\n             */\r\n            appRouter.get(this.appSettings.authRoutes.frontChannelLogout, (req, res, next) => {\r\n                req.session.destroy(() => {\r\n                    res.sendStatus(200);\r\n                });\r\n            });\r\n        }\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    // ========== ROUTE HANDLERS ===========\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn(options?: SignInOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n            // TODO: encrypt state parameter \r\n            const state = this.cryptoProvider.base64Encode(\r\n                JSON.stringify({\r\n                    stage: AppStages.SIGN_IN,\r\n                    path: options.successRedirect,\r\n                    nonce: req.session.nonce,\r\n                })\r\n            );\r\n\r\n            const params: AuthCodeParams = {\r\n                authority: this.msalConfig.auth.authority,\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n                state: state,\r\n                redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect),\r\n                prompt: PromptValue.SELECT_ACCOUNT,\r\n            };\r\n\r\n            // get url to sign user in\r\n            return this.getAuthCode(req, res, next, params);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param options: options to modify logout request \r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut(options?: SignOutOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.successRedirect);\r\n\r\n            /**\r\n             * Construct a logout URI and redirect the user to end the\r\n             * session with Azure AD/B2C. For more information, visit:\r\n             * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\r\n             * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\r\n             */\r\n            const logoutURI = `${req.app.locals.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\r\n\r\n            req.session.isAuthenticated = false;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutURI);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @param {HandleRedirectOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    handleRedirect(options?: HandleRedirectOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (req.query.state) {\r\n                const state = JSON.parse(this.cryptoProvider.base64Decode(req.query.state as string));\r\n\r\n                // check if nonce matches\r\n                if (state.nonce === req.session.nonce) {\r\n                    switch (state.stage) {\r\n                        case AppStages.SIGN_IN: {\r\n                            // token request should have auth code\r\n                            req.session.tokenRequest.code = req.query.code as string;\r\n\r\n                            try {\r\n                                // exchange auth code for tokens\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n\r\n                                try {\r\n                                    const isIdTokenValid = await this.tokenValidator.validateIdToken(tokenResponse.idToken);\r\n\r\n                                    if (isIdTokenValid) {\r\n                                        // assign session variables\r\n                                        req.session.account = tokenResponse.account;\r\n                                        req.session.isAuthenticated = true;\r\n\r\n                                        res.redirect(state.path);\r\n                                    } else {\r\n                                        this.logger.error(ErrorMessages.INVALID_TOKEN);\r\n                                        res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                                    }\r\n                                } catch (error) {\r\n                                    this.logger.error(ErrorMessages.CANNOT_VALIDATE_TOKEN);\r\n                                    next(error)\r\n                                }\r\n                            } catch (error) {\r\n                                this.logger.error(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                next(error)\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        case AppStages.ACQUIRE_TOKEN: {\r\n                            // get the name of the resource associated with scope\r\n                            const resourceName = ConfigHelper.getResourceNameFromScopes(req.session.tokenRequest.scopes, this.appSettings)\r\n\r\n                            req.session.tokenRequest.code = req.query.code as string\r\n\r\n                            try {\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n                                req.session.remoteResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                                res.redirect(state.path);\r\n                            } catch (error) {\r\n                                this.logger.error(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                            this.logger.error(ErrorMessages.CANNOT_DETERMINE_APP_STAGE);\r\n                            res.redirect(this.appSettings.authRoutes.error);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    this.logger.error(ErrorMessages.NONCE_MISMATCH);\r\n                    res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n            } else {\r\n                this.logger.error(ErrorMessages.STATE_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    // ========== MIDDLEWARE ===========\r\n\r\n    /**\r\n     * Middleware that gets tokens via acquireToken*\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(scopes, this.appSettings)\r\n\r\n            if (!req.session.remoteResources) {\r\n                req.session.remoteResources = {};\r\n            }\r\n\r\n            req.session.remoteResources = {\r\n                [resourceName]: {\r\n                    ...this.appSettings.remoteResources[resourceName],\r\n                    accessToken: null,\r\n                } as Resource\r\n            };\r\n\r\n            try {\r\n                const silentRequest: SilentFlowRequest = {\r\n                    account: req.session.account,\r\n                    scopes: scopes,\r\n                };\r\n\r\n                // acquire token silently to be used in resource call\r\n                const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n\r\n                // In B2C scenarios, sometimes an access token is returned empty.\r\n                // In that case, we will acquire token interactively instead.\r\n                if (StringUtils.isEmpty(tokenResponse.accessToken)) {\r\n                    this.logger.error(ErrorMessages.TOKEN_NOT_FOUND);\r\n                    throw new InteractionRequiredAuthError(ErrorMessages.INTERACTION_REQUIRED);\r\n                }\r\n\r\n                req.session.remoteResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                // in case there are no cached tokens, initiate an interactive call\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    const state = this.cryptoProvider.base64Encode(\r\n                        JSON.stringify({\r\n                            stage: AppStages.ACQUIRE_TOKEN,\r\n                            path: req.originalUrl,\r\n                            nonce: req.session.nonce,\r\n                        })\r\n                    );\r\n\r\n                    const params: AuthCodeParams = {\r\n                        authority: this.msalConfig.auth.authority,\r\n                        scopes: scopes,\r\n                        state: state,\r\n                        redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect),\r\n                        account: req.session.account,\r\n                    };\r\n\r\n                    // initiate the first leg of auth code grant to get token\r\n                    return this.getAuthCode(req, res, next, params);\r\n                } else {\r\n                    next(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that gets tokens via OBO flow. Used in web API scenarios\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getTokenOnBehalf(options: TokenRequestOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const authHeader = req.headers.authorization;\r\n\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n            const resourceName = ConfigHelper.getResourceNameFromScopes(scopes, this.appSettings)\r\n\r\n            const oboRequest: OnBehalfOfRequest = {\r\n                oboAssertion: authHeader.split(\" \")[1],\r\n                scopes: scopes,\r\n            }\r\n\r\n            try {\r\n                const tokenResponse = await this.msalClient.acquireTokenOnBehalfOf(oboRequest);\r\n\r\n                // as OBO is commonly used in middle-tier web APIs without sessions, attach AT to req\r\n                req[\"locals\"] = {\r\n                    [resourceName]: {\r\n                        accessToken: tokenResponse.accessToken\r\n                    }\r\n                }\r\n\r\n                next();\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============== GUARDS ===============\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated(options?: GuardOptions): RequestHandler {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (req.session) {\r\n                if (!req.session.isAuthenticated) {\r\n                    this.logger.error(ErrorMessages.NOT_PERMITTED);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                this.logger.error(ErrorMessages.SESSION_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Receives access token in req authorization header\r\n     * and validates it using the jwt.verify\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthorized(options?: GuardOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const accessToken = req.headers.authorization.split(\" \")[1];\r\n\r\n            if (req.headers.authorization) {\r\n                if (!(await this.tokenValidator.validateAccessToken(accessToken, `${req.baseUrl}${req.path}`))) {\r\n                    this.logger.error(ErrorMessages.INVALID_TOKEN);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                this.logger.error(ErrorMessages.TOKEN_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if the user has access for this route, defined in access matrix\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    hasAccess(options?: GuardOptions): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (req.session && this.appSettings.accessMatrix) {\r\n\r\n                const checkFor = options.accessRule.hasOwnProperty(AccessConstants.GROUPS) ? AccessConstants.GROUPS : AccessConstants.ROLES;\r\n\r\n                switch (checkFor) {\r\n                    case AccessConstants.GROUPS:\r\n\r\n                        if (req.session.account.idTokenClaims[AccessConstants.GROUPS] === undefined) {\r\n                            if (req.session.account.idTokenClaims[AccessConstants.CLAIM_NAMES] || req.session.account.idTokenClaims[AccessConstants.CLAIM_SOURCES]) {\r\n                                this.logger.warning(InfoMessages.OVERAGE_OCCURRED);\r\n                                return await this.handleOverage(req, res, next, options.accessRule);\r\n                            } else {\r\n                                this.logger.error(ErrorMessages.USER_HAS_NO_GROUP);\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        } else {\r\n                            const groups = req.session.account.idTokenClaims[AccessConstants.GROUPS];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, groups, AccessConstants.GROUPS)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    case AccessConstants.ROLES:\r\n                        if (req.session.account.idTokenClaims[AccessConstants.ROLES] === undefined) {\r\n                            this.logger.error(ErrorMessages.USER_HAS_NO_ROLE);\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            const roles = req.session.account.idTokenClaims[AccessConstants.ROLES];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, roles, AccessConstants.ROLES)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            } else {\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============== UTILS ===============\r\n\r\n    /**\r\n     * This method is used to generate an auth code url request\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AuthCodeParams} params: modifies auth code url request\r\n     * @returns {Promise}\r\n     */\r\n    private async getAuthCode(req: Request, res: Response, next: NextFunction, params: AuthCodeParams): Promise<void> {\r\n        // prepare the request\r\n        req.session.authCodeRequest.authority = params.authority;\r\n        req.session.authCodeRequest.scopes = params.scopes;\r\n        req.session.authCodeRequest.state = params.state;\r\n        req.session.authCodeRequest.redirectUri = params.redirect;\r\n        req.session.authCodeRequest.prompt = params.prompt;\r\n        req.session.authCodeRequest.account = params.account;\r\n\r\n        req.session.tokenRequest.authority = params.authority;\r\n        req.session.tokenRequest.scopes = params.scopes;\r\n        req.session.tokenRequest.redirectUri = params.redirect;\r\n\r\n        // request an authorization code to exchange for tokens\r\n        try {\r\n            const response = await this.msalClient.getAuthCodeUrl(req.session.authCodeRequest);\r\n            res.redirect(response);\r\n        } catch (error) {\r\n            this.logger.error(ErrorMessages.AUTH_CODE_NOT_OBTAINED);\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    // private setTokenCachePlugin = (persistenceManager: IDistributedPersistence, sessionId: string): RequestHandler => {\r\n    //     return async (req, res, next) => {\r\n    //         try {\r\n    //             const distributedcachePlugin = DistributedCachePlugin.getInstance(persistenceManager, sessionId);\r\n    //             this.msalClient.config.cache.cachePlugin = distributedcachePlugin\r\n    //             this.msalClient.tokenCache.persistence = distributedcachePlugin;\r\n    //             next();\r\n    //         } catch (error) {\r\n    //             next(error);\r\n    //         }\r\n    //     };\r\n    // };\r\n\r\n    /**\r\n     * Checks if the request passes a given access rule\r\n     * @param {string} method: HTTP method for this route\r\n     * @param {AccessRule} rule: access rule for this route\r\n     * @param {Array} creds: user's credentials i.e. roles or groups\r\n     * @param {string} credType: roles or groups\r\n     * @returns {boolean}\r\n     */\r\n    private checkAccessRule(method: string, rule: AccessRule, creds: string[], credType: string): boolean {\r\n        if (rule.methods.includes(method)) {\r\n            switch (credType) {\r\n                case AccessConstants.GROUPS:\r\n                    if (rule.groups.filter(elem => creds.includes(elem)).length < 1) {\r\n                        this.logger.error(ErrorMessages.USER_NOT_IN_GROUP);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case AccessConstants.ROLES:\r\n                    if (rule.roles.filter(elem => creds.includes(elem)).length < 1) {\r\n                        this.logger.error(ErrorMessages.USER_NOT_IN_ROLE);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            this.logger.error(ErrorMessages.METHOD_NOT_ALLOWED);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handles group overage claims by querying MS Graph /memberOf endpoint\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AccessRule} rule: a given access rule\r\n     * @returns {Promise}\r\n     */\r\n    private async handleOverage(req: Request, res: Response, next: NextFunction, rule: AccessRule): Promise<void> {\r\n        const { _claim_names, _claim_sources, ...newIdTokenClaims } = <any>req.session.account.idTokenClaims;\r\n\r\n        const silentRequest: SilentFlowRequest = {\r\n            account: req.session.account,\r\n            scopes: AccessConstants.GRAPH_MEMBER_SCOPES.split(\" \"),\r\n        };\r\n\r\n        try {\r\n            // acquire token silently to be used in resource call\r\n            const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n            try {\r\n                const graphResponse = await FetchManager.callApiEndpoint(AccessConstants.GRAPH_MEMBERS_ENDPOINT, tokenResponse.accessToken);\r\n\r\n                /**\r\n                 * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging \r\n                 * or due to the use of the $top query parameter to specifically limit the page size in a request. \r\n                 * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in \r\n                 * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\r\n                 */\r\n                if (graphResponse[AccessConstants.PAGINATION_LINK]) {\r\n                    try {\r\n                        const userGroups = await FetchManager.handlePagination(tokenResponse.accessToken, graphResponse[AccessConstants.PAGINATION_LINK]);\r\n\r\n                        req.session.account.idTokenClaims = {\r\n                            ...newIdTokenClaims,\r\n                            groups: userGroups\r\n                        }\r\n\r\n                        if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessConstants.GROUPS], AccessConstants.GROUPS)) {\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            return next();\r\n                        }\r\n                    } catch (error) {\r\n                        next(error);\r\n                    }\r\n                } else {\r\n                    req.session.account.idTokenClaims = {\r\n                        ...newIdTokenClaims,\r\n                        groups: graphResponse[\"value\"].map((v) => v.id)\r\n                    }\r\n\r\n                    if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessConstants.GROUPS], AccessConstants.GROUPS)) {\r\n                        return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                next(error);\r\n            }\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n}\r\n"],"names":["AppStages","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","ConfigHelper","isGuid","guid","test","getResourceNameFromScopes","scopes","appSettings","index","remoteResources","ownedResources","findIndex","resource","JSON","stringify","getScopesFromResourceEndpoint","resourceEndpoint","find","endpoint","DistributedCachePlugin","persistenceManager","sessionId","getInstance","instance","beforeCacheAccess","cacheContext","_this","get","sessionData","parse","account","homeAccountId","tokenCache","deserialize","afterCacheAccess","cacheHasChanged","kvStore","getKVStore","_this2","set","serialize","DEFAULT_LOGGER_OPTIONS","loggerCallback","logLevel","message","containsPii","console","piiLoggingEnabled","LogLevel","Info","KeyVaultCredentialTypes","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","AccessConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","InfoMessages","REQUEST_FOR_RESOURCE","OVERAGE_OCCURRED","ErrorMessages","NOT_PERMITTED","INVALID_TOKEN","CANNOT_DETERMINE_APP_STAGE","CANNOT_VALIDATE_TOKEN","NONCE_MISMATCH","INTERACTION_REQUIRED","TOKEN_ACQUISITION_FAILED","AUTH_CODE_NOT_OBTAINED","TOKEN_NOT_FOUND","TOKEN_NOT_DECODED","TOKEN_NOT_VERIFIED","KEYS_NOT_OBTAINED","STATE_NOT_FOUND","USER_HAS_NO_ROLE","USER_NOT_IN_ROLE","USER_HAS_NO_GROUP","USER_NOT_IN_GROUP","METHOD_NOT_ALLOWED","RULE_NOT_FOUND","SESSION_NOT_FOUND","KEY_VAULT_CONFIG_NOT_FOUND","ConfigurationErrorMessages","NO_CLIENT_ID","INVALID_CLIENT_ID","NO_TENANT_INFO","INVALID_TENANT_INFO","NO_CLIENT_CREDENTIAL","NO_REDIRECT_URI","NO_ERROR_ROUTE","NO_UNAUTHORIZED_ROUTE","ConfigurationBuilder","validateAppSettings","config","StringUtils","isEmpty","appCredentials","clientId","tenantInfo","includes","clientSecret","clientCertificate","authRoutes","redirect","unauthorized","getMsalConfiguration","cachePlugin","auth","authority","b2cPolicies","entries","Constants","DEFAULT_AUTHORITY_HOST","knownAuthorities","UrlString","getDomainFromUrl","cache","system","loggerOptions","TokenValidator","msalConfig","logger","verifyTokenSignature","authToken","decodedToken","jwt","decode","getSigningKeys","header","payload","tid","verifiedToken","verify","client","jwksClient","jwksUri","getSigningKeyAsync","kid","getPublicKey","validateIdToken","idToken","validateIdTokenClaims","validateAccessToken","accessToken","protectedRoute","validateAccessTokenClaims","idTokenClaims","now","Math","round","Date","getTime","iss","aud","iat","exp","checkIssuer","checkTimestamp","checkAudience","checkScopes","every","scp","KeyVaultManager","getCredentialFromKeyVault","credential","DefaultAzureCredential","keyVaultCredential","credentialType","SECRET","CERTIFICATE","getSecretCredential","log","getCertificateCredential","certificateResponse","secretResponse","thumbprint","properties","x509Thumbprint","privateKey","split","secretClient","CertificateClient","keyVaultUrl","getCertificate","credentialName","SecretClient","getSecret","FetchManager","options","headers","Authorization","axios","data","nextPage","callApiEndpoint","graphResponse","map","v","id","handlePagination","UrlUtils","req","url","urlComponents","getUrlComponents","Protocol","HostNameAndPort","protocol","PathSegments","join","MsalMiddleware","msalClient","ConfidentialClientApplication","Logger","tokenValidator","cryptoProvider","CryptoProvider","buildAsync","keyVault","authProvider","initialize","appRouter","express","Router","getPathFromUrl","handleRedirect","use","res","session","authCodeRequest","tokenRequest","nonce","createNewGuid","frontChannelLogout","destroy","sendStatus","signIn","base64Encode","stage","SIGN_IN","path","successRedirect","params","OIDC_DEFAULT_SCOPES","ensureAbsoluteUrl","prompt","PromptValue","SELECT_ACCOUNT","getAuthCode","signOut","postLogoutRedirectUri","logoutURI","app","locals","isAuthenticated","query","_this3","base64Decode","ACQUIRE_TOKEN","code","acquireTokenByCode","tokenResponse","resourceName","getToken","_this4","silentRequest","acquireTokenSilent","InteractionRequiredAuthError","_context3","originalUrl","getTokenOnBehalf","authHeader","authorization","_this5","oboRequest","oboAssertion","acquireTokenOnBehalfOf","_this6","isAuthorized","_this7","baseUrl","hasAccess","_this8","accessMatrix","checkFor","accessRule","warning","handleOverage","checkAccessRule","redirectUri","getAuthCodeUrl","rule","creds","credType","methods","groups","filter","elem","roles","_claim_names","newIdTokenClaims"],"mappings":"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"}