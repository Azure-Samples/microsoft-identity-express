{"version":3,"file":"msal-express-wrapper.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/ConfigurationUtils.ts","../src/Constants.ts","../src/TokenValidator.ts","../src/KeyVaultManager.ts","../src/FetchManager.ts","../src/UrlUtils.ts","../src/AuthProvider.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, Constants } from \"@azure/msal-common\";\r\nimport { Configuration, ICachePlugin, LogLevel } from \"@azure/msal-node\";\r\n\r\nimport { AppSettings } from \"./Types\";\r\n\r\nexport class ConfigurationUtils {\r\n\r\n    /**\r\n     * Validates the fields in the configuration file\r\n     * @param {AppSettings} config: configuration object\r\n     * @returns {void}\r\n     */\r\n    static validateAppSettings(config: AppSettings): void {\r\n        if (!config.appCredentials.clientId) {\r\n            throw new Error(\"No clientId provided!\");\r\n        }\r\n\r\n        if (!config.appCredentials.tenantId) {\r\n            throw new Error(\"No tenant info provided!\");\r\n        }\r\n\r\n        if (!config.appCredentials.clientSecret && !config.appCredentials.clientCertificate) {\r\n            throw new Error(\"No client credential provided!\");\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Maps the custom configuration object to configuration\r\n     * object expected by MSAL Node ConfidentialClientApplication class\r\n     * @param {AppSettings} config: configuration object\r\n     * @param {ICachePlugin} cachePlugin: persistent cache implementation\r\n     * @returns {Configuration}\r\n     */\r\n    static getMsalConfiguration(config: AppSettings, cachePlugin: ICachePlugin = null): Configuration {\r\n        return {\r\n            auth: {\r\n                clientId: config.appCredentials.clientId,\r\n                authority: config.b2cPolicies\r\n                    ? Object.entries(config.b2cPolicies)[0][1][\"authority\"]\r\n                    : `https://${Constants.DEFAULT_AUTHORITY_HOST}/${config.appCredentials.tenantId}`,\r\n                ...(config.appCredentials.hasOwnProperty(\"clientSecret\")) && {clientSecret: config.appCredentials.clientSecret},\r\n                ...(config.appCredentials.hasOwnProperty(\"clientCertificate\")) && {clientCertificate: config.appCredentials.clientCertificate},\r\n                knownAuthorities: config.b2cPolicies\r\n                    ? [UrlString.getDomainFromUrl(Object.entries(config.b2cPolicies)[0][1][\"authority\"])]\r\n                    : [], // in B2C scenarios\r\n            },\r\n            cache: {\r\n                cachePlugin,\r\n            },\r\n            system: {\r\n                loggerOptions: {\r\n                    loggerCallback: (logLevel, message, containsPii) => {\r\n                        console.log(message);\r\n                    },\r\n                    piiLoggingEnabled: false,\r\n                    logLevel: LogLevel.Verbose,\r\n                },\r\n            },\r\n        };\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Basic authentication stages used to determine\r\n * appropriate action after redirect occurs\r\n */\r\nexport const AppStages = {\r\n    SIGN_IN: \"sign_in\",\r\n    SIGN_OUT: \"sign_out\",\r\n    ACQUIRE_TOKEN: \"acquire_token\",\r\n};\r\n\r\n/**\r\n * Various error constants\r\n */\r\nexport const ErrorMessages = {\r\n    NOT_PERMITTED: \"Not permitted\",\r\n    INVALID_TOKEN: \"Invalid token\",\r\n    CANNOT_DETERMINE_APP_STAGE: \"Cannot determine application stage\",\r\n    CANNOT_VALIDATE_TOKEN: \"Cannot validate token\",\r\n    NONCE_MISMATCH: \"Nonce does not match\",\r\n    INTERACTION_REQUIRED: \"interaction_required\",\r\n    TOKEN_ACQUISITION_FAILED: \"Token acquisition failed\",\r\n    AUTH_CODE_NOT_OBTAINED: \"Authorization code cannot be obtained\",\r\n    TOKEN_NOT_FOUND: \"No token found\",\r\n    TOKEN_NOT_DECODED: \"Token cannot be decoded\",\r\n    TOKEN_NOT_VERIFIED: \"Token cannot be verified\",\r\n    KEYS_NOT_OBTAINED: \"Signing keys cannot be obtained\",\r\n    STATE_NOT_FOUND: \"State not found\",\r\n    USER_HAS_NO_ROLE: \"User does not have any roles\",\r\n    USER_NOT_IN_ROLE: \"User does not have this role\",\r\n    USER_HAS_NO_GROUP: \"User does not have any groups\",\r\n    USER_NOT_IN_GROUP: \"User does not have this group\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed for this route\",\r\n    RULE_NOT_FOUND: \"No rule found for this route\",\r\n    SESSION_NOT_FOUND: \"No session found for this request\",\r\n    KEY_VAULT_CONFIG_NOT_FOUND: \"No coordinates found for Key Vault access\"\r\n};\r\n\r\n/**\r\n * Constants used in access control scenarios\r\n */\r\nexport const AccessConstants = {\r\n    GROUPS: \"groups\",\r\n    ROLES: \"roles\",\r\n    CLAIM_NAMES: \"_claim_name\",\r\n    CLAIM_SOURCES: \"_claim_sources\",\r\n    PAGINATION_LINK: \"@odata.nextLink\",\r\n    GRAPH_MEMBERS_ENDPOINT: \"https://graph.microsoft.com/v1.0/me/memberOf\",\r\n    GRAPH_MEMBER_SCOPES: \"User.Read GroupMember.Read.All\"\r\n};\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\"\r\n}\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const KeyVaultCredentialTypes = {\r\n    SECRET: \"secret\",\r\n    CERTIFICATE: \"certificate\",\r\n}\r\n\r\n/**\r\n * For more information, visit: https://login.microsoftonline.com/error\r\n */\r\nexport const ErrorCodes = {\r\n    65001: \"AADSTS65001\", // consent required\r\n};","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport jwksClient from \"jwks-rsa\";\r\nimport { StringUtils, Constants, TokenClaims } from \"@azure/msal-common\";\r\nimport { Configuration } from \"@azure/msal-node\";\r\n\r\nimport { AppSettings, Resource } from \"./Types\";\r\nimport { ErrorMessages, AADAuthorityConstants } from \"./Constants\";\r\n\r\nexport class TokenValidator {\r\n    appSettings: AppSettings;\r\n    msalConfig: Configuration;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings \r\n     * @param {Configuration} msalConfig\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, msalConfig: Configuration) {\r\n        this.appSettings = appSettings;\r\n        this.msalConfig = msalConfig;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} authToken \r\n     * @returns {Promise}\r\n     */\r\n    async verifyTokenSignature(authToken: string): Promise<TokenClaims | boolean> {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            console.log(ErrorMessages.TOKEN_NOT_FOUND);\r\n            return false;\r\n        }\r\n\r\n        // we will first decode to get kid parameter in header\r\n        let decodedToken;\r\n\r\n        try {\r\n            decodedToken = jwt.decode(authToken, { complete: true });\r\n        } catch (error) {\r\n            console.log(ErrorMessages.TOKEN_NOT_DECODED);\r\n            console.log(error);\r\n            return false;\r\n        }\r\n\r\n        // obtains signing keys from discovery endpoint\r\n        let keys;\r\n\r\n        try {\r\n            keys = await this.getSigningKeys(decodedToken.header, decodedToken.payload.tid);\r\n        } catch (error) {\r\n            console.log(ErrorMessages.KEYS_NOT_OBTAINED);\r\n            console.log(error);\r\n            return false;\r\n        }\r\n\r\n        // verify the signature at header section using keys\r\n        let verifiedToken: TokenClaims;\r\n\r\n        try {\r\n            verifiedToken = jwt.verify(authToken, keys);\r\n\r\n            /**\r\n             * if a multiplexer was used in place of tenantId i.e. if the app\r\n             * is multi-tenant, the tenantId should be obtained from the user\"s\r\n             * token\"s tid claim for verification purposes\r\n             */\r\n            if (\r\n                this.appSettings.appCredentials.tenantId === AADAuthorityConstants.COMMON ||\r\n                this.appSettings.appCredentials.tenantId === AADAuthorityConstants.ORGANIZATIONS ||\r\n                this.appSettings.appCredentials.tenantId === AADAuthorityConstants.CONSUMERS\r\n            ) {\r\n                this.appSettings.appCredentials.tenantId = decodedToken.payload.tid;\r\n            }\r\n\r\n            return verifiedToken;\r\n        } catch (error) {\r\n            console.log(ErrorMessages.TOKEN_NOT_VERIFIED);\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} idToken: raw Id token\r\n     * @returns {Promise}\r\n     */\r\n     async validateIdToken(idToken: string): Promise<boolean> {\r\n        try {\r\n            const verifiedToken = await this.verifyTokenSignature(idToken);\r\n\r\n            if (verifiedToken) {\r\n                return this.validateIdTokenClaims(verifiedToken as TokenClaims);\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates the id token for a set of claims\r\n     * @param {TokenClaims} idTokenClaims: decoded id token claims\r\n     * @returns {boolean}\r\n     */\r\n    validateIdTokenClaims(idTokenClaims: TokenClaims): boolean {\r\n        const now = Math.round(new Date().getTime() / 1000); // in UNIX format\r\n\r\n        /**\r\n         * At the very least, check for issuer, audience, issue and expiry dates.\r\n         * For more information on validating id tokens, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/id-tokens#validating-an-id_token\r\n         */\r\n        const checkIssuer = idTokenClaims[\"iss\"].includes(this.appSettings.appCredentials.tenantId) ? true : false;\r\n        const checkAudience = idTokenClaims[\"aud\"] === this.msalConfig.auth.clientId ? true : false;\r\n        const checkTimestamp = idTokenClaims[\"iat\"] <= now && idTokenClaims[\"exp\"] >= now ? true : false;\r\n\r\n        return checkIssuer && checkAudience && checkTimestamp;\r\n    };\r\n\r\n    /**\r\n     * Validates the access token for signature and against a predefined set of claims\r\n     * @param {string} accessToken: raw JWT token\r\n     * @param {string} protectedRoute: used for checking scope\r\n     * @returns {Promise}\r\n     */\r\n     async validateAccessToken(accessToken: string, protectedRoute: string): Promise<boolean> {\r\n        try {\r\n            const verifiedToken = await this.verifyTokenSignature(accessToken);\r\n\r\n            if (verifiedToken) {\r\n                return this.validateAccessTokenClaims(verifiedToken as TokenClaims, protectedRoute);\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates the access token for a set of claims\r\n     * @param {TokenClaims} verifiedToken: token with a verified signature\r\n     * @param {string} protectedRoute: route where this token is required to access\r\n     * @returns {boolean}\r\n     */\r\n    validateAccessTokenClaims(verifiedToken: TokenClaims, protectedRoute: string): boolean {\r\n        const now = Math.round(new Date().getTime() / 1000); // in UNIX format\r\n\r\n        /**\r\n         * At the very least, validate the token with respect to issuer, audience, scope\r\n         * and timestamp, though implementation and extent vary. For more information, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/access-tokens#validating-tokens\r\n         */\r\n        const checkIssuer = verifiedToken[\"iss\"].includes(this.appSettings.appCredentials.tenantId) ? true : false;\r\n        const checkTimestamp = verifiedToken[\"iat\"] <= now && verifiedToken[\"exp\"] >= now ? true : false;\r\n\r\n        const checkAudience = verifiedToken[\"aud\"] === this.appSettings.appCredentials.clientId ||\r\n            verifiedToken[\"aud\"] === \"api://\" + this.appSettings.appCredentials.clientId ? true : false;\r\n\r\n        const checkScopes = Object.values(this.appSettings.ownedResources).find((resource: Resource) => resource.endpoint === protectedRoute)\r\n            .scopes.every(scp => verifiedToken[\"scp\"].includes(scp));\r\n\r\n        return checkAudience && checkIssuer && checkTimestamp && checkScopes;\r\n    };\r\n\r\n    /**\r\n     * Fetches signing keys of an access token\r\n     * from the authority discovery endpoint\r\n     * @param {Object} header: token header\r\n     * @param {string} tid: tenant id\r\n     * @returns {Promise}\r\n     */\r\n    private async getSigningKeys(header, tid: string): Promise<string> {\r\n        let jwksUri;\r\n\r\n        // Check if a B2C application i.e. app has b2cPolicies\r\n        if (this.appSettings.b2cPolicies) {\r\n            jwksUri = `${this.msalConfig.auth.authority}/discovery/v2.0/keys`;\r\n        } else {\r\n            jwksUri = `https://${Constants.DEFAULT_AUTHORITY_HOST}/${tid}/discovery/v2.0/keys`;\r\n        }\r\n\r\n        const client = jwksClient({\r\n            jwksUri: jwksUri,\r\n        });\r\n\r\n        return (await client.getSigningKeyAsync(header.kid)).getPublicKey();\r\n    };\r\n}\r\n","import { CertificateClient, KeyVaultCertificate } from \"@azure/keyvault-certificates\";\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { KeyVaultSecret, SecretClient } from \"@azure/keyvault-secrets\";\r\n\r\nimport { AppSettings } from \"./Types\";\r\nimport { KeyVaultCredentialTypes } from \"./Constants\";\r\n\r\nexport class KeyVaultManager {\r\n\r\n    /**\r\n     * Fetches credentials from Key Vault and updates appSettings\r\n     * @param {AppSettings} config \r\n     * @returns {Promise}\r\n     */\r\n    async getCredentialFromKeyVault(config: AppSettings): Promise<AppSettings> {\r\n\r\n        const credential = new DefaultAzureCredential();\r\n\r\n        if (!config.appCredentials.keyVaultCredential) {\r\n            return config\r\n        }\r\n\r\n        switch (config.appCredentials.keyVaultCredential.credentialType) {\r\n            case KeyVaultCredentialTypes.SECRET: {\r\n                try {\r\n                    const secretResponse = await this.getSecretCredential(config, credential);\r\n                    config.appCredentials.clientSecret = secretResponse.value;\r\n                    return config;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case KeyVaultCredentialTypes.CERTIFICATE: {\r\n                try {\r\n                    const certificateResponse = await this.getCertificateCredential(config, credential);\r\n                    const secretResponse = await this.getSecretCredential(config, credential);\r\n\r\n                    config.appCredentials.clientCertificate = {\r\n                        thumbprint: certificateResponse.properties.x509Thumbprint.toString(),\r\n                        privateKey: secretResponse.value.split('-----BEGIN CERTIFICATE-----\\n')[0]\r\n                    }\r\n                    return config;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets a certificate credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getCertificateCredential(config: AppSettings, credential: DefaultAzureCredential): Promise<KeyVaultCertificate> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new CertificateClient(config.appCredentials.keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultCertificate = await secretClient.getCertificate(config.appCredentials.keyVaultCredential.credentialName);\r\n            return keyVaultCertificate;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a secret credential from Key Vault\r\n     * @param {AppSettings} config \r\n     * @param {DefaultAzureCredential} credential \r\n     * @returns {Promise}\r\n     */\r\n    async getSecretCredential(config: AppSettings, credential: DefaultAzureCredential): Promise<KeyVaultSecret> {\r\n\r\n        // Initialize secretClient with credentials\r\n        const secretClient = new SecretClient(config.appCredentials.keyVaultCredential.keyVaultUrl, credential);\r\n\r\n        try {\r\n            const keyVaultSecret = await secretClient.getSecret(config.appCredentials.keyVaultCredential.credentialName);\r\n            return keyVaultSecret;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StringUtils } from \"@azure/msal-common\";\r\nimport { ErrorMessages, AccessConstants } from \"./Constants\";\r\n\r\nexport class FetchManager {\r\n\r\n    /**\r\n     * Calls a resource endpoint with a raw access token\r\n     * using the authorization bearer token scheme\r\n     * @param {string} endpoint \r\n     * @param {string} accessToken \r\n     * @returns {Promise}\r\n     */\r\n    static callApiEndpoint = async (endpoint: string, accessToken: string): Promise<any> => {\r\n\r\n        if (StringUtils.isEmpty(accessToken)) {\r\n            throw new Error(ErrorMessages.TOKEN_NOT_FOUND)\r\n        }\r\n\r\n        const options: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        };\r\n\r\n        console.log(\"request made to web API at: \" + new Date().toString());\r\n\r\n        try {\r\n            const response: AxiosResponse = await axios.get(endpoint, options);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error)\r\n            return error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles queries against Microsoft Graph that return multiple pages of data  \r\n     * @param {string} accessToken: access token required by endpoint \r\n     * @param {string} nextPage: next page link\r\n     * @param {Array} data: stores data from each page\r\n     * @returns {Promise}\r\n     */\r\n    static handlePagination = async (accessToken: string, nextPage: string, data: string[] = []): Promise<any> => {\r\n\r\n        try {\r\n            const graphResponse = await FetchManager.callApiEndpoint(nextPage, accessToken);\r\n            graphResponse[\"value\"].map((v) => data.push(v.id));\r\n    \r\n            if (graphResponse[AccessConstants.PAGINATION_LINK]) {\r\n                return await FetchManager.handlePagination(accessToken, graphResponse[AccessConstants.PAGINATION_LINK], data)\r\n            } else {\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            return error;\r\n        }\r\n    \r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Request } from \"express\";\r\nimport { IUri, UrlString } from \"@azure/msal-common\";\r\n\r\nexport class UrlUtils {\r\n  /**\r\n   * Gets the absolute URL from a given request and path string\r\n   * @param {Request} req: express request object \r\n   * @param {string} uri: a given URI\r\n   * @returns {string}\r\n   */\r\n  static ensureAbsoluteUrl = (req: Request, uri: string): string => {\r\n    const urlComponents: IUri = new UrlString(uri).getUrlComponents();\r\n\r\n    if (!urlComponents.Protocol) {\r\n      if (!urlComponents.HostNameAndPort) {\r\n        return req.protocol + \"://\" + req.get(\"host\") + uri;\r\n      }\r\n      return req.protocol + \"://\" + uri;\r\n    } else {\r\n      return uri;\r\n    }\r\n  };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport express from \"express\";\r\n\r\nimport {\r\n    RequestHandler,\r\n    Request,\r\n    Response,\r\n    NextFunction,\r\n    Router\r\n} from \"express\";\r\n\r\nimport {\r\n    InteractionRequiredAuthError,\r\n    OIDC_DEFAULT_SCOPES,\r\n    PromptValue,\r\n    CredentialType,\r\n    StringUtils,\r\n} from \"@azure/msal-common\";\r\n\r\nimport {\r\n    ConfidentialClientApplication,\r\n    Configuration,\r\n    AccountInfo,\r\n    ICachePlugin,\r\n    CryptoProvider,\r\n    AuthorizationUrlRequest,\r\n    AuthorizationCodeRequest,\r\n    SilentFlowRequest,\r\n    OnBehalfOfRequest,\r\n} from \"@azure/msal-node\";\r\n\r\nimport { ConfigurationUtils } from \"./ConfigurationUtils\";\r\nimport { TokenValidator } from \"./TokenValidator\";\r\nimport { KeyVaultManager } from \"./KeyVaultManager\";\r\nimport { FetchManager } from \"./FetchManager\";\r\nimport { UrlUtils } from \"./UrlUtils\";\r\n\r\nimport {\r\n    Resource,\r\n    AppSettings,\r\n    AuthCodeParams,\r\n    InitializationOptions,\r\n    TokenRequestOptions,\r\n    GuardOptions,\r\n    AccessRule,\r\n    SignInOptions,\r\n    SignOutOptions,\r\n    HandleRedirectOptions\r\n} from \"./Types\";\r\n\r\nimport {\r\n    AppStages,\r\n    ErrorMessages,\r\n    AccessConstants\r\n} from \"./Constants\";\r\n\r\n/**\r\n * A simple wrapper around MSAL Node ConfidentialClientApplication object.\r\n * It offers a collection of middleware and utility methods that automate\r\n * basic authentication and authorization tasks in Express MVC web apps and\r\n * RESTful APIs.\r\n * \r\n * You must have express and express-sessions packages installed. \r\n * Session variables accessible are as follows:\r\n * \r\n * req.session.isAuthenticated: boolean\r\n * req.session.account: AccountInfo\r\n * req.session.remoteResources.{resourceName}.accessToken: string\r\n */\r\nexport class AuthProvider {\r\n    appSettings: AppSettings;\r\n    msalConfig: Configuration;\r\n    cryptoProvider: CryptoProvider;\r\n    tokenValidator: TokenValidator;\r\n    msalClient: ConfidentialClientApplication;\r\n\r\n    /**\r\n     * @param {AppSettings} appSettings\r\n     * @param {ICachePlugin} cache: cachePlugin\r\n     * @constructor\r\n     */\r\n    constructor(appSettings: AppSettings, cache?: ICachePlugin) {\r\n        ConfigurationUtils.validateAppSettings(appSettings);\r\n        this.appSettings = appSettings;\r\n\r\n        this.msalConfig = ConfigurationUtils.getMsalConfiguration(appSettings, cache);\r\n        this.msalClient = new ConfidentialClientApplication(this.msalConfig);\r\n\r\n        this.tokenValidator = new TokenValidator(this.appSettings, this.msalConfig);\r\n        this.cryptoProvider = new CryptoProvider();\r\n    }\r\n\r\n    /**\r\n     * Asynchronously builds authProvider object with credentials fetched from Key Vault\r\n     * @param {AppSettings} appSettings\r\n     * @param {ICachePlugin} cache: cachePlugin\r\n     * @returns \r\n     */\r\n    static async buildAsync(appSettings: AppSettings, cache?: ICachePlugin): Promise<AuthProvider> {\r\n        try {\r\n            const keyVault = new KeyVaultManager();\r\n            const appSettingsWithKeyVaultCredentials = await keyVault.getCredentialFromKeyVault(appSettings);\r\n            const authProvider = new AuthProvider(appSettingsWithKeyVaultCredentials, cache);\r\n            return authProvider;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize AuthProvider and set default routes and handlers\r\n     * @param {InitializationOptions} options\r\n     * @returns {Router}\r\n     */\r\n    initialize = (options?: InitializationOptions): Router => {\r\n\r\n        // TODO: initialize app defaults\r\n\r\n        const appRouter = express.Router();\r\n\r\n        // handle redirect\r\n        appRouter.get(this.appSettings.authRoutes.redirect, this.handleRedirect());\r\n\r\n        if (this.appSettings.authRoutes.frontChannelLogout) {\r\n            /**\r\n             * Expose front-channel logout route. For more information, visit: \r\n             * https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#single-sign-out\r\n             */\r\n            appRouter.get(this.appSettings.authRoutes.frontChannelLogout, (req, res, next) => {\r\n                req.session.destroy(() => {\r\n                    res.sendStatus(200);\r\n                });\r\n            });\r\n        }\r\n\r\n        return appRouter;\r\n    }\r\n\r\n    // ========== ROUTE HANDLERS ===========\r\n\r\n    /**\r\n     * Initiates sign in flow\r\n     * @param {SignInOptions} options: options to modify login request\r\n     * @returns {RequestHandler}\r\n     */\r\n    signIn = (options?: SignInOptions): RequestHandler => {\r\n        return (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            /**\r\n             * Request Configuration\r\n             * We manipulate these three request objects below\r\n             * to acquire a token with the appropriate claims\r\n             */\r\n            if (!req.session[\"authCodeRequest\"]) {\r\n                req.session.authCodeRequest = {\r\n                    authority: \"\",\r\n                    scopes: [],\r\n                    state: {},\r\n                    redirectUri: \"\",\r\n                } as AuthorizationUrlRequest;\r\n            }\r\n\r\n            if (!req.session[\"tokenRequest\"]) {\r\n                req.session.tokenRequest = {\r\n                    authority: \"\",\r\n                    scopes: [],\r\n                    redirectUri: \"\",\r\n                    code: \"\",\r\n                } as AuthorizationCodeRequest;\r\n            }\r\n\r\n            // signed-in user's account\r\n            if (!req.session[\"account\"]) {\r\n                req.session.account = {\r\n                    homeAccountId: \"\",\r\n                    environment: \"\",\r\n                    tenantId: \"\",\r\n                    username: \"\",\r\n                    idTokenClaims: {},\r\n                } as AccountInfo;\r\n            }\r\n\r\n            // random GUID for csrf protection\r\n            req.session.nonce = this.cryptoProvider.createNewGuid();\r\n\r\n            // TODO: encrypt state parameter \r\n            const state = this.cryptoProvider.base64Encode(\r\n                JSON.stringify({\r\n                    stage: AppStages.SIGN_IN,\r\n                    path: options.successRedirect,\r\n                    nonce: req.session.nonce,\r\n                })\r\n            );\r\n\r\n            const params: AuthCodeParams = {\r\n                authority: this.msalConfig.auth.authority,\r\n                scopes: OIDC_DEFAULT_SCOPES,\r\n                state: state,\r\n                redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect),\r\n                prompt: PromptValue.SELECT_ACCOUNT,\r\n            };\r\n\r\n            // get url to sign user in\r\n            return this.getAuthCode(req, res, next, params);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initiate sign out and destroy the session\r\n     * @param options: options to modify logout request \r\n     * @returns {RequestHandler}\r\n     */\r\n    signOut = (options?: SignOutOptions): RequestHandler => {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            const postLogoutRedirectUri = UrlUtils.ensureAbsoluteUrl(req, options.successRedirect);\r\n\r\n            /**\r\n             * Construct a logout URI and redirect the user to end the\r\n             * session with Azure AD/B2C. For more information, visit:\r\n             * (AAD) https://docs.microsoft.com/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request\r\n             * (B2C) https://docs.microsoft.com/azure/active-directory-b2c/openid-connect#send-a-sign-out-request\r\n             */\r\n            const logoutURI = `${this.msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${postLogoutRedirectUri}`;\r\n\r\n            req.session.isAuthenticated = false;\r\n\r\n            req.session.destroy(() => {\r\n                res.redirect(logoutURI);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that handles redirect depending on request state\r\n     * There are basically 2 stages: sign-in and acquire token\r\n     * @param {HandleRedirectOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    private handleRedirect = (options?: HandleRedirectOptions): RequestHandler => {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            if (req.query.state) {\r\n                const state = JSON.parse(this.cryptoProvider.base64Decode(req.query.state as string));\r\n\r\n                // check if nonce matches\r\n                if (state.nonce === req.session.nonce) {\r\n                    switch (state.stage) {\r\n                        case AppStages.SIGN_IN: {\r\n                            // token request should have auth code\r\n                            req.session.tokenRequest.code = req.query.code as string;\r\n\r\n                            try {\r\n                                // exchange auth code for tokens\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n                                console.log(\"\\nResponse: \\n:\", tokenResponse);\r\n\r\n                                try {\r\n                                    const isIdTokenValid = await this.tokenValidator.validateIdToken(tokenResponse.idToken);\r\n\r\n                                    if (isIdTokenValid) {\r\n                                        // assign session variables\r\n                                        req.session.account = tokenResponse.account;\r\n                                        req.session.isAuthenticated = true;\r\n\r\n                                        res.redirect(state.path);\r\n                                    } else {\r\n                                        console.log(ErrorMessages.INVALID_TOKEN);\r\n                                        res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                                    }\r\n                                } catch (error) {\r\n                                    console.log(ErrorMessages.CANNOT_VALIDATE_TOKEN);\r\n                                    console.log(error);\r\n                                    next(error)\r\n                                }\r\n                            } catch (error) {\r\n                                console.log(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                console.log(error);\r\n                                next(error)\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        case AppStages.ACQUIRE_TOKEN: {\r\n                            // get the name of the resource associated with scope\r\n                            const resourceName = this.getResourceNameFromScopes(req.session.tokenRequest.scopes);\r\n\r\n                            req.session.tokenRequest.code = req.query.code as string\r\n\r\n                            try {\r\n                                const tokenResponse = await this.msalClient.acquireTokenByCode(req.session.tokenRequest);\r\n                                console.log(\"\\nResponse: \\n:\", tokenResponse);\r\n                                req.session.remoteResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                                res.redirect(state.path);\r\n                            } catch (error) {\r\n                                console.log(ErrorMessages.TOKEN_ACQUISITION_FAILED);\r\n                                console.log(error);\r\n                                next(error);\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                            console.log(ErrorMessages.CANNOT_DETERMINE_APP_STAGE);\r\n                            res.redirect(this.appSettings.authRoutes.error);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    console.log(ErrorMessages.NONCE_MISMATCH);\r\n                    res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n            } else {\r\n                console.log(ErrorMessages.STATE_NOT_FOUND)\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    // ========== MIDDLEWARE ===========\r\n\r\n    /**\r\n     * Middleware that gets tokens via acquireToken*\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getToken = (options: TokenRequestOptions): RequestHandler => {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n\r\n            const resourceName = this.getResourceNameFromScopes(scopes)\r\n\r\n            if (!req.session.remoteResources) {\r\n                req.session.remoteResources = {};\r\n            }\r\n\r\n            req.session.remoteResources = {\r\n                [resourceName]: {\r\n                    ...this.appSettings.remoteResources[resourceName],\r\n                    accessToken: null,\r\n                } as Resource\r\n            };\r\n\r\n            try {\r\n                const silentRequest: SilentFlowRequest = {\r\n                    account: req.session.account,\r\n                    scopes: scopes,\r\n                };\r\n\r\n                // acquire token silently to be used in resource call\r\n                const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n                console.log(\"\\nSuccessful silent token acquisition:\\n Response: \\n:\", tokenResponse);\r\n\r\n                // In B2C scenarios, sometimes an access token is returned empty.\r\n                // In that case, we will acquire token interactively instead.\r\n                if (StringUtils.isEmpty(tokenResponse.accessToken)) {\r\n                    console.log(ErrorMessages.TOKEN_NOT_FOUND);\r\n                    throw new InteractionRequiredAuthError(ErrorMessages.INTERACTION_REQUIRED);\r\n                }\r\n\r\n                req.session.remoteResources[resourceName].accessToken = tokenResponse.accessToken;\r\n                next();\r\n            } catch (error) {\r\n                // in case there are no cached tokens, initiate an interactive call\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    const state = this.cryptoProvider.base64Encode(\r\n                        JSON.stringify({\r\n                            stage: AppStages.ACQUIRE_TOKEN,\r\n                            path: req.route.path,\r\n                            nonce: req.session.nonce,\r\n                        })\r\n                    );\r\n\r\n                    const params: AuthCodeParams = {\r\n                        authority: this.msalConfig.auth.authority,\r\n                        scopes: scopes,\r\n                        state: state,\r\n                        redirect: UrlUtils.ensureAbsoluteUrl(req, this.appSettings.authRoutes.redirect),\r\n                        account: req.session.account,\r\n                    };\r\n\r\n                    // initiate the first leg of auth code grant to get token\r\n                    return this.getAuthCode(req, res, next, params);\r\n                } else {\r\n                    console.log(error);\r\n                    next(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Middleware that gets tokens via OBO flow. Used in web API scenarios\r\n     * @param {TokenRequestOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    getTokenOnBehalf = (options: TokenRequestOptions): RequestHandler => {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const authHeader = req.headers.authorization;\r\n\r\n            // get scopes for token request\r\n            const scopes = options.resource.scopes;\r\n            const resourceName = this.getResourceNameFromScopes(scopes);\r\n\r\n            const oboRequest: OnBehalfOfRequest = {\r\n                oboAssertion: authHeader.split(\" \")[1],\r\n                scopes: scopes,\r\n            }\r\n\r\n            try {\r\n                const tokenResponse = await this.msalClient.acquireTokenOnBehalfOf(oboRequest);\r\n\r\n                // as OBO is commonly used in middle-tier web APIs without sessions, attach AT to req\r\n                req[\"locals\"] = {\r\n                    [resourceName]: {\r\n                        accessToken: tokenResponse.accessToken\r\n                    }\r\n                }\r\n\r\n                next();\r\n            } catch (error) {\r\n                console.log(error);\r\n                next(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============== GUARDS ===============\r\n\r\n    /**\r\n     * Check if authenticated in session\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthenticated = (options?: GuardOptions): RequestHandler => {\r\n        return (req: Request, res: Response, next: NextFunction): void => {\r\n            if (req.session) {\r\n                if (!req.session.isAuthenticated) {\r\n                    console.log(ErrorMessages.NOT_PERMITTED);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                console.log(ErrorMessages.SESSION_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Receives access token in req authorization header\r\n     * and validates it using the jwt.verify\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    isAuthorized = (options?: GuardOptions): RequestHandler => {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n            const accessToken = req.headers.authorization.split(\" \")[1];\r\n\r\n            if (req.headers.authorization) {\r\n                if (!(await this.tokenValidator.validateAccessToken(accessToken, req.route.path))) {\r\n                    console.log(ErrorMessages.INVALID_TOKEN);\r\n                    return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                }\r\n\r\n                next();\r\n            } else {\r\n                console.log(ErrorMessages.TOKEN_NOT_FOUND);\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if the user has access for this route, defined in access matrix\r\n     * @param {GuardOptions} options: options to modify this middleware\r\n     * @returns {RequestHandler}\r\n     */\r\n    hasAccess = (options?: GuardOptions): RequestHandler => {\r\n        return async (req: Request, res: Response, next: NextFunction): Promise<any> => {\r\n            if (req.session && this.appSettings.accessMatrix) {\r\n\r\n                const checkFor = options.accessRule.hasOwnProperty(AccessConstants.GROUPS) ? AccessConstants.GROUPS : AccessConstants.ROLES;\r\n\r\n                switch (checkFor) {\r\n                    case AccessConstants.GROUPS:\r\n\r\n                        if (req.session.account.idTokenClaims[AccessConstants.GROUPS] === undefined) {\r\n                            if (req.session.account.idTokenClaims[AccessConstants.CLAIM_NAMES] || req.session.account.idTokenClaims[AccessConstants.CLAIM_SOURCES]) {\r\n                                return await this.handleOverage(req, res, next, options.accessRule);\r\n                            } else {\r\n                                console.log(ErrorMessages.USER_HAS_NO_GROUP);\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        } else {\r\n                            const groups = req.session.account.idTokenClaims[AccessConstants.GROUPS];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, groups, AccessConstants.GROUPS)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    case AccessConstants.ROLES:\r\n                        if (req.session.account.idTokenClaims[AccessConstants.ROLES] === undefined) {\r\n                            console.log(ErrorMessages.USER_HAS_NO_ROLE);\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            const roles = req.session.account.idTokenClaims[AccessConstants.ROLES];\r\n\r\n                            if (!this.checkAccessRule(req.method, options.accessRule, roles, AccessConstants.ROLES)) {\r\n                                return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                            }\r\n                        }\r\n\r\n                        next();\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            } else {\r\n                res.redirect(this.appSettings.authRoutes.unauthorized);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============== UTILS ===============\r\n\r\n    /**\r\n     * This method is used to generate an auth code url request\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AuthCodeParams} params: modifies auth code url request\r\n     * @returns {Promise}\r\n     */\r\n    private async getAuthCode(req: Request, res: Response, next: NextFunction, params: AuthCodeParams): Promise<void> {\r\n        // prepare the request\r\n        req.session.authCodeRequest.authority = params.authority;\r\n        req.session.authCodeRequest.scopes = params.scopes;\r\n        req.session.authCodeRequest.state = params.state;\r\n        req.session.authCodeRequest.redirectUri = params.redirect;\r\n        req.session.authCodeRequest.prompt = params.prompt;\r\n        req.session.authCodeRequest.account = params.account;\r\n\r\n        req.session.tokenRequest.authority = params.authority;\r\n        req.session.tokenRequest.scopes = params.scopes;\r\n        req.session.tokenRequest.redirectUri = params.redirect;\r\n\r\n        // request an authorization code to exchange for tokens\r\n        try {\r\n            const response = await this.msalClient.getAuthCodeUrl(req.session.authCodeRequest);\r\n            res.redirect(response);\r\n        } catch (error) {\r\n            console.log(ErrorMessages.AUTH_CODE_NOT_OBTAINED);\r\n            console.log(error);\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles group overage claims by querying MS Graph /memberOf endpoint\r\n     * @param {Request} req: express request object\r\n     * @param {Response} res: express response object\r\n     * @param {NextFunction} next: express next function\r\n     * @param {AccessRule} rule: a given access rule\r\n     * @returns {Promise}\r\n     */\r\n    private async handleOverage(req: Request, res: Response, next: NextFunction, rule: AccessRule): Promise<void> {\r\n        const { _claim_names, _claim_sources, ...newIdTokenClaims } = <any>req.session.account.idTokenClaims;\r\n\r\n        const silentRequest: SilentFlowRequest = {\r\n            account: req.session.account,\r\n            scopes: AccessConstants.GRAPH_MEMBER_SCOPES.split(\" \"),\r\n        };\r\n\r\n        try {\r\n            // acquire token silently to be used in resource call\r\n            const tokenResponse = await this.msalClient.acquireTokenSilent(silentRequest);\r\n            try {\r\n                const graphResponse = await FetchManager.callApiEndpoint(AccessConstants.GRAPH_MEMBERS_ENDPOINT, tokenResponse.accessToken);\r\n\r\n                /**\r\n                 * Some queries against Microsoft Graph return multiple pages of data either due to server-side paging \r\n                 * or due to the use of the $top query parameter to specifically limit the page size in a request. \r\n                 * When a result set spans multiple pages, Microsoft Graph returns an @odata.nextLink property in \r\n                 * the response that contains a URL to the next page of results. Learn more at https://docs.microsoft.com/graph/paging\r\n                 */\r\n                if (graphResponse[AccessConstants.PAGINATION_LINK]) {\r\n                    try {\r\n                        const userGroups = await FetchManager.handlePagination(tokenResponse.accessToken, graphResponse[AccessConstants.PAGINATION_LINK]);\r\n\r\n                        req.session.account.idTokenClaims = {\r\n                            ...newIdTokenClaims,\r\n                            groups: userGroups\r\n                        }\r\n\r\n                        if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessConstants.GROUPS], AccessConstants.GROUPS)) {\r\n                            return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                        } else {\r\n                            return next();\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        next(error);\r\n                    }\r\n                } else {\r\n                    req.session.account.idTokenClaims = {\r\n                        ...newIdTokenClaims,\r\n                        groups: graphResponse[\"value\"].map((v) => v.id)\r\n                    }\r\n\r\n                    if (!this.checkAccessRule(req.method, rule, req.session.account.idTokenClaims[AccessConstants.GROUPS], AccessConstants.GROUPS)) {\r\n                        return res.redirect(this.appSettings.authRoutes.unauthorized);\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                next(error);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the request passes a given access rule\r\n     * @param {string} method: HTTP method for this route\r\n     * @param {AccessRule} rule: access rule for this route\r\n     * @param {Array} creds: user's credentials i.e. roles or groups\r\n     * @param {string} credType: roles or groups\r\n     * @returns {boolean}\r\n     */\r\n    private checkAccessRule(method: string, rule: AccessRule, creds: string[], credType: string): boolean {\r\n        if (rule.methods.includes(method)) {\r\n            switch (credType) {\r\n                case AccessConstants.GROUPS:\r\n                    if (rule.groups.filter(elem => creds.includes(elem)).length < 1) {\r\n                        console.log(ErrorMessages.USER_NOT_IN_GROUP);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case AccessConstants.ROLES:\r\n                    if (rule.roles.filter(elem => creds.includes(elem)).length < 1) {\r\n                        console.log(ErrorMessages.USER_NOT_IN_ROLE);\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            console.log(ErrorMessages.METHOD_NOT_ALLOWED);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Util method to get the resource name for a given scope(s)\r\n     * @param {Array} scopes: an array of scopes that the resource is associated with\r\n     * @returns {string}\r\n     */\r\n    private getResourceNameFromScopes(scopes: string[]): string {\r\n        // TODO: deep check equality here \r\n\r\n        const index = Object.values({ ...this.appSettings.remoteResources, ...this.appSettings.ownedResources })\r\n            .findIndex((resource: Resource) => JSON.stringify(resource.scopes) === JSON.stringify(scopes));\r\n\r\n        const resourceName = Object.keys({ ...this.appSettings.remoteResources, ...this.appSettings.ownedResources })[index];\r\n        return resourceName;\r\n    };\r\n}\r\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","ConfigurationUtils","validateAppSettings","config","appCredentials","clientId","tenantId","clientSecret","clientCertificate","getMsalConfiguration","cachePlugin","auth","authority","b2cPolicies","entries","Constants","DEFAULT_AUTHORITY_HOST","knownAuthorities","UrlString","getDomainFromUrl","cache","system","loggerOptions","loggerCallback","logLevel","message","containsPii","console","log","piiLoggingEnabled","LogLevel","Verbose","AccessConstants","GROUPS","ROLES","CLAIM_NAMES","CLAIM_SOURCES","PAGINATION_LINK","GRAPH_MEMBERS_ENDPOINT","GRAPH_MEMBER_SCOPES","TokenValidator","appSettings","msalConfig","verifyTokenSignature","authToken","StringUtils","isEmpty","decodedToken","jwt","decode","getSigningKeys","header","payload","tid","verifiedToken","verify","validateIdToken","idToken","validateIdTokenClaims","idTokenClaims","now","Math","round","Date","getTime","includes","validateAccessToken","accessToken","protectedRoute","validateAccessTokenClaims","checkIssuer","checkTimestamp","checkAudience","checkScopes","ownedResources","find","resource","endpoint","scopes","every","scp","client","jwksClient","jwksUri","getSigningKeyAsync","kid","getPublicKey","KeyVaultManager","getCredentialFromKeyVault","credential","DefaultAzureCredential","keyVaultCredential","credentialType","getSecretCredential","getCertificateCredential","certificateResponse","secretResponse","thumbprint","properties","x509Thumbprint","privateKey","split","secretClient","CertificateClient","keyVaultUrl","getCertificate","credentialName","SecretClient","getSecret","FetchManager","options","headers","Authorization","axios","get","data","nextPage","callApiEndpoint","graphResponse","map","v","id","handlePagination","UrlUtils","req","uri","urlComponents","getUrlComponents","Protocol","HostNameAndPort","protocol","appRouter","express","Router","_this","authRoutes","redirect","handleRedirect","frontChannelLogout","res","session","destroy","sendStatus","authCodeRequest","redirectUri","tokenRequest","code","account","homeAccountId","environment","username","nonce","cryptoProvider","createNewGuid","base64Encode","JSON","stringify","stage","path","successRedirect","params","OIDC_DEFAULT_SCOPES","ensureAbsoluteUrl","prompt","PromptValue","SELECT_ACCOUNT","getAuthCode","postLogoutRedirectUri","logoutURI","isAuthenticated","query","parse","base64Decode","msalClient","acquireTokenByCode","tokenResponse","tokenValidator","unauthorized","resourceName","getResourceNameFromScopes","remoteResources","silentRequest","acquireTokenSilent","InteractionRequiredAuthError","_context2","route","authHeader","authorization","oboRequest","oboAssertion","acquireTokenOnBehalfOf","accessMatrix","checkFor","accessRule","handleOverage","checkAccessRule","ConfidentialClientApplication","CryptoProvider","buildAsync","keyVault","authProvider","AuthProvider","getAuthCodeUrl","rule","_claim_names","newIdTokenClaims","groups","creds","credType","methods","filter","elem","roles","index","findIndex"],"mappings":"gkCAOA,IAAIA,EAAW,SAAUC,GAGvB,IAAIC,EAAKC,OAAOC,UACZC,EAASH,EAAGI,eAEZC,EAA4B,mBAAXC,OAAwBA,OAAS,GAClDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOC,EAAKC,EAAKC,GAOxB,OANAf,OAAOgB,eAAeH,EAAKC,EAAK,CAC9BC,MAAOA,EACPE,YAAY,EACZC,cAAc,EACdC,UAAU,IAELN,EAAIC,GAEb,IAEEF,EAAO,GAAI,IACX,MAAOQ,GACPR,EAAS,SAASC,EAAKC,EAAKC,GAC1B,OAAOF,EAAIC,GAAOC,GAItB,SAASM,EAAKC,EAASC,EAASC,EAAMC,GAEpC,IACIC,EAAY1B,OAAO2B,QADFJ,GAAWA,EAAQtB,qBAAqB2B,EAAYL,EAAUK,GACtC3B,WACzC4B,EAAU,IAAIC,EAAQL,GAAe,IAMzC,OAFAC,EAAUK,QAsMZ,SAA0BT,EAASE,EAAMK,GACvC,IAAIG,EA/KuB,iBAiL3B,OAAO,SAAgBC,EAAQC,GAC7B,GAhLoB,cAgLhBF,EACF,MAAM,IAAIG,MAAM,gCAGlB,GAnLoB,cAmLhBH,EAA6B,CAC/B,GAAe,UAAXC,EACF,MAAMC,EAKR,MAoQG,CAAEnB,WAzfPqB,EAyfyBC,MAAM,GA9P/B,IAHAR,EAAQI,OAASA,EACjBJ,EAAQK,IAAMA,IAED,CACX,IAAII,EAAWT,EAAQS,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUT,GACnD,GAAIU,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnBV,EAAQI,OAGVJ,EAAQa,KAAOb,EAAQc,MAAQd,EAAQK,SAElC,GAAuB,UAAnBL,EAAQI,OAAoB,CACrC,GAnNqB,mBAmNjBD,EAEF,MADAA,EAjNc,YAkNRH,EAAQK,IAGhBL,EAAQe,kBAAkBf,EAAQK,SAEN,WAAnBL,EAAQI,QACjBJ,EAAQgB,OAAO,SAAUhB,EAAQK,KAGnCF,EA5NkB,YA8NlB,IAAIc,EAASC,EAASzB,EAASE,EAAMK,GACrC,GAAoB,WAAhBiB,EAAOE,KAAmB,CAO5B,GAJAhB,EAAQH,EAAQQ,KAjOA,YAFK,iBAuOjBS,EAAOZ,MAAQO,EACjB,SAGF,MAAO,CACL1B,MAAO+B,EAAOZ,IACdG,KAAMR,EAAQQ,MAGS,UAAhBS,EAAOE,OAChBhB,EA/OgB,YAkPhBH,EAAQI,OAAS,QACjBJ,EAAQK,IAAMY,EAAOZ,OA9QPe,CAAiB3B,EAASE,EAAMK,GAE7CH,EAcT,SAASqB,EAASG,EAAIrC,EAAKqB,GACzB,IACE,MAAO,CAAEc,KAAM,SAAUd,IAAKgB,EAAGC,KAAKtC,EAAKqB,IAC3C,MAAOd,GACP,MAAO,CAAE4B,KAAM,QAASd,IAAKd,IAhBjCtB,EAAQuB,KAAOA,EAoBf,IAOIoB,EAAmB,GAMvB,SAASb,KACT,SAASwB,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxBA,EAAkBhD,GAAkB,WAClC,OAAOiD,MAGT,IAAIC,EAAWxD,OAAOyD,eAClBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MAC/DD,GACAA,IAA4B3D,GAC5BG,EAAOiD,KAAKO,EAAyBpD,KAGvCgD,EAAoBI,GAGtB,IAAIE,EAAKP,EAA2BpD,UAClC2B,EAAU3B,UAAYD,OAAO2B,OAAO2B,GAWtC,SAASO,EAAsB5D,GAC7B,CAAC,OAAQ,QAAS,UAAU6D,SAAQ,SAAS7B,GAC3CrB,EAAOX,EAAWgC,GAAQ,SAASC,GACjC,OAAOqB,KAAKxB,QAAQE,EAAQC,SAkClC,SAAS6B,EAAcrC,EAAWsC,GAgChC,IAAIC,EAgCJV,KAAKxB,QA9BL,SAAiBE,EAAQC,GACvB,SAASgC,IACP,OAAO,IAAIF,GAAY,SAASG,EAASC,IAnC7C,SAASC,EAAOpC,EAAQC,EAAKiC,EAASC,GACpC,IAAItB,EAASC,EAASrB,EAAUO,GAASP,EAAWQ,GACpD,GAAoB,UAAhBY,EAAOE,KAEJ,CACL,IAAIsB,EAASxB,EAAOZ,IAChBnB,EAAQuD,EAAOvD,MACnB,OAAIA,GACiB,iBAAVA,GACPb,EAAOiD,KAAKpC,EAAO,WACdiD,EAAYG,QAAQpD,EAAMwD,SAASC,MAAK,SAASzD,GACtDsD,EAAO,OAAQtD,EAAOoD,EAASC,MAC9B,SAAShD,GACViD,EAAO,QAASjD,EAAK+C,EAASC,MAI3BJ,EAAYG,QAAQpD,GAAOyD,MAAK,SAASC,GAI9CH,EAAOvD,MAAQ0D,EACfN,EAAQG,MACP,SAASI,GAGV,OAAOL,EAAO,QAASK,EAAOP,EAASC,MAvBzCA,EAAOtB,EAAOZ,KAiCZmC,CAAOpC,EAAQC,EAAKiC,EAASC,MAIjC,OAAOH,EAaLA,EAAkBA,EAAgBO,KAChCN,EAGAA,GACEA,KAkHV,SAAS1B,EAAoBF,EAAUT,GACrC,IAAII,EAASK,EAAS/B,SAASsB,EAAQI,QACvC,QA1TEG,IA0TEH,EAAsB,CAKxB,GAFAJ,EAAQS,SAAW,KAEI,UAAnBT,EAAQI,OAAoB,CAE9B,GAAIK,EAAS/B,SAAiB,SAG5BsB,EAAQI,OAAS,SACjBJ,EAAQK,SArUZE,EAsUII,EAAoBF,EAAUT,GAEP,UAAnBA,EAAQI,QAGV,OAAOQ,EAIXZ,EAAQI,OAAS,QACjBJ,EAAQK,IAAM,IAAIyC,UAChB,kDAGJ,OAAOlC,EAGT,IAAIK,EAASC,EAASd,EAAQK,EAAS/B,SAAUsB,EAAQK,KAEzD,GAAoB,UAAhBY,EAAOE,KAIT,OAHAnB,EAAQI,OAAS,QACjBJ,EAAQK,IAAMY,EAAOZ,IACrBL,EAAQS,SAAW,KACZG,EAGT,IAAImC,EAAO9B,EAAOZ,IAElB,OAAM0C,EAOFA,EAAKvC,MAGPR,EAAQS,EAASuC,YAAcD,EAAK7D,MAGpCc,EAAQiD,KAAOxC,EAASyC,QAQD,WAAnBlD,EAAQI,SACVJ,EAAQI,OAAS,OACjBJ,EAAQK,SAzXVE,GAmYFP,EAAQS,SAAW,KACZG,GANEmC,GA3BP/C,EAAQI,OAAS,QACjBJ,EAAQK,IAAM,IAAIyC,UAAU,oCAC5B9C,EAAQS,SAAW,KACZG,GAoDX,SAASuC,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB1B,KAAKgC,WAAWC,KAAKN,GAGvB,SAASO,EAAcP,GACrB,IAAIpC,EAASoC,EAAMQ,YAAc,GACjC5C,EAAOE,KAAO,gBACPF,EAAOZ,IACdgD,EAAMQ,WAAa5C,EAGrB,SAAShB,EAAQL,GAIf8B,KAAKgC,WAAa,CAAC,CAAEJ,OAAQ,SAC7B1D,EAAYqC,QAAQkB,EAAczB,MAClCA,KAAKoC,OAAM,GA8Bb,SAAShC,EAAOiC,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAStF,GAC9B,GAAIuF,EACF,OAAOA,EAAe1C,KAAKyC,GAG7B,GAA6B,mBAAlBA,EAASd,KAClB,OAAOc,EAGT,IAAKE,MAAMF,EAASG,QAAS,CAC3B,IAAIC,GAAK,EAAGlB,EAAO,SAASA,IAC1B,OAASkB,EAAIJ,EAASG,QACpB,GAAI7F,EAAOiD,KAAKyC,EAAUI,GAGxB,OAFAlB,EAAK/D,MAAQ6E,EAASI,GACtBlB,EAAKzC,MAAO,EACLyC,EAOX,OAHAA,EAAK/D,WAzeTqB,EA0eI0C,EAAKzC,MAAO,EAELyC,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAMmB,GAIjB,SAASA,IACP,MAAO,CAAElF,WAzfPqB,EAyfyBC,MAAM,GA+MnC,OA5mBAe,EAAkBnD,UAAY2D,EAAGsC,YAAc7C,EAC/CA,EAA2B6C,YAAc9C,EACzCA,EAAkB+C,YAAcvF,EAC9ByC,EACA3C,EACA,qBAaFZ,EAAQsG,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOH,YAClD,QAAOI,IACHA,IAASlD,GAG2B,uBAAnCkD,EAAKH,aAAeG,EAAKC,QAIhCzG,EAAQ0G,KAAO,SAASH,GAQtB,OAPIrG,OAAOyG,eACTzG,OAAOyG,eAAeJ,EAAQhD,IAE9BgD,EAAOK,UAAYrD,EACnBzC,EAAOyF,EAAQ3F,EAAmB,sBAEpC2F,EAAOpG,UAAYD,OAAO2B,OAAOiC,GAC1ByC,GAOTvG,EAAQ6G,MAAQ,SAASzE,GACvB,MAAO,CAAEqC,QAASrC,IAsEpB2B,EAAsBE,EAAc9D,WACpC8D,EAAc9D,UAAUO,GAAuB,WAC7C,OAAO+C,MAETzD,EAAQiE,cAAgBA,EAKxBjE,EAAQ8G,MAAQ,SAAStF,EAASC,EAASC,EAAMC,EAAauC,QACxC,IAAhBA,IAAwBA,EAAc6C,SAE1C,IAAIC,EAAO,IAAI/C,EACb1C,EAAKC,EAASC,EAASC,EAAMC,GAC7BuC,GAGF,OAAOlE,EAAQsG,oBAAoB7E,GAC/BuF,EACAA,EAAKhC,OAAON,MAAK,SAASF,GACxB,OAAOA,EAAOjC,KAAOiC,EAAOvD,MAAQ+F,EAAKhC,WAuKjDjB,EAAsBD,GAEtBhD,EAAOgD,EAAIlD,EAAmB,aAO9BkD,EAAGtD,GAAkB,WACnB,OAAOiD,MAGTK,EAAGmD,SAAW,WACZ,MAAO,sBAkCTjH,EAAQkH,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAIlG,KAAOmG,EACdD,EAAKxB,KAAK1E,GAMZ,OAJAkG,EAAKE,UAIE,SAASpC,IACd,KAAOkC,EAAKjB,QAAQ,CAClB,IAAIjF,EAAMkG,EAAKG,MACf,GAAIrG,KAAOmG,EAGT,OAFAnC,EAAK/D,MAAQD,EACbgE,EAAKzC,MAAO,EACLyC,EAQX,OADAA,EAAKzC,MAAO,EACLyC,IAsCXhF,EAAQ6D,OAASA,EAMjB7B,EAAQ7B,UAAY,CAClBiG,YAAapE,EAEb6D,MAAO,SAASyB,GAcd,GAbA7D,KAAK8D,KAAO,EACZ9D,KAAKuB,KAAO,EAGZvB,KAAKb,KAAOa,KAAKZ,WApgBjBP,EAqgBAmB,KAAKlB,MAAO,EACZkB,KAAKjB,SAAW,KAEhBiB,KAAKtB,OAAS,OACdsB,KAAKrB,SAzgBLE,EA2gBAmB,KAAKgC,WAAWzB,QAAQ2B,IAEnB2B,EACH,IAAK,IAAIb,KAAQhD,KAEQ,MAAnBgD,EAAKe,OAAO,IACZpH,EAAOiD,KAAKI,KAAMgD,KACjBT,OAAOS,EAAKgB,MAAM,MACrBhE,KAAKgD,QAnhBXnE,IAyhBFoF,KAAM,WACJjE,KAAKlB,MAAO,EAEZ,IACIoF,EADYlE,KAAKgC,WAAW,GACLG,WAC3B,GAAwB,UAApB+B,EAAWzE,KACb,MAAMyE,EAAWvF,IAGnB,OAAOqB,KAAKmE,MAGd9E,kBAAmB,SAAS+E,GAC1B,GAAIpE,KAAKlB,KACP,MAAMsF,EAGR,IAAI9F,EAAU0B,KACd,SAASqE,EAAOC,EAAKC,GAYnB,OAXAhF,EAAOE,KAAO,QACdF,EAAOZ,IAAMyF,EACb9F,EAAQiD,KAAO+C,EAEXC,IAGFjG,EAAQI,OAAS,OACjBJ,EAAQK,SApjBZE,KAujBY0F,EAGZ,IAAK,IAAI9B,EAAIzC,KAAKgC,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQ3B,KAAKgC,WAAWS,GACxBlD,EAASoC,EAAMQ,WAEnB,GAAqB,SAAjBR,EAAMC,OAIR,OAAOyC,EAAO,OAGhB,GAAI1C,EAAMC,QAAU5B,KAAK8D,KAAM,CAC7B,IAAIU,EAAW7H,EAAOiD,KAAK+B,EAAO,YAC9B8C,EAAa9H,EAAOiD,KAAK+B,EAAO,cAEpC,GAAI6C,GAAYC,EAAY,CAC1B,GAAIzE,KAAK8D,KAAOnC,EAAME,SACpB,OAAOwC,EAAO1C,EAAME,UAAU,GACzB,GAAI7B,KAAK8D,KAAOnC,EAAMG,WAC3B,OAAOuC,EAAO1C,EAAMG,iBAGjB,GAAI0C,GACT,GAAIxE,KAAK8D,KAAOnC,EAAME,SACpB,OAAOwC,EAAO1C,EAAME,UAAU,OAG3B,CAAA,IAAI4C,EAMT,MAAM,IAAI7F,MAAM,0CALhB,GAAIoB,KAAK8D,KAAOnC,EAAMG,WACpB,OAAOuC,EAAO1C,EAAMG,gBAU9BxC,OAAQ,SAASG,EAAMd,GACrB,IAAK,IAAI8D,EAAIzC,KAAKgC,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQ3B,KAAKgC,WAAWS,GAC5B,GAAId,EAAMC,QAAU5B,KAAK8D,MACrBnH,EAAOiD,KAAK+B,EAAO,eACnB3B,KAAK8D,KAAOnC,EAAMG,WAAY,CAChC,IAAI4C,EAAe/C,EACnB,OAIA+C,IACU,UAATjF,GACS,aAATA,IACDiF,EAAa9C,QAAUjD,GACvBA,GAAO+F,EAAa5C,aAGtB4C,EAAe,MAGjB,IAAInF,EAASmF,EAAeA,EAAavC,WAAa,GAItD,OAHA5C,EAAOE,KAAOA,EACdF,EAAOZ,IAAMA,EAET+F,GACF1E,KAAKtB,OAAS,OACdsB,KAAKuB,KAAOmD,EAAa5C,WAClB5C,GAGFc,KAAK2E,SAASpF,IAGvBoF,SAAU,SAASpF,EAAQwC,GACzB,GAAoB,UAAhBxC,EAAOE,KACT,MAAMF,EAAOZ,IAcf,MAXoB,UAAhBY,EAAOE,MACS,aAAhBF,EAAOE,KACTO,KAAKuB,KAAOhC,EAAOZ,IACM,WAAhBY,EAAOE,MAChBO,KAAKmE,KAAOnE,KAAKrB,IAAMY,EAAOZ,IAC9BqB,KAAKtB,OAAS,SACdsB,KAAKuB,KAAO,OACa,WAAhBhC,EAAOE,MAAqBsC,IACrC/B,KAAKuB,KAAOQ,GAGP7C,GAGT0F,OAAQ,SAAS9C,GACf,IAAK,IAAIW,EAAIzC,KAAKgC,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQ3B,KAAKgC,WAAWS,GAC5B,GAAId,EAAMG,aAAeA,EAGvB,OAFA9B,KAAK2E,SAAShD,EAAMQ,WAAYR,EAAMI,UACtCG,EAAcP,GACPzC,IAKb2F,MAAS,SAASjD,GAChB,IAAK,IAAIa,EAAIzC,KAAKgC,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQ3B,KAAKgC,WAAWS,GAC5B,GAAId,EAAMC,SAAWA,EAAQ,CAC3B,IAAIrC,EAASoC,EAAMQ,WACnB,GAAoB,UAAhB5C,EAAOE,KAAkB,CAC3B,IAAIqF,EAASvF,EAAOZ,IACpBuD,EAAcP,GAEhB,OAAOmD,GAMX,MAAM,IAAIlG,MAAM,0BAGlBmG,cAAe,SAAS1C,EAAUf,EAAYE,GAa5C,OAZAxB,KAAKjB,SAAW,CACd/B,SAAUoD,EAAOiC,GACjBf,WAAYA,EACZE,QAASA,GAGS,SAAhBxB,KAAKtB,SAGPsB,KAAKrB,SA7rBPE,GAgsBOK,IAQJ3C,GAOsByI,EAAOzI,SAGtC,IACE0I,mBAAqB3I,EACrB,MAAO4I,GAUPC,SAAS,IAAK,yBAAdA,CAAwC7I,gCChuB7B8I,oCAOFC,oBAAP,SAA2BC,OAClBA,EAAOC,eAAeC,eACjB,IAAI5G,MAAM,6BAGf0G,EAAOC,eAAeE,eACjB,IAAI7G,MAAM,gCAGf0G,EAAOC,eAAeG,eAAiBJ,EAAOC,eAAeI,wBACxD,IAAI/G,MAAM,qCAYjBgH,qBAAP,SAA4BN,EAAqBO,mBAAAA,IAAAA,EAA4B,MAClE,CACHC,QACIN,SAAUF,EAAOC,eAAeC,SAChCO,UAAWT,EAAOU,YACZvJ,OAAOwJ,QAAQX,EAAOU,aAAa,GAAG,GAAtC,qBACWE,YAAUC,2BAA0Bb,EAAOC,eAAeE,UACvEH,EAAOC,eAAe3I,eAAe,iBAAoB,CAAC8I,aAAcJ,EAAOC,eAAeG,cAC9FJ,EAAOC,eAAe3I,eAAe,sBAAyB,CAAC+I,kBAAmBL,EAAOC,eAAeI,oBAC5GS,iBAAkBd,EAAOU,YACnB,CAACK,YAAUC,iBAAiB7J,OAAOwJ,QAAQX,EAAOU,aAAa,GAAG,GAAtC,YAC5B,KAEVO,MAAO,CACHV,YAAAA,GAEJW,OAAQ,CACJC,cAAe,CACXC,eAAgB,SAACC,EAAUC,EAASC,GAChCC,QAAQC,IAAIH,IAEhBI,mBAAmB,EACnBL,SAAUM,WAASC,iBChB1BC,EAAkB,CAC3BC,OAAQ,SACRC,MAAO,QACPC,YAAa,cACbC,cAAe,iBACfC,gBAAiB,kBACjBC,uBAAwB,+CACxBC,oBAAqB,kCCvCZC,wBASGC,EAA0BC,QAC7BD,YAAcA,OACdC,WAAaA,6BAQhBC,gDAAN,WAA2BC,gFACnBC,cAAYC,QAAQF,0BACpBjB,QAAQC,IDPC,qCCQF,mBAOPmB,EAAeC,EAAIC,OAAOL,EAAW,CAAEpD,UAAU,2DAEjDmC,QAAQC,IDhBG,2BCiBXD,QAAQC,6BACD,sCAOM/G,KAAKqI,eAAeH,EAAaI,OAAQJ,EAAaK,QAAQC,aAA3E/E,mEAEAqD,QAAQC,IDzBG,mCC0BXD,QAAQC,6BACD,4BAOP0B,EAAgBN,EAAIO,OAAOX,EAAWtE,GDLtC,WCaIzD,KAAK4H,YAAYrC,eAAeE,UDZ7B,kBCaHzF,KAAK4H,YAAYrC,eAAeE,UDZjC,cCaCzF,KAAK4H,YAAYrC,eAAeE,gBAE3BmC,YAAYrC,eAAeE,SAAWyC,EAAaK,QAAQC,uBAG7DC,6CAEP3B,QAAQC,IDpDI,4BCqDZD,QAAQC,6BACD,oIASR4B,2CAAN,WAAsBC,iGAEa5I,KAAK8H,qBAAqBc,eAAhDH,mDAGKzI,KAAK6I,sBAAsBJ,qCAE3B,mEAGX3B,QAAQC,6BACD,qHASf8B,sBAAA,SAAsBC,OACZC,EAAMC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,aAO1BL,EAAa,IAAQM,SAASpJ,KAAK4H,YAAYrC,eAAeE,WAC5DqD,EAAa,MAAY9I,KAAK6H,WAAW/B,KAAKN,UAC7CsD,EAAa,KAAWC,GAAOD,EAAa,KAAWC,KAW3EM,+CAAN,WAA0BC,EAAqBC,iGAEZvJ,KAAK8H,qBAAqBwB,eAAhDb,mDAGKzI,KAAKwJ,0BAA0Bf,EAA8Bc,qCAE7D,mEAGXzC,QAAQC,6BACD,uHAUfyC,0BAAA,SAA0Bf,EAA4Bc,OAC5CR,EAAMC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAOxCM,IAAchB,EAAa,IAAQW,SAASpJ,KAAK4H,YAAYrC,eAAeE,UAC5EiE,EAAiBjB,EAAa,KAAWM,GAAON,EAAa,KAAWM,EAExEY,EAAgBlB,EAAa,MAAYzI,KAAK4H,YAAYrC,eAAeC,UAC3EiD,EAAa,MAAY,SAAWzI,KAAK4H,YAAYrC,eAAeC,SAElEoE,EAAcnN,OAAO2D,OAAOJ,KAAK4H,YAAYiC,gBAAgBC,MAAK,SAACC,UAAuBA,EAASC,WAAaT,KACjHU,OAAOC,OAAM,SAAAC,UAAO1B,EAAa,IAAQW,SAASe,aAEhDR,GAAiBF,GAAeC,GAAkBE,KAU/CvB,0CAAN,WAAqBC,EAAQE,+EAU3B4B,EAASC,EAAW,CACtBC,QAPAtK,KAAK4H,YAAY5B,YACJhG,KAAK6H,WAAW/B,KAAKC,4CAEbG,YAAUC,2BAA0BqC,oCAO/C4B,EAAOG,mBAAmBjC,EAAOkC,4CAAMC,6HC5LhDC,sDAOHC,qDAAN,WAAgCrF,+EAEtBsF,EAAa,IAAIC,yBAElBvF,EAAOC,eAAeuF,4DAChBxF,eAGHA,EAAOC,eAAeuF,mBAAmBC,sBF8C7C,kBACK,iEE5CgC/K,KAAKgL,oBAAoB1F,EAAQsF,iBAC9DtF,EAAOC,eAAeG,oBAA8BlI,wBAC7C8H,qCAEPwB,QAAQC,iFAO0B/G,KAAKiL,yBAAyB3F,EAAQsF,kBAAlEM,mBACuBlL,KAAKgL,oBAAoB1F,EAAQsF,kBAAxDO,SAEN7F,EAAOC,eAAeI,kBAAoB,CACtCyF,WAAYF,EAAoBG,WAAWC,eAAe9H,WAC1D+H,WAAYJ,EAAe3N,MAAMgO,MAAM,iCAAiC,sBAErElG,sCAEPwB,QAAQC,gLAgBlBkE,oDAAN,WAA+B3F,EAAqBsF,+EAG1Ca,EAAe,IAAIC,oBAAkBpG,EAAOC,eAAeuF,mBAAmBa,YAAaf,qBAG3Da,EAAaG,eAAetG,EAAOC,eAAeuF,mBAAmBe,+FAGvG/E,QAAQC,qJAWViE,+CAAN,WAA0B1F,EAAqBsF,+EAGrCa,EAAe,IAAIK,eAAaxG,EAAOC,eAAeuF,mBAAmBa,YAAaf,qBAG3Da,EAAaM,UAAUzG,EAAOC,eAAeuF,mBAAmBe,+FAG7F/E,QAAQC,wJCjFPiF,eASFA,6CAAkB,WAAOhC,EAAkBV,4EAE1CtB,cAAYC,QAAQqB,yBACd,IAAI1K,MHMD,gCGHPqN,EAA8B,CAChCC,QAAS,CACLC,wBAAyB7C,IAIjCxC,QAAQC,IAAI,gCAAiC,IAAImC,MAAO1F,8BAGd4I,EAAMC,IAAIrC,EAAUiC,0CAC1CK,+CAEhBxF,QAAQC,oJAYTiF,8CAAmB,WAAO1C,EAAqBiD,EAAkBD,wFAAAA,IAAAA,EAAiB,sBAGrDN,EAAaQ,gBAAgBD,EAAUjD,cAA7DmD,UACO,MAAUC,KAAI,SAACC,UAAML,EAAKrK,KAAK0K,EAAEC,QAE1CH,EAActF,EAAgBK,kDACjBwE,EAAaa,iBAAiBvD,EAAamD,EAActF,EAAgBK,iBAAkB8E,4EAEjGA,oEAGXxF,QAAQC,0JCpDP+F,eAOJA,oBAAoB,SAACC,EAAcC,OAClCC,EAAsB,IAAI5G,YAAU2G,GAAKE,0BAE1CD,EAAcE,SAMVH,EALFC,EAAcG,gBAGZL,EAAIM,SAAW,MAAQL,EAFrBD,EAAIM,SAAW,MAAQN,EAAIV,IAAI,QAAUW,sFCgExCpF,EAA0BrB,8BAiCzB,SAAC0F,OAIJqB,EAAYC,EAAQC,gBAG1BF,EAAUjB,IAAIoB,EAAK7F,YAAY8F,WAAWC,SAAUF,EAAKG,kBAErDH,EAAK7F,YAAY8F,WAAWG,oBAK5BP,EAAUjB,IAAIoB,EAAK7F,YAAY8F,WAAWG,oBAAoB,SAACd,EAAKe,EAAKvM,GACrEwL,EAAIgB,QAAQC,SAAQ,WAChBF,EAAIG,WAAW,WAKpBX,eAUF,SAACrB,UACC,SAACc,EAAce,EAAevM,GAM5BwL,EAAIgB,QAAJ,kBACDhB,EAAIgB,QAAQG,gBAAkB,CAC1BnI,UAAW,GACXkE,OAAQ,GACRxL,MAAO,GACP0P,YAAa,KAIhBpB,EAAIgB,QAAJ,eACDhB,EAAIgB,QAAQK,aAAe,CACvBrI,UAAW,GACXkE,OAAQ,GACRkE,YAAa,GACbE,KAAM,KAKTtB,EAAIgB,QAAJ,UACDhB,EAAIgB,QAAQO,QAAU,CAClBC,cAAe,GACfC,YAAa,GACb/I,SAAU,GACVgJ,SAAU,GACV3F,cAAe,KAKvBiE,EAAIgB,QAAQW,MAAQjB,EAAKkB,eAAeC,oBAGlCnQ,EAAQgP,EAAKkB,eAAeE,aAC9BC,KAAKC,UAAU,CACXC,MLpLP,UKqLOC,KAAMhD,EAAQiD,gBACdR,MAAO3B,EAAIgB,QAAQW,SAIrBS,EAAyB,CAC3BpJ,UAAW0H,EAAK5F,WAAW/B,KAAKC,UAChCkE,OAAQmF,sBACR3Q,MAAOA,EACPkP,SAAUb,EAASuC,kBAAkBtC,EAAKU,EAAK7F,YAAY8F,WAAWC,UACtE2B,OAAQC,cAAYC,uBAIjB/B,EAAKgC,YAAY1C,EAAKe,EAAKvM,EAAM4N,kBAStC,SAAClD,UACA,SAACc,EAAce,EAAevM,OAC3BmO,EAAwB5C,EAASuC,kBAAkBtC,EAAKd,EAAQiD,iBAQhES,EAAelC,EAAK5F,WAAW/B,KAAKC,0DAAyD2J,EAEnG3C,EAAIgB,QAAQ6B,iBAAkB,EAE9B7C,EAAIgB,QAAQC,SAAQ,WAChBF,EAAIH,SAASgC,4BAWA,SAAC1D,qCACf,WAAOc,EAAce,EAAevM,kFACnCwL,EAAI8C,MAAMpR,2BACJA,EAAQqQ,KAAKgB,MAAMrC,EAAKkB,eAAeoB,aAAahD,EAAI8C,MAAMpR,SAG1DiQ,QAAU3B,EAAIgB,QAAQW,4BACpBjQ,EAAMuQ,aL7OrB,mBAEM,iDK8OSjC,EAAIgB,QAAQK,aAAaC,KAAOtB,EAAI8C,MAAMxB,wBAIVZ,EAAKuC,WAAWC,mBAAmBlD,EAAIgB,QAAQK,6BAArE8B,SACNpJ,QAAQC,IAAI,kBAAmBmJ,uBAGEzC,EAAK0C,eAAexH,gBAAgBuH,EAActH,yBAI3EmE,EAAIgB,QAAQO,QAAU4B,EAAc5B,QACpCvB,EAAIgB,QAAQ6B,iBAAkB,EAE9B9B,EAAIH,SAASlP,EAAMwQ,QAEnBnI,QAAQC,ILvP7B,iBKwPqB+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,kEAG7CtJ,QAAQC,ILzPjB,yBK0PSD,QAAQC,UACRxF,kEAGJuF,QAAQC,IL3PV,4BK4PED,QAAQC,UACRxF,2DAOE8O,EAAe5C,EAAK6C,0BAA0BvD,EAAIgB,QAAQK,aAAanE,QAE7E8C,EAAIgB,QAAQK,aAAaC,KAAOtB,EAAI8C,MAAMxB,yBAGVZ,EAAKuC,WAAWC,mBAAmBlD,EAAIgB,QAAQK,sBAArE8B,SACNpJ,QAAQC,IAAI,kBAAmBmJ,GAC/BnD,EAAIgB,QAAQwC,gBAAgBF,GAAc/G,YAAc4G,EAAc5G,YACtEwE,EAAIH,SAASlP,EAAMwQ,yDAEnBnI,QAAQC,IL9QV,4BK+QED,QAAQC,UACRxF,2DAMJuF,QAAQC,IL1RJ,sCK2RJ+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAWvM,4DAIjD2F,QAAQC,IL7RR,wBK8RA+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,8CAG7CtJ,QAAQC,ILzRH,mBK0RL+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,iKAY1C,SAACnE,qCACD,WAAOc,EAAce,EAAevM,2FAIjC8O,EAAe5C,EAAK6C,0BAFpBrG,EAASgC,EAAQlC,SAASE,QAI3B8C,EAAIgB,QAAQwC,kBACbxD,EAAIgB,QAAQwC,gBAAkB,IAGlCxD,EAAIgB,QAAQwC,wBACPF,QACM5C,EAAK7F,YAAY2I,gBAAgBF,IACpC/G,YAAa,mBAKXkH,EAAmC,CACrClC,QAASvB,EAAIgB,QAAQO,QACrBrE,OAAQA,YAIgBwD,EAAKuC,WAAWS,mBAAmBD,aAAzDN,SACNpJ,QAAQC,IAAI,yDAA0DmJ,IAIlElI,cAAYC,QAAQiI,EAAc5G,oCAClCxC,QAAQC,ILzUP,kBK0UK,IAAI2J,+BL7UJ,gCKgVV3D,EAAIgB,QAAQwC,gBAAgBF,GAAc/G,YAAc4G,EAAc5G,YACtE/H,2DAGIoP,gBAAiBD,wDACXjS,EAAQgP,EAAKkB,eAAeE,aAC9BC,KAAKC,UAAU,CACXC,MLnWT,gBKoWSC,KAAMlC,EAAI6D,MAAM3B,KAChBP,MAAO3B,EAAIgB,QAAQW,SAIrBS,EAAyB,CAC3BpJ,UAAW0H,EAAK5F,WAAW/B,KAAKC,UAChCkE,OAAQA,EACRxL,MAAOA,EACPkP,SAAUb,EAASuC,kBAAkBtC,EAAKU,EAAK7F,YAAY8F,WAAWC,UACtEW,QAASvB,EAAIgB,QAAQO,2BAIlBb,EAAKgC,YAAY1C,EAAKe,EAAKvM,EAAM4N,YAExCrI,QAAQC,UACRxF,mJAWG,SAAC0K,qCACT,WAAOc,EAAce,EAAevM,uFACjCsP,EAAa9D,EAAIb,QAAQ4E,cAIzBT,EAAe5C,EAAK6C,0BADpBrG,EAASgC,EAAQlC,SAASE,QAG1B8G,EAAgC,CAClCC,aAAcH,EAAWrF,MAAM,KAAK,GACpCvB,OAAQA,qBAIoBwD,EAAKuC,WAAWiB,uBAAuBF,UAGnEhE,EAAG,eACEsD,GAAe,CACZ/G,mBAA2BA,gBAInC/H,sDAEAuF,QAAQC,UACRxF,kJAYM,SAAC0K,UACR,SAACc,EAAce,EAAevM,MAC7BwL,EAAIgB,QAAS,KACRhB,EAAIgB,QAAQ6B,uBACb9I,QAAQC,ILnaT,iBKoaQ+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,cAGpD7O,SAEAuF,QAAQC,ILtZD,qCKuZP+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,kCAWtC,SAACnE,qCACL,WAAOc,EAAce,EAAevM,2EACjC+H,EAAcyD,EAAIb,QAAQ4E,cAActF,MAAM,KAAK,IAErDuB,EAAIb,QAAQ4E,+CACArD,EAAK0C,eAAe9G,oBAAoBC,EAAayD,EAAI6D,MAAM3B,8CACvEnI,QAAQC,IL1bT,mCK2bQ+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,sBAGpD7O,4BAEAuF,QAAQC,ILzbH,kBK0bL+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,oIAUzC,SAACnE,qCACF,WAAOc,EAAce,EAAevM,4EACnCwL,EAAIgB,UAAWN,EAAK7F,YAAYsJ,8BAE1BC,EAAWlF,EAAQmF,WAAWxU,eAAeuK,EAAgBC,QAAUD,EAAgBC,OAASD,EAAgBE,WAE9G8J,gBACChK,EAAgBC,gBAoBhBD,EAAgBE,iCAlBiDxI,IAA9DkO,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBC,6BAC9C2F,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBG,eAAgByF,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBI,gDACvGkG,EAAK4D,cAActE,EAAKe,EAAKvM,EAAM0K,EAAQmF,mEAExDtK,QAAQC,IL1cjB,mDK2cgB+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,kDAK/C3C,EAAK6D,gBAAgBvE,EAAIrO,OAAQuN,EAAQmF,WAF/BrE,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBC,QAECD,EAAgBC,kDACvE0G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,8BAIxD7O,yCAIiE1C,IAA7DkO,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBE,+BAClDP,QAAQC,IL5dd,kDK6da+G,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,0BAI3C3C,EAAK6D,gBAAgBvE,EAAIrO,OAAQuN,EAAQmF,WAFhCrE,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBE,OAECF,EAAgBE,iDACtEyG,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,8BAIxD7O,6FAORuM,EAAIH,SAASF,EAAK7F,YAAY8F,WAAW0C,qHAxbjDhL,EAAmBC,oBAAoBuC,QAClCA,YAAcA,OAEdC,WAAazC,EAAmBQ,qBAAqBgC,EAAarB,QAClEyJ,WAAa,IAAIuB,gCAA8BvR,KAAK6H,iBAEpDsI,eAAiB,IAAIxI,EAAe3H,KAAK4H,YAAa5H,KAAK6H,iBAC3D8G,eAAiB,IAAI6C,mBASjBC,sCAAb,WAAwB7J,EAA0BrB,0FAEpCmL,EAAW,IAAIhH,WAC4BgH,EAAS/G,0BAA0B/C,iBAC9E+J,EAAe,IAAIC,SAAiDrL,qBACnEoL,mCAEP7K,QAAQC,sJAgbF0I,uCAAN,WAAkB1C,EAAce,EAAevM,EAAoB4N,yEAEvEpC,EAAIgB,QAAQG,gBAAgBnI,UAAYoJ,EAAOpJ,UAC/CgH,EAAIgB,QAAQG,gBAAgBjE,OAASkF,EAAOlF,OAC5C8C,EAAIgB,QAAQG,gBAAgBzP,MAAQ0Q,EAAO1Q,MAC3CsO,EAAIgB,QAAQG,gBAAgBC,YAAcgB,EAAOxB,SACjDZ,EAAIgB,QAAQG,gBAAgBoB,OAASH,EAAOG,OAC5CvC,EAAIgB,QAAQG,gBAAgBI,QAAUa,EAAOb,QAE7CvB,EAAIgB,QAAQK,aAAarI,UAAYoJ,EAAOpJ,UAC5CgH,EAAIgB,QAAQK,aAAanE,OAASkF,EAAOlF,OACzC8C,EAAIgB,QAAQK,aAAaD,YAAcgB,EAAOxB,4BAInB3N,KAAKgQ,WAAW6B,eAAe9E,EAAIgB,QAAQG,yBAClEJ,EAAIH,mEAEJ7G,QAAQC,ILphBQ,yCKqhBhBD,QAAQC,UACRxF,gIAYM8P,yCAAN,WAAoBtE,EAAce,EAAevM,EAAoBuQ,qFACjEC,IAA2DhF,EAAIgB,QAAQO,QAAQxF,iBAEjF0H,EAAmC,CACrClC,QAASvB,EAAIgB,QAAQO,QACrBrE,OAAQ9C,EAAgBO,oBAAoB8D,MAAM,wBAKtBxL,KAAKgQ,WAAWS,mBAAmBD,iBAAzDN,2BAE0BlE,EAAaQ,gBAAgBrF,EAAgBM,uBAAwByI,EAAc5G,yBAAzGmD,UAQYtF,EAAgBK,6DAEDwE,EAAaa,iBAAiBqD,EAAc5G,YAAamD,EAActF,EAAgBK,6BAEhHuF,EAAIgB,QAAQO,QAAQxF,mBACbkJ,GACHC,gBAGCjS,KAAKsR,gBAAgBvE,EAAIrO,OAAQoT,EAAM/E,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBC,QAASD,EAAgBC,kDAC5G0G,EAAIH,SAAS3N,KAAK4H,YAAY8F,WAAW0C,gDAEzC7O,gEAGXuF,QAAQC,UACRxF,2CAGJwL,EAAIgB,QAAQO,QAAQxF,mBACbkJ,GACHC,OAAQxF,EAAa,MAAUC,KAAI,SAACC,UAAMA,EAAEC,QAG3C5M,KAAKsR,gBAAgBvE,EAAIrO,OAAQoT,EAAM/E,EAAIgB,QAAQO,QAAQxF,cAAc3B,EAAgBC,QAASD,EAAgBC,kDAC5G0G,EAAIH,SAAS3N,KAAK4H,YAAY8F,WAAW0C,gDAEzC7O,+DAIfuF,QAAQC,UACRxF,kEAGJuF,QAAQC,UACRxF,+IAYA+P,gBAAA,SAAgB5S,EAAgBoT,EAAkBI,EAAiBC,OACnEL,EAAKM,QAAQhJ,SAAS1K,UAoBtBoI,QAAQC,ILjnBI,sCKknBL,SApBCoL,QACChL,EAAgBC,UACb0K,EAAKG,OAAOI,QAAO,SAAAC,UAAQJ,EAAM9I,SAASkJ,MAAO9P,OAAS,SAC1DsE,QAAQC,ILlmBT,kCKmmBQ,aAIVI,EAAgBE,SACbyK,EAAKS,MAAMF,QAAO,SAAAC,UAAQJ,EAAM9I,SAASkJ,MAAO9P,OAAS,SACzDsE,QAAQC,IL3mBV,iCK4mBS,SAYhB,KAQHuJ,0BAAA,SAA0BrG,OAGxBuI,EAAQ/V,OAAO2D,YAAYJ,KAAK4H,YAAY2I,gBAAoBvQ,KAAK4H,YAAYiC,iBAClF4I,WAAU,SAAC1I,UAAuB+E,KAAKC,UAAUhF,EAASE,UAAY6E,KAAKC,UAAU9E,aAErExN,OAAOgH,UAAUzD,KAAK4H,YAAY2I,gBAAoBvQ,KAAK4H,YAAYiC,iBAAkB2I"}